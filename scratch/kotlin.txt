New language by JetBrains - vendor of tooling
Currently not very good support for outside-of-tool use
Stated goal is to provide a language for the common people who don't want Java no more, but find Scala and Clojure intimidating

I find a lot of the constructs confusing
- Anonymous functions, passing them around
- Scoping
- Data objects vs classes vs objects vs functions
- Why leave inner classes in there?
- val vs var
- Optional function return types until they aren't optional - the error messages
- Legacy Java Cruft
- Packages, Classes, Etc

I like some of the constructs
- The elvis operator
- traits (although too verbose)
- Scoped extension methods
- Passing functions to invoke on an object 
- Infix notation
- Groovy style DSLs

I wonder what the credentials of the authors of the language are, I wonder what languages they've built before. It seems a bit like a science experiment and seems like they've gone down some routes and had to backstep (inner classes for example). Given the amount of work done previously on other programming languages it seems more forethought could have gone into this.

That said, I can see some quite nice frameworks being built off the back of some of the constructs built into Kotlin, and the language constructs can be learned. Give me the ability to easily work with this stuff outside of IntelliJ and I could quite easily see me recommending it for using it in projects for which the JVM usage is seen as mandatory (interop with legacy for example)

Moving onto other languages, JavaScript might have some weird edge-case behaviours but in reality is made up of for loops, if statements and functions. That's it - it's possible to read most JS right off the bat and for most new JS developers to be reading most JS quite quickly.




