<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><image><url>http://codeofrob.com/img/cover.jpg</url><title>Rob Ashton&apos;s blog</title><link>http://codeofrob.com</link></image><generator>NodeJS RSS Module</generator><lastBuildDate>Wed, 13 Feb 2013 19:38:25 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><item><title><![CDATA[5 reasons to give node.js some love]]></title><description><![CDATA[
		<p>In response to a question from a friend on Twitter (Private account so no linky), but with the text: </p>

<p>"Been reading up a little bit on node.js @robashton @domgreen. What makes it stand out from alternatives or is it just a JS 'me too' play?"</p>

<p>My initial response was, hey - you know what? I can't think of any (popular) alternatives that provide the unique combination that node.js does, and then started writing a torrent of tweets describing why I personally am so excited about node.</p>

<p>Then I decided that rather than spam Twitter, I should write a blog post to link to when asked the same question in the future.</p>

<p>Every bugger has already done one of these, but I want to answer the question in my own personal way</p>

<b>1) You get to write Javascript on the server and the client</b>

<p>Think about this for a second - it's really not just a gimmick (although some people seem to think it is). Even in a simple web application you're going to have validation logic that you're going to want to execute on the client AND on the server, and usually this can't be shared without going through some sort of rules engine or crazy framework to spit out some rough client-side equivalents. </p>

<p>No need with node, you can write your model (complete with business rules, etc), and write a nice task-based user interface around that model, running it all locally in the browser, and then dispatching and validating the commands on the server - because hey, everything is just JSON at the end of the day, and everything you're writing works against that.</p>

<p>Take this a step further, and consider that we have some pretty awesome document databases on the scene at the moment whose primary communication and storage mechanism is - guess what? JSON (well BSON) - at no point during any of this do you need to sit there dealing with mapping frameworks or hand-written mapping code, because you're just flinging JSON around.</p>

<p>With efforts on <a href="http://www.commonjs.org/">CommonJS</a> and <a href="https://github.com/sstephenson/stitch">Stitch</a> ongoing, there is really no excuse for not writing all your JavaScript in a state where it can be executed on both the client and the server.</p>

<b>2) Event-based asynchronous stuff is just How Things Work in JavaScript </b>

<p>Yeah okay, I have no idea what I'm talking about here, but what I do understand and what most people who have been writing JavaScript for the past decade understand is that <i>your</i> JavaScript tends to execute on a single thread and long-running processes get dealt with by the host, using callbacks to notify you (back on that single thread) as and when those things are done.</p>

<p>Now, in the browser these long-running requests are limited to... well HTTP calls to the server to get/post data, but on the server we do nearly <i>everything</i> like this; requests to other machines, requests to the file system etc.</p>

<p>We don't need any crazy language keywords (looking at you C#), we don't need any crazy Task of X/Y and Z objects (Looking at you C#), we just need: </p>

<script src="https://gist.github.com/949550.js?file=gistfile1.js"></script>

<p>This gives us some brilliant performance benefits, dealing with potentially gazillions of connected clients an <a href="http://www.theregister.co.uk/2011/03/01/the_rise_and_rise_of_node_dot_js/">easy possibility</a> <i>Sorry for a "the register" link this early in the morning, it's a bit indecent of me.</i></p>

<p>This also makes dealing with concurrency (at least within a single process) really easy too, all your variables are safe to be accessed at any time as you haven't got any potential race conditions, you can mutate state all you want and not worry that somebody else is going to come along and take away your cheese.</p>

<p>Hell, even the plans for future-node seem to be keeping this philosophy intact, with multiple node processes being given a way to communicate safely (or at least as far as I understand the slides that I've read from conferences I wasn't at).</p>

<b>3) Awesome package management!</b>

<p>Just like Ruby, and just like Linux-land in general, if you want to do something there is probably a library/package waiting for you to pull down and consume, and you can do this via the wonderful magic of <a href="http://npmjs.org/">NPM</a></p>

<p>npm install socket.io</p>

<p>It's that easy to get the libraries you need, and there are libraries available for most of the things you can think of, the primary ones I am using myself are: </p>

<ul>
     <li><a href="https://github.com/felixge/node-paperboy">Paperboy</a> - for simply serving static files from a directory (index.html, style.css, etc</li>
     <li><a href="https://github.com/donnerjack13589/node.gzip">gzip</a> - for um, gzipping content that I send down to the client</li>
     <li><a href="http://socket.io/">socket.io</a> - for magically doing websockets, or at the very least emulating websockets</li>
     <li><a href="https://github.com/tmpvar/jsdom">jsdom</a> + jquery - manipulating the DOM server-side? Oh say it ain't so?</li>
     <li><a href="https://github.com/sstephenson/stitch">Stitch</a> for allowing me to write code in CommonJS format and still use it in the browser.</li>
</ul>

<p>This isn't anything particularly unique to node, but in this day and age it's a bit hard to be taken seriously without a good package manager in your ecosystem and it's good to see something of quality here.</p>

<b>4) Community community community</b>

<p>The community around node.js is brilliantly active, passionate and y'know - generally quite bright - and willing to try new things out (Kinda goes with the territory really)</p>

<p>This, just like Ruby, is a really big draw for those of us from ecosystems which... lack anything of this scale</p>

<p>This enthusiasm does make it a bit difficult to separate actual innovation occurring from the old "Look at JavaScript doing what everything else has been able to do forever", but I'll take raw enthusiasm over rigid nay-say mentality any day - enthusiasm is contagious and gives me the ability to Get Things Done</p>

<b>5) It's easy, really easy, like super easy, We can all do it!</b>

<p>JavaScript aside (And if you don't like JavaScript you can always use CoffeeScript), the process of writing code that does exciting stuff is ludicrously simple.</p>

<p>Having direct access to the HTTP pipeline, and not hiding it behind crazy levels of abstracted framework cruft is a big, big win - and once you start writing code like this you start to wonder where this kind of thing has been all your life.</p>

<p>"I want to do this: " has not once resulted in me banging my head against the constraints and limitations that somebody else has put in my way (supposedly to help me).</p>

<p>My personal website currently runs on pixie dust and grated unicorn horns - I'm pulling in content from my old subtext blog and spitting it out on the front page (with plans to pull in content from <a href="http://codebetter.com/robashton/">CodeBetter</a> and <a href="http://altdevblogaday.org/author/rob-ashton/">Altdevblogaday</a> too), whilst acting as a reverse proxy for the old site (in very few lines of code). </p> 

<p>That's utterly crazy, and I drafted it up in just a few hours of hackity hack hack hacking, with those goals in mind.</p>

<b>Anyway...</b>

<p>The beauty of node comes in the combination of these attributes, not just one thing (because none of those things bar point #1 are by themselves particularly new or ground breaking</p>

<p>If you've previously dismissed node as something pointless because you think it brings nothing new to the table compared to your X, Y or Z then I urge you to have another look at it, as The Creators prepare to bring it natively to Windows it's only going to get more popular and you'll want to be involved.</p>

	]]></description><link>http://codeofrob.com/entries/5-reasons-to-give-node.js-some-love.html</link><guid isPermaLink="true">http://codeofrob.com/entries/5-reasons-to-give-node.js-some-love.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sat, 30 Apr 2011 07:39:00 GMT</pubDate></item><item><title><![CDATA[Asset packaging in browser based games]]></title><description><![CDATA[<script type="text/javascript">
 setTimeout(function() {
   window.location = "http://altdevblogaday.com/2012/03/28/asset-packaging-in-browser-based-games/";
 }, 2000);
</script>

  <p>I'm redirecting you to <a href="http://altdevblogaday.com/2012/03/28/asset-packaging-in-browser-based-games/">http://altdevblogaday.com/2012/03/28/asset-packaging-in-browser-based-games/</a> with JavaScript, feel free to skip the setTimeout call I've used</p>
]]></description><link>http://codeofrob.com/entries/asset-packaging-in-browser-based-games.html</link><guid isPermaLink="true">http://codeofrob.com/entries/asset-packaging-in-browser-based-games.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 30 Mar 2012 07:54:00 GMT</pubDate></item><item><title><![CDATA[DDD8 - Post Event]]></title><description><![CDATA[
		<p>Wow.</p>
<p>That was a wonderful day, and the sessions I ended up going to were:</p>
<ul>
    <li>@ICooper's session on MVC Architecture (preaching the choir but good to be re-assured) </li>
    <li>@robashton's session on Multi-tenant ASP.NET MVC (obviously) </li>
    <li>@holytshirt's session on Mono (Good to see this project is advancing well) </li>
    <li>@garyshort's session on JClosure (Lovely!) </li>
    <li>@blowdart's session on the crystal maze </li>
</ul>
<p>The last session was interrupted constantly by the MVPs and associated crowd&nbsp;because Barry is leaving the UK and heading off to MS to learn how to spell :)</p>
<p>There isn't much specifically to talk about really, it's been said by everybody. The event was well organised, the post-event meal was also surprisingly kept in control and the post-event drinks ... well I'd had no sleep the previous night so I left early. I believe fun was had by all however.</p>
<p>My talk? I think it went okay - I was a bit nervous presenting on a subject that doesn't get talked about openly all that much, and worried the audience might throw a few massive spanners in the works (although I am open to change, I don't want to be told outright I'm wrong in the middle of a talk!)</p>
<p>I spoke a bit fast, and had a minor emergency at the start when realising I needed an adapter for my laptop, but was saved by the team whose job it was to babysit me and massive thanks goes to them for saving my presentation :)</p>
<p>My slides can be found <a href="http://fear.the.codeofrob.com/ddd8slides.zip">here</a>, and demo code can be found <a href="http://fear.the.codeofrob.com/ddd8code.zip">here</a>.</p>
<p>The nerd dinner multi-tenant example can be found on the MvcEx codeplex site (<a href="http://mvcex.codeplex.com">http://mvcex.codeplex.com</a>) - but I'll be hoping to improve it beyond its "suitable for demo" stage and do some blog entries on the rationale behind some of the decisions/concepts found within over the coming weeks.</p>
<p>&nbsp;It's not perfect, it's not anywhere near done and as I keep telling people, it's just for reference purposes (at present), feel free to make suggestions, contributions and etc and we'll get there in the end. Multi-tenancy is the future you know?</p>
	]]></description><link>http://codeofrob.com/entries/ddd8---post-event.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ddd8---post-event.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 31 Jan 2010 17:01:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - Image Gallery Project (I)]]></title><description><![CDATA[
		<p>With a work project slowly drawing to a close I’m beginning to get a bit of “free” time in my evenings, and I’ve had a few complaints that with the rapid advancement of RavenDB my previous blog entries are now dated and unhelpful as anything other than a rough guide as to how RavenDB actually functions.</p>  <p>Let us rectify this.</p>  <p>Found on Github at the following location: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a> is a new project that is going to be written using ASP.NET MVC2 and RavenDB. Over the coming entries we’ll go through the features of RavenDB one by one, starting with the basics using the technology that has the lowest entry level, and then moving into more advanced topics whilst revisiting&nbsp; the older pieces of functionality to spruce them up with the knowledge that we’ve gained as we go through.</p>  <p><strong>What this will be</strong></p>  <p>This will be a project written for the sole purpose of demonstrating how to use RavenDB and how to write testable code against RavenDB – this will be demonstrated by utilising some basic TDD principles in order to drive the code surrounding the RavenDB infrastructure and usage.</p>  <p><strong>What this will not be (a disclaimer)</strong></p>  <p>Rather than clutter up the project with code wizardry I am not going to be practising TDD on peripheral code such as validators, controllers (<em>except where RavenDB is concerned</em>), model binders, file handling etc.&nbsp; I am not going to be talking about those things unless they directly or indirectly impact on the actual subject of RavenDB usage.</p>  <p>Anyway, the next entry in this series is about setting up the project and some gotchas that should be watched out for when doing so.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---image-gallery-project-i.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---image-gallery-project-i.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 27 Sep 2010 22:24:00 GMT</pubDate></item><item><title><![CDATA[AutoPoco 0.4 released - features features features]]></title><description><![CDATA[
		<p>What's that? I skipped a number?&nbsp;Actually I didn't, but 0.3 wasn't particularly major so&nbsp;making a blog entry seemed a bit redundant :)</p>
<p>What have I added? Glad you asked:</p>
<p><strong>Method Invocation</strong></p>
<p>During configuration, you can now set up data sources for parameters of methods,&nbsp;just pass in&nbsp;raw values or&nbsp;just call a method with no&nbsp;arguments.</p>
<p>It's all been done in a strongly-typed manner to fit in with the rest of AutoPoco.</p>
<pre class="brush: csharp;" title="code">                x.Include&lt;SimpleMethodClass&gt;()
                    .Invoke(c =&gt; c.SetSomething(
                        Use.Source&lt;String, RandomStringSource&gt;(5, 10),
                        Use.Source&lt;String, LastNameSource&gt;()))
                    .Invoke(c =&gt; c.DoSomething());</pre>
<p>Obviously this needs a brother to&nbsp;override this configuration at the&nbsp;time of&nbsp;object creation, and that looks something like this:</p>
<pre class="brush: csharp;" title="code">            IList&lt;SimpleMethodClass&gt; items = mSession.List&lt;SimpleMethodClass&gt;(100)
                    .Invoke(x =&gt; x.SetSomething("Something"))   
                .Get();</pre>
<p>And this will call SetSomething on all the created objects with the argument "Something" - this set of functionality is for those who don't have accessible setters on public properties but still wish to invoke them. The alternative was to start proxying around the objects and demanding that properties be virtual - but unless somebody says otherwise, I think that's a bit heavyweight for this sort of library.</p>
<p><strong>Improved Convention Support</strong></p>
<p>Conventions have been baked into AutoPoco from the start, but weren't fleshed out until this iteration, they can be used to match types of property/field, or match the names of properties/fields (or both) and apply rules to them without any knowledge of the specific type being configured.</p>
<p>This is useful for those with multiple projections of their domain, which follow naming conventions throughout the project.</p>
<pre class="brush: csharp;" title="code">    public class EmailAddressPropertyConvention : ITypePropertyConvention
    {
        public void Apply(ITypePropertyConventionContext context)
        {
            context.SetSource&lt;EmailAddressSource&gt;();
        }

        public void SpecifyRequirements(ITypeMemberConventionRequirements requirements)
        {
            requirements.Name(x =&gt; String.Compare(x, "EmailAddress", true) == 0);
            requirements.Type(x =&gt; x == typeof(String));
        }
    }</pre>
<p>This convention will match any property of type string called EmailAddress and apply the EmailAddressSource to it.</p>
<p><strong>Inheritance</strong></p>
<p>This was more complicated to deal with, and I expect to be writing a couple of quick blog entries detailing some of the gotchas encountered when writing the code for this, as googling didn't really provide the answers I was looking for (My first port of call for all problems)</p>
<p>The gist of it, is that if you have an interface with a property, and you define a rule for that property, then any class that implements that property will also inherit that rule (the same goes for base classes and their properties).</p>
<p>If a rule is defined for that specific derived class, then it will override the rule provided by the interface or base class. The only thing I haven't expliclty included in this is open generics, because they're a bit more tricky to come up with an elegant solution for.</p>
<p>Consider the following class structure:</p>
<pre class="brush: csharp;" title="code">    public interface ISimpleInterface
    {
        string InterfaceValue
        {
            get;
            set;
        }

        string OtherInterfaceValue
        {
            get;
            set;
        }
    }

    public class SimpleBaseClass : ISimpleInterface
    {
        public string BaseProperty
        {
            get;
            set;
        }

        public virtual string BaseVirtualProperty
        {
            get;
            set;
        }
    
        public string InterfaceValue
        {
	      set;
          get;
        }
        
        public string OtherInterfaceValue
        {
            get;
            set;
        }
    }

    public class SimpleDerivedClass : SimpleBaseClass, ISimpleInterface
    {
        public string Name
        {
            get;
            set;
        }

        public override string BaseVirtualProperty
        {
            get;
            set;
        }
    }</pre>
<p>With the following configuration</p>
<pre class="brush: csharp;" title="code">                x.Include&lt;ISimpleInterface&gt;()
                    .Setup(c =&gt; c.InterfaceValue).Value("InterfaceValue - ISimpleInterface")
                    .Setup(c=&gt;c.OtherInterfaceValue).Value("OtherInterfaceValue - ISimpleInterface");
                 x.Include&lt;SimpleBaseClass&gt;()
                    .Setup(c =&gt; c.BaseProperty).Value("BaseProperty - SimpleBaseClass")
                    .Setup(c =&gt; c.BaseVirtualProperty).Value("BaseVirtualProperty - SimpleBaseClass");
                x.Include&lt;SimpleDerivedClass&gt;()
                    .Setup(c =&gt; c.Name).Value("OtherTest")
                    .Setup(c =&gt; c.BaseVirtualProperty).Value("BaseVirtualProperty - SimpleDerivedClass")
                    .Setup(c =&gt; c.OtherInterfaceValue).Value("OtherInterfaceValue - SimpleDerivedClass");</pre>
<p class="brush: csharp;" title="code">Requesting a SimpleBaseClass, we get</p>
<ul>
    <li>
    <div class="brush: csharp;" title="code">BaseProperty: "BaseProperty - SimpleBaseClass"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">BaseVirtualProperty: "BaseVirtualProperty - SimpleBaseClass"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">InterfaceValue: "InterfaceValue - ISimpleInterface"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">OtherInterfaceValue: &nbsp;"OtherInterfaceValue - ISimpleInterface"</div>
    </li>
</ul>
<p class="brush: csharp;" title="code">Requesting a SimpleDerivedClass, we get</p>
<ul>
    <li>
    <div class="brush: csharp;" title="code">BaseProperty: "BaseProperty - SimpleBaseClass"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">BaseVirtualProperty: "BaseVirtualProperty - SimpleDerivedClass"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">InterfaceValue: "InterfaceValue - ISimpleInterface"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">OtherInterfaceValue: "OtherInterfaceValue - SimpleDerivedClass"</div>
    </li>
</ul>
<p class="brush: csharp;" title="code">It looks a bit complicated up front, but it makes sense if you think about it and that's what matters (the functionality is there if you need it, if you don't need it then you don't need to worry about it).</p>
<p class="brush: csharp;" title="code"><strong>More data sources</strong></p>
<p class="brush: csharp;" title="code">I was expecting to have to do these myself, along with a load of standard property/field conventions - but I had an e-mail from <span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span"><a href="http://www.codeplex.com/site/users/view/Birdchest">Khalid Abuhakme</a>&nbsp;letting me know he'd created a fork with some standard data sources in them.</span></span></p>
<p class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">I have pulled them through and now our list of data sources looks something like this:</span></span></p>
<ul>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">ColorSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">CountrySource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">CreditCardSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">DataOfBirthSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">EmailAddressSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">EnumerableSource&lt;T&gt; where T : IDataSource (Really cool addition Khalid!)</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">FirstNameSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">LastNameSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">LorumIpsumSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">RandomStringSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">UsStatesSource</span></span></div>
    </li>
</ul>
<p class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">We'll end up with a lot more of these for sure, and still need a more customisable aspect to some of the default ones, but if anybody else wants to contribute then feel free, as adding conventions and data sources is what will make AutoPoco really useful.</span></span></p>
	]]></description><link>http://codeofrob.com/entries/autopoco-0.4-released---features-features-features.html</link><guid isPermaLink="true">http://codeofrob.com/entries/autopoco-0.4-released---features-features-features.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 15 Apr 2010 07:19:00 GMT</pubDate></item><item><title><![CDATA[RavenDB & CouchDB - Basic Queries]]></title><description><![CDATA[
		<p><strong>Previous entries in the series</strong></p>
<ul>
    <li><a href="http://codeofrob.com/archive/2010/05/31/ravendb-whats-the-difference.aspx">RavenDB – What’s the difference</a></li>
</ul>
<p>Once you have a number of documents in the database, you soon want to do more complex operations than simply retrieving a list of them.</p>
<p>Consider therefore the following and rather over-used example document:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span>{</pre>
<pre><span class="lnum">   2:  </span>    title: <span class="str">"Another blog entry"</span>,</pre>
<pre class="alt"><span class="lnum">   3:  </span>    content: <span class="str">'blah blah blah'</span>,</pre>
<pre><span class="lnum">   4:  </span>    category: <span class="str">'code'</span>,</pre>
<pre class="alt"><span class="lnum">   5:  </span>    author: <span class="str">'robashton'</span></pre>
<pre><span class="lnum">   6:  </span>}</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<p>Our example query would be to get all of the documents from the database that were written by a particular author AND in a certain category.</p>
<p>Obviously querying all the blogs written by a single author, or all the blogs in a certain category would be fairly expected queries too.</p>
<p><strong>Indexes in RavenDB</strong></p>
<p>In order to perform any queries whatsoever in RavenDB, we first need to create an index.</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span>from doc <span class="kwrd">in</span> docs</pre>
<pre><span class="lnum">   2:  </span>select <span class="kwrd">new</span> {</pre>
<pre class="alt"><span class="lnum">   3:  </span>     doc.author,</pre>
<pre><span class="lnum">   4:  </span>     doc.category</pre>
<pre class="alt"><span class="lnum">   5:  </span>};</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<p>This is effectively a map function written as a LINQ query which returns a single value, an object that is a map of the values to be indexed.</p>
<p><em>Get all the documents by author and category</em></p>
<p>indexes/entriesByAuthorAndCategory?query=category:tech AND author:robashton</p>
<p><em>Get all the documents by category</em></p>
<p>indexes/entriesByAuthorAndCategory?query=category:tech</p>
<p><em>Get all the documents by author</em></p>
<p>indexes/entriesByAuthorAndCategory?query=author:robashton</p>
<p>Those queries will return a list of whole documents which match the queries passed in.</p>
<p><strong>Indexes in CouchDB</strong></p>
<p>
The same goes for CouchDB, only map functions in CouchDB have two outputs, and are written in JavaScript.</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">function</span>(doc) {</pre>
<pre><span class="lnum">   2:  </span>  emit([doc.category, doc.author], doc);</pre>
<pre class="alt"><span class="lnum">   3:  </span>}</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<p>  </p>
<p>Return values are specified by calling emit, and emit can be called more than once for each document, thus multiple keys can be created for each document with a single map function. The first parameter in Emit is the “key” to be searched on, and the second parameter is the data associated with that key (in this case, the document).</p>
<p><em>Get all the documents by author and category</em></p>
<p>blogs/_view/byAuthorAndCategory?startkey=["tech","robashton"]</p>
<p><em>Get all the documents by category</em></p>
<p>blogs/_view/byAuthorAndCategory?startkey=["tech"]</p>
<p><em>Get all the documents by author</em></p>
<p>Ah. This suddenly a bit more complicated. I’ve not actually managed to come to a convenient solution, as far as I can understand from the <a href="http://wiki.apache.org/couchdb/HTTP_view_API?action=show&amp;redirect=HttpViewApi">docs</a>, if you want to query <em>specific</em> fields within the key, you have to submit a POST request containing a JSON document with the fields you wish to search.</p>
<p>So it’s either that or create specific indexes for the queries you wish to perform. Performance-wise this is probably optimal but I don’t actually know for sure.</p>
<p><strong>Paging in RavenDB</strong></p>
<p>Paging in RavenDB is as simple as appending a start + pageSize to the query string</p>
<p>indexes/entriesByAuthorAndCategory?query=category:tech&amp;start=10&amp;pageSize=10</p>
<p>This will perform the query across the entire index and only retrieve the documents requested, this is an operation with trivial expense.</p>
<p><strong>Paging in CouchDB</strong></p>
<p>In CouchDb, a similar query string can be used, using “skip” and “count parameters, but these are considered expensive and instead to perform paging you should:</p>
<ul>
    <li>Get the first collection of documents, limiting by count(+1) </li>
    <li>Get the next collection of documents, starting at the last document in the first collection, limiting by count (+1) </li>
    <li>Etc </li>
</ul>
<p><strong>Summary</strong></p>
<p>This really is just a whistle-stop of some basic functionality in these two systems, although it does highlight some fairly major differences in basic functionality between them.</p>
<p>Next up some more advanced functionality will be covered, going over the differences between writing reduce functions in the two</p>
	]]></description><link>http://codeofrob.com/entries/ravendb-&amp;-couchdb---basic-queries.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb-&amp;-couchdb---basic-queries.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 02 Jun 2010 06:00:00 GMT</pubDate></item><item><title><![CDATA[DDD9 Announced]]></title><description><![CDATA[
		<p>Just a quick hello to point out that <a href="http://developerdeveloperdeveloper.com/ddd9/ProposedSessions.aspx">DDD9</a> has been announced for the 29th of January 2011 - and I've already submitted a couple of what I think are useful sessions for it.</p>

<p>I'm also due to talk at <a href="http://nhday.eu/en.aspx">NHDay</a> in Bologna on the 9th of October on the subject of model-first development on top of NHibernate/FluentNHibernate, and at Cheltenham <a href="http://grou.ps/digitalks/talks/5059459">DigiTalks</a> on the 5th of October, covering RavenDB in 15 minutes (by request, it'll be very toned down though).</p>

<p>Product at work is nearly done and I'll be returning to blog duties when that has come to a close</p>
	]]></description><link>http://codeofrob.com/entries/ddd9-announced.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ddd9-announced.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 20 Sep 2010 11:23:00 GMT</pubDate></item><item><title><![CDATA[NUnit 2.5.3 and [SetUICulture]]]></title><description><![CDATA[
		<p>I can't for the life of me get this to work, and [SetCulture] appears to be working fine - so I can only assume it's a bug.</p>
<p>I've posted to the mailing list and started off the process of working out whether it is a bug or not, but for now - I need to have my tests running&nbsp; in the right culture, without any side effects on the other tests once a test has been complete.</p>
<p>Here is my hack to do that:</p>
<pre class="brush: csharp;" title="code">   public class CultureContext : IDisposable
    {
        private CultureInfo mOldCulture;

        public CultureContext(String cultureName)
        {
            mOldCulture = System.Threading.Thread.CurrentThread.CurrentUICulture;
            System.Threading.Thread.CurrentThread.CurrentUICulture = new CultureInfo(cultureName);
        }

        public void Dispose()
        {
            System.Threading.Thread.CurrentThread.CurrentUICulture = mOldCulture;
        }
    }</pre>
<p>The usage is as follows, within a test do:</p>
<pre class="brush: csharp;" title="code">using (new CultureContext("fr-FR"))
{
	// Test code here
}</pre>
<p>This will ensure that your test runs with the ui culture of "fr-FR", before resetting it to whatever it was before the test began. Not pretty, but it'll do until I work out if it's user error or a bug preventing NUnit from doing what I want it to do!</p>
	]]></description><link>http://codeofrob.com/entries/nunit-2.5.3-and-[setuiculture].html</link><guid isPermaLink="true">http://codeofrob.com/entries/nunit-2.5.3-and-[setuiculture].html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 18 Dec 2009 13:28:00 GMT</pubDate></item><item><title><![CDATA[RavenDB-Image Gallery Project (II) - Setting Up]]></title><description><![CDATA[
		<p>As with all entries in this series, the up to date code&nbsp; and history can be found in Github at <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a></p>  <p><strong>Where do I get RavenDB?</strong></p>  <p>RavenDB can be downloaded from a number of places, you can download the stable binaries, the unstable binaries or go direct to Github and use whatever fork you find there.</p>  <p>I personally run off my own fork which is updated very frequently from Ayende’s code – as it means I can rapidly add any missing features and push them back or fix bugs when I find them.</p>  <p>For this project I’ll be doing just that, and the binaries found in the Image Gallery project will be from my fork found at <a href="http://github.com/robashton/Ravendb">http://github.com/robashton/Ravendb</a></p>  <p>This is because I’ll be utilising functionality that is on the bleeding edge of RavenDB, of course by the time most of you read this they’ll be in the released binaries, so we’ll move to those now.</p>  <p><strong>Released builds (Unstable)</strong></p>  <p>Next up on the stability list are the recent builds, which can be found on the Hibernating Rhinos site <a href="http://builds.hibernatingrhinos.com/builds/RavenDB-Unstable">http://builds.hibernatingrhinos.com/builds/RavenDB-Unstable</a>, this is probably safer than constantly pulling from Ayende’s fork and represent the latest changes that have made it through code review. </p>  <p><strong>Released builds (Commercial)</strong></p>  <p>At time of writing, these are about 20 builds behind the Unstable branch, and as such miss out on some of the functionality that can be enjoyed in the Unstable and code versions of RavenDB. Unless you are planning on releasing software in the next week or two, I don’t really advocate using this branch for development.</p>  <p><strong>Why unstable?</strong></p>  <p>RavenDB is changing constantly, breaking changes still happen, API changes still happen, functionality is being added constantly – I have a suite of tests for all my projects that utilise RavenDB and I test all of my interaction with RavenDB. </p>  <p>By updating regularly I ensure that the amount of work needed to fix any breaking changes is kept to a minimum, as opposed to waiting 30 builds and finding out that half of my entire test suite fails. </p>  <p>That’s not to say that Raven isn’t ready for production because I believe that the stable branch is indeed stable, but because I’m in development and I haven’t got imminent release to look forward to I’m happy to put up with a few bugs in order to get the latest and greatest functionality.</p>  <p><strong>The Project itself</strong></p>  <ul>   <li>I’ve made an MVC2 project in VS2010 and removed all the default garbage that gets provided with it, apart from the JavaScript files, the CSS and the master page. I’m starting from a blank slate and removing all the code because I know how much that offends people. </li>    <li>I’ve downloaded the following libraries: Moq, NUnit, StructureMap and shoved them in a folder called _Libs along with the RavenDB binaries. </li>    <li>Oh yes, I’ve got a basic StructureMapControllerFactory that I’ll be using to create controllers with dependencies injected (in case anybody asks later on) </li>    <li>I’ve got two additional projects (class libraries) which are named RavenGallery.Core and RavenGallery.Core.Tests </li>    <li>I’ve gone through the project settings and ensured their .NET profile is set to .NET Framework 4 </li> </ul>  <p>Here is my solution</p>  <p><a href="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBImageGalleryProjectIISettingUp_1512C/solution_2.png"><img style="background-image: none; border-right-width: 0px; margin: ;padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px;" title="solution" border="0" alt="solution" src="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBImageGalleryProjectIISettingUp_1512C/solution_thumb.png" width="301" height="548"></a></p>  <p>And this is what I meant by setting the .NET profile</p>  <p><a href="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBImageGalleryProjectIISettingUp_1512C/targetframework_2.png"><img style="background-image: none; border-right-width: 0px; margin: ;padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px;" title="targetframework" border="0" alt="targetframework" src="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBImageGalleryProjectIISettingUp_1512C/targetframework_thumb.png" width="715" height="226"></a></p>  <p>&nbsp;</p>  <p><strong>Which RavenDB Binaries to use?</strong></p>  <p>Once you’ve selected which binary drop to use, you have to make a decision as to which Raven.Client to use, and this is where I tell you why I made sure my Target Framework was set to 4</p>  <ul>   <li>Raven.Client.Lightweight.dll      <ul>       <li>This is for when you are using .NET Framework 4 Client Profile </li>        <li>This doesn’t require any of the other binaries (Lucene/etc) </li>        <li>This doesn’t allow you to host RavenDB within your application </li>        <li>This is therefore a pure client </li>     </ul>   </li>    <li>Raven.Client.3.5.dll      <ul>       <li>As the name suggests, this is for when you are still on the .NET 2.0 runtime (using the .NET 3.5 framework) </li>        <li>This doesn’t require any of the other binaries (Lucene/etc) </li>        <li>This doesn’t allow you to host RavenDB within your application </li>        <li>This is therefore a pure client for older versions of the .NET framework </li>     </ul>   </li>    <li>Raven.Client.Embedded.dll      <ul>       <li>This is the full, heavyweight client for .NET 4.0 (<strong>not client profile!)</strong> </li>        <li>This requires all of the other binaries (Lucene.NET, Esent, etc)&nbsp; - these must <strong>all</strong> be referenced! </li>        <li>This allows you to host RavenDB within your application </li>        <li>This is a mixed client + server </li>     </ul>   </li> </ul>  <p>As my choice of target framework will tell you, I have chosen to host RavenDB internally as part of the web application, and I will take the responsibility for starting up and shutting it down as part of the application lifecycle.</p>  <p>The .NET Framework 4 profile is important, as it is a common gotcha for people to link the wrong binaries and wonder why they are still getting reference errors.</p>  <p>That’s set-up covered, in the next entry I shall cover how we’ll be hosting RavenDB in the application and managing our sessions with it.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb-image-gallery-project-ii---setting-up.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb-image-gallery-project-ii---setting-up.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 28 Sep 2010 11:00:00 GMT</pubDate></item><item><title><![CDATA[Anatomy of a 48 hour HTML5-JS Game]]></title><description><![CDATA[<p>I participated in my second <a href="http://www.ludumdare.com/compo/">Ludum Dare</a> 48 hour game-building compo this weekend, and this was my fourth attempt at <a href="http://www.ludumdare.com/compo/ludum-dare-23/?action=preview&amp;uid=7112">building a game from scratch</a> in 48 hours in HTML5/JS.</p>

<p>Each time I have approached the problem in a slightly different way, but I'm beginning to get the process sussed (with a few caveats) so let's break down my latest attempt (<a href="http://www.ludumdare.com/compo/ludum-dare-23/?action=preview&amp;uid=7112">Web</a> | <a href="https://github.com/robashton/ld4823tw">Source</a>) and see how it is put together.</p>

<h2>Libraries + Frameworks</h2>

<p>I've tried a couple of approaches for this so far, one is to start with a set of 'base code' (written in advance either extracted from another project, or written especially for the 48 hour compo).</p>

<p>I've ended up settling for a halfway house, I have some libraries that I <em>really</em> like from JS/HTML development in general, and some libraries/components that I keep around for convenience.</p>

<p><strong>Third party</strong></p>

<p><em><a href="http://documentcloud.github.com/underscore/">Underscore</a></em> - this is a library containing a load of polyfills for doing common operations in JS (iteration, binding, etc) - my favourite method is probably _.extend, which I'll cover in a bit.</p>

<p><em><a href="http://jquery.org/">jQuery</a></em> - we all know what this is - to be honest, I use it for DOM selection and the most basic of manipulation only - as such it's a bit heavy-weight for what I need. Still - it's familiar to me and allows me to get started - can't say wrong with that.</p>

<p><strong>Hand-rolled components</strong></p>

<p><strong><a href="https://github.com/robashton/swallow">Swallow</a></strong> - Packaging up a directory as a JSON file and downloading it all-as-one might not be the most elegant/modern way of dealing with multiple assets but it at least allows an easy deterministic way of dealing with dependencies, and means that I forego a lot of the issues with playing Audio in browsers (creating a new audio file with a URL means the browser re-downloading the asset!). </p>

<p>Base64 encoding all the binary assets and getting on with life means not faffing around with them during the compo - which is a good thing.</p>

<pre><code>// Build script
swallow.build({
    in: 'assets',
    out: 'site/assets.json'
});

// Client code
GlobalResources.loadPackage('assets.json', function() {
    game.start();
});

GlobalResources.getImage('image.png');
GlobalResources.playSound('explosion');
</code></pre>

<p><strong><a href="https://github.com/robashton/camera">Camera</a></strong> - Separation of in-game coordinates from the pixels being displayed on screen is pretty important because otherwise we limit ourselves to a specific resolution and aspect ratio, and prevent our application from being run at different resolutions on different screens.</p>

<p>The principle of this tiny piece of code is that rather than drawing using 'screen coordinates', we draw using 'world coordinates' and haven't got to any of the transformations ourselves in expensive JS.</p>

<p>For example,</p>

<pre><code>context.fillRect(0, 0, 100, 100);
</code></pre>

<p>Would ordinarily fill a rectangle 100 pixels by 100 pixels at the top-left of the screen, but if we apply transforms to the underlying canvas as if we had a camera moving over it, using the following code</p>

<pre><code>camera.lookAt(50, 50);
camera.zoomTo(100);
camera.fieldOfView(Math.PI / 4);
</code></pre>

<p>Then the same fillRect code will be drawing the same rectangle  (roughly) in the middle of the screen. </p>

<p>The advantage of this code is that the same picture can be drawn whether the canvas is sized at 320x240, 640x480, 800x600 (and can even handle strange aspect ratios). In case of bad performance, the canvas size can be set to half the size of the actual display and upscaled automatically!</p>

<p><strong>Eventable</strong> - I've found that messaging is the best way to keep the ability to crank out features without littering the codebase with conditionals and irrelevant code, I have a basic set of behaviours in an object called "Eventable" that looks like</p>

<pre><code>on(event, callback, context)
onAny(callback, context)
off(event, callback, context)
offAny(callback, context)
</code></pre>

<p>I also have a basic <strong>Scene</strong> object, through which all entity events bubble up through for caretaker objects to deal with, consider the following scenario from my #LD23 game</p>

<ul>
<li>EnemyFactory decides to spawn an Asteroid</li>
<li><p>EnemyFactory hooks '<em>Destroyed</em>' event on Asteroid</p>

<pre><code>   asteroid.on('Destroyed', this.onAsteroidDestroyed, this);
</code></pre></li>
<li><p>Asteroid goes off and does its thing</p></li>
<li>Player blasts away Asteroid</li>
<li><p>Asteroid raises event like so:</p>

<pre><code>this.raise('Destroyed');
</code></pre></li>
<li><p>EnemyFactory removes the Asteroid from the scene</p></li>
<li>Also listening to events from the scene are
<ul>
<li>ExplosionCreation</li>
<li>ScoreKeeper</li>
<li>SoundCreation</li>
</ul></li>
</ul>

<p>They hooked the events from the scene when they were added to it like so</p>

<pre><code>scene.on('Destroyed', this.onEntityDestroyed, this);
</code></pre>

<p>And in their respective methods they get to do</p>

<pre><code>onEntityDestroyed: function(data, sender) {
    this.createExplosion(sender.x, sender.y);
}

onEntityDestroyed: function(data, sender) {
    this.increaseScore(sender.getPoints() * this.currentLevel);
}

onEntityDestroyed: function(data, sender) {
    this.playSound('explosion', sender.x, sender.y);
}
</code></pre>

<p>Having the ability to slap on extra functionality without creating masses of extension code meant that throwing in power-ups was a simple matter of creating something to listen to destruction events and add new entities to the scene to represent as power-ups.</p>

<p>Keeping the UI updated looks something like this:</p>

<pre><code>var Hud = function(scene) {
    scene.autoHook(this);
    this.score = $('#score');
    this.health = $('#health');
    this.energy = $('#energy');
};
Hud.prototype = {
    onScoreChanged: function(score) {
        this.score.text(score);
    },
    onHealthChanged: function(health, sender) {
        if(sender.id !== 'player') return;
        this.health.css('width', sender.percentageHealth() + '%');
    },
    onEnergyChanged: function(energy, sender) {
        if(sender.id !== 'player') return;
        this.energy.css('width', sender.percentageEnergy() + '%');
    }
}
</code></pre>

<p>Hmmm, tidy.</p>

<p>I choose not to publish this as a library, because this is something specific to the way I like to work and everybody is either using one that already exists or are capable of writing on themselves.</p>

<h2>Patterns and Practises</h2>

<p><strong>Working in a single file</strong></p>

<p>When working on my more long-term projects, I often use a dependency/module system like RequireJS to break up the project across multiple files (one-per-class type of thing)</p>

<p>When working on a 48 hour game jam, I find that just coding everything in a single file like a madman is really helpful providing I'm using a good text editor with the ability to search and jump around the document built in.</p>

<p><strong>Working with "Classes"</strong></p>

<p>I admit it, I'm a sucker for encapsulating state and behaviour into discrete little objects that I can create and throw around the place,</p>

<p>The thing is, because JS allows for duck-typing, this object flinging makes throwing things into a scene and performing operations on them pretty convenient.</p>

<p>For example, I have a scene object, which exposes the following methods, and at its most simplistic looks something like this:</p>

<pre><code>add: function(entity) {
    this.entities[entity.id] = entity;
},
remove: function(entity) {
    delete this.entities[entity.id];
}
tick: function() {
    this.eachEntity(this.entityTick);
},
entityTick: function(entity) {
    if(entity.tick) entity.tick();
},
draw: function(context) {
    this.eachEntity(this.entityDraw, context);
},
entityDraw: function(entity, context) {
    if(entity.draw) entity.draw();
}
</code></pre>

<p>Now, in my long-term projects, drawing/logic/etc are just components that are attached to the entities, and the scene is certainly not responsible for this stuff - but for this kind of rapid-work project having something really simplistic really aids in the development process.</p>

<p>The important things of note, is above - we only care that an entity has a field called 'id', we don't care where it got it from - and if that entity has a draw method, we'll use it and if the entity has a tick method, we'll use that too.</p>

<p>I don't bother trying to emulate classic inheritance, even in something as simplistic as this it's not desirable (and leads to more complexity). I do however make judicious use of underscore's 'extend' method.</p>

<pre><code>// Basic rendering functionality for a textured quad
var Quad = function() {
    // stuff
};

Quad.prototype = {
    draw: function(context) {}; // stuff
}

// A basic powerup which floats towards the player
var Powerup = function(image, x, y) {
    Quad.call(this, image, x, y);
    Eventable.call(this);
    this.id = IdGenerator.Next("powerup");
};
Powerup.prototype = {
    tick: function() {
        this.moveTowardsPlayer();
    },
    notifyCollision: function(other) {
        if(other.isPlayer())
            this.bestow();
    }
};
_.extend(Powerup.prototype, Quad.prototype, Eventable.prototype);

// An actual powerup
var DestructionFieldPickup = function(x, y) {
    Powerup.call(this, "destructionfield.png", x, y );

};
DestructionFieldPickup.prototype = {
    bestow: function() {
        this.scene.addEntity(new DestructionField(this.x, this.y));
    }
}
_.extend(DestructionFieldPickup.prototype, Powerup.prototype);
</code></pre>

<p>I'd usually shy away from such hierarchies, but in a 48 hour jam they're a really easy way of throwing functionality in with gay abandon (remember, I don't need to maintain this code, I don't need to remember that the Pickup somehow magically has an 'x' value 2 months later, I don't need to remember what fields have already been declared so not to overwrite them etc).</p>

<p>Working with such lightweight base components and with such explicit objects means that providing my codebase remains below 2000 lines of code (about the maximum deliverable for a solo 48 hour jam if I'm honest), I can keep it all in my head and not fuss around too much.</p>

<p>At least they're relatively small and (mostly) hide their data, and hold onto the functionality they expose in neat, readable blobs.</p>

<h2>Assets</h2>

<p>I'm not an artist, and I'm not a sound engineer either, I have found however that with Inkscape it is possible to create relatively non-sucky art with the combination of geometric shapes.</p>

<p><img src="../img/ship.png" alt="" /></p>

<p>Including these is simple, as they're bundled up with Swallow - however, sounds are more tricky.</p>

<p>Sound on the internet SUCKS.</p>

<p><strong>SUCKS. SUCKS SUCKS.</strong></p>

<p><em>breath</em>, basically you'll be fine if you use a combination of <strong>ogg vorbis</strong> and <strong>MP3</strong>, and don't worry about the older browsers.</p>

<p>In a little game like this, I don't worry about the cost and simply download both files all of the time (in swallow), I guess I could package them up individually and do a check on start-up, and perhaps a little library is warranted (either one on the internet or hand-rolled)</p>

<p>The code for playing a sound goes as follows therefore:</p>

<pre><code>playSound: function(path) {
  var player = new Audio();
  if(player.canPlayType("audio/mpeg")) {
    player.src = "data:audio/mpeg;base64," + this.findData(path + '.mp3');
  } else {
    player.src = "data:audio/ogg;base64," + this.findData(path + '.ogg');
  }
  player.volume = 0.5;
  player.play();
}
</code></pre>

<p>This will work okay, as the data is cached (so no faffing with re-load pauses).</p>

<h2>In Summary</h2>

<p>In a 48 hour game jam, I've found that productivity is <em>much</em> more important than the long-term maintainability of the code, but this does not mean abandoning some sensible software practises, as short term maintainability is still important (keeping 2000 lines of procedural spaghetti code in your head isn't quite as easy...).</p>

<p>Any questions? The code is over <a href="https://github.com/robashton/ld4823tw/blob/master/site/game.js">here</a>, and the above should help with the navigation a bit...</p>
]]></description><link>http://codeofrob.com/entries/anatomy-of-a-48-hour-html5-js-game.html</link><guid isPermaLink="true">http://codeofrob.com/entries/anatomy-of-a-48-hour-html5-js-game.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 23 Apr 2012 12:34:00 GMT</pubDate></item></channel></rss>