<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><image><url>http://codeofrob.com/img/cover.jpg</url><title>Rob Ashton&apos;s blog</title><link>http://codeofrob.com</link></image><generator>NodeJS RSS Module</generator><lastBuildDate>Sat, 23 Mar 2013 15:43:44 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><item><title><![CDATA[A note on working hours and working at home]]></title><description><![CDATA[<p>Yes yes yes, that whole <a href="http://www.huffingtonpost.com/2013/02/23/yahoo-working-remote_n_2750698.html">Yahoo thing</a>, whatever - there is more context to that story than "Banning working at home", although whether that is a solution to the problems is certainly up for debate.</p>

<p>I don't care about that, but it's what prompted Hadi to write <a href="http://hadihariri.com/2013/03/16/freedom-to-work/">this lovely article</a></p>

<p>I've been thinking about this a lot since <a href="/entries/i-am-not-looking-for-a-job.html">quitting my job</a> last December, as I've been travelling around and working for various people I've also found myself being given a lot of freedom as to how I apply my hours.</p>

<p>I've come to realise a certain "maturity" when it comes to my working hours, I passionately disagree with <a href="http://zachholman.com/posts/how-github-works-hours/">Zach Holman</a> where he describes being addicted to work and the line between work/life being heavily blurred as being a <em>good thing</em>(tm). That's total bullshit, and while you might have caught me doing that when I first started my career you will not find me doing it now.</p>

<p>Why not? Because there are <em>so many cool things to do</em> that aren't work - that's why.</p>

<p><strong>How I've found myself working when given freedom</strong></p>

<p>I've been rolling in at around 10am and then leaving once fatigue sets in and I feel that I'm no longer being <em>effective</em>. That can be any time between 4pm and 7pm on most days.</p>

<p>Yikes- that means on some days I've been working only 5 hours if you factor in lunch!!</p>

<p>However:</p>

<ul>
<li>Those five hours have been me dedicated to my task</li>
<li>Those five hours have been the most awake five hours of my working day</li>
<li>Coming in at 10am (ish) simply means I've woken up naturally rather than forced myself up at 7am</li>
<li>Leaving when I'm fatigued means I dont burn myself out so I can maintain a productive pace throughout this</li>
<li>I found myself doing a few hours on days off, presumable because I wasn't burned out from a week of pushing too hard</li>
</ul>

<p>It's hard to imagine that any of my clients these past four months would have any difficulty in <a href="http://ayende.com/blog/161185/robs-ravendb-sprint">describing</a> my output as "effective" or "productive"!</p>

<p><strong>Working together</strong></p>

<p>That said, core hours <em>are</em> useful, face time is useful, conversations are useful, communication is vital.</p>

<p>This is one of those matters in which good tooling <em>can</em> seriously help, enabling a combination of async communication such as Campfire, Flowdock, e-mail or IRC is vital in these circumstances. If your employees are working at home <em>and</em> they're not pulling their weight - then pulling them in isn't going to solve that problem. </p>

<p>Creating an environment in which your employees feel valued and free to apply their efforts how they see fit is not wasted effort, and I wish more companies would do that.</p>

<p>When I decide what I'm doing with regards to work (when summer hits), I find it hard to believe I'll be working at any company who is enforcing 9-5, or have some rigidly described "flexi-time" as part of their contract in an effort to seem cool. </p>

<p>I've had it with that sort of thing, this I know for sure. I love being an effective member of a team too much to put myself in a position where I feel obliged to sit in a seat for an no apparent reason ever again. (Future employers take note please)</p>]]></description><link>http://codeofrob.com/entries/a-note-on-working-hours-and-working-at-home.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-note-on-working-hours-and-working-at-home.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 22 Mar 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Why I stopped using AMD]]></title><description><![CDATA[<p>I've been asked a few times why I've stopped using AMD as I move around and folk see my use of Browserify, here-in I try to write down my thoughts on why AMD doesn't make any sense to me any more.</p>

<hr />

<p>When I wrote a blog entry <a href="http://codebetter.com/robashton/2012/09/03/keeping-js-sane/">about 9 months ago</a>, I made the statement:</p>

<p><blockquote>
    The synchronous manner in which files are included in CommonJS-ish systems doesnâ€™t lend itself to the web very well.
  </blockquote></p>

<p>I was wrong. I changed my mind, and as I've said before I am now a <a href="/entries/lots-of-small-things.html">Browserify Convert</a>.</p>

<p>What I didn't explain was what turned me off <a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD</a> and in particular, <a href="http://requirejs.org/">RequireJS</a>.</p>

<p><strong>The list of things I want my module loader to help me with</strong></p>

<ul>
<li>I don't want to write all my code in a single file</li>
<li>I want to write my code across many files</li>
<li>I want to write my code across many modules</li>
<li>I want to be able to easily debug these once in the browser (it's unusual I need to debug, but when I do...)</li>
<li>I want the time between editing a file and seeing feedback in the application to be -- >&lt; -- this big</li>
</ul>

<p>In other words, yes - I do want the moon on a stick.</p>

<p><strong>RequireJS</strong></p>

<p>Seemed to help with these things, I didn't use the hideous ceremony-ridden version of AMD that looks like somebody vomitted in my Javascripts (that alone would have been enough to put me off) </p>

<p><em>The ceremonial way</em></p>

<pre><code>define([
  '../foo', 
  './lib/bar', 
  'boo'], 
  function(foo, bar, boo) {

})
</code></pre>

<p><em>The less-ceremony way</em></p>

<pre><code>define(function(require) {
  var foo = require('../foo')
    , bar = require('./lib/bar')
    , boo = require('boo')
})
</code></pre>

<p>So it was tolerable for a while because I didn't have to, however I would then run into the following road-blocks:</p>

<ul>
<li>What about Library X, does it support AMD?</li>
<li>If it doesn't support AMD, I have to add a shim? Should I patch the library?</li>
<li>What if it supports AMD, I'll want to load it from a libs directory</li>
<li>Where is the root of my application? What about sharing code client/server</li>
<li>What if I want to use CoffeeScript (or more recently for me, OMeta)</li>
</ul>

<p><strong>For every question, RequireJS had an answer</strong></p>

<p>And AMD's answer for <em>nearly every one of them</em> is to <em>add some configuration directives</em> or <em>write a r.js plug-in</em></p>

<p>And this is what put me off.</p>

<p>In no time at all, every project would have a configuration file many lines long of obscure directives (and I mean obscure directives, have you <a href="http://requirejs.org/docs/api.html">read the documentation?</a> - this is not intuitive and requires a hella lot of investment if we are to make effective use of it.</p>

<p>Then we'd want to write tests against the code, and we'd have to either attempt to re-use this configuration or duplicate it over into our tests directory. 
Then we'd run into problems with that configuration, and waste hours trying to work out a compromise to keep RequireJS happy.</p>

<p><strong>Most of those questions were the wrong question</strong></p>

<p>First off, using <a href="/entries/stop-using-relative-paths-in-your-javascripts.html">actual modules</a> has massive advantages over relative paths anyway, and while the build step of RequireJS will support these, this isn't going to work if we're using the A of AMD in development.</p>

<p>Secondly, if we want to compile our .coffee to JS, we should be using the coffeescript compiler to do this. If we want to compile our Typescript to JS likewise, if we want to import static files for templates then this should be part of our build process.</p>

<p>Trying to do everything as a long sequence of plug-ins meant to support the A/MD actually makes things a lot <em>slower</em> in my experience, because we're not trying to do it only when specific files change but instead trying to do it as part of the request pipeline (unless we go to lengths to work around the r.js plug-in system)</p>

<p><strong>The future of JS modules is not async anyway</strong></p>

<p>If yo look at the specifications and where they're going, (while last I checked they weren't perfect yet), the module system that is coming for JS isn't going to be asynchronous - and this is because our program <em>can't run until it's loaded anyway</em> - it actually makes little sense to add the overhead of asynchronous management to this process.</p>

<p>Building up an entire codebase around tooling that isn't compatible with how the future-web is going to work doesn't make an awful lot of sense, building up an entire tool-chain around this tooling makes even less sense.</p>

<p><strong>I switched to Browserify</strong></p>

<p>As I've said, I'm not particularly sold on using node_modules for  client-side code, but the module system in node <em>does</em> work, and <em>does</em> encourage us to package things up in a neat re-usable manner (I'm not sold on component.js yet either).</p>

<p>However, the code we write doesn't care what module system is being used if we're just doing CommonJS - it just knows that they come from <em>somewhere</em>. The tools we use to convert CS into JS don't care that we're using Browserify to package the end-result. The tools we use to embed templates in the downloadables don't care that we're using Browserify to do this. </p>

<p>In a nut-shell, Browserify is allowing me to hedge my bets by not coupling my workflow too closely to it. It doesn't come with pages of obsuse documentation and every time I pump out a new module into my little eco-system I am ever so thankful for this.</p>

<p>It has enabled me to be liberal with my module creation and not care how people are going to actually consume these packages (apart from 'through npm' somehow), and I've not had to debug or diagnose issues with it in the whole time I've been using it.</p>

<p>Let's look at the list of things I want:</p>

<ul>
<li>I don't want to write all my code in a single file</li>
<li>I want to write my code across many files</li>
<li>I want to write my code across many modules</li>
<li>I want to be able to easily debug these once in the browser (it's unusual I need to debug, but when I do...)</li>
<li>I want the time between editing a file and seeing feedback in the application to be -- >&lt; -- this big</li>
</ul>

<p>I'm able to do all of these - yes I need a build step now, but you know what? We need a build-step anyway if we're going to take advantage of the module system properly - even in RequireJS so this isn't a big deal. </p>

<p>We get debugging support through source maps (and this even tells us which module we're debugging) and as I said yesterday, I no longer really <a href="/entries/stop-using-relative-paths-in-your-javascripts.html">use relative paths</a> so I'm a great deal happier about my JS.</p>

<p>Happiness and productivity, good reasons for doing most things really.</p>]]></description><link>http://codeofrob.com/entries/why-i-stopped-using-amd.html</link><guid isPermaLink="true">http://codeofrob.com/entries/why-i-stopped-using-amd.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 21 Mar 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Stop using relative paths in your JavaScripts]]></title><description><![CDATA[<p>I saw a post to the NodeJS mailing list the other day which went along the lines of </p>

<p><blockquote>
    I've created a simple prototype tool for re-factoring and re-organization of projects which heavily use require("./relativePath") .
  </blockquote></p>

<p>Without wishing to put the chap off from releasing OSS efforts (because this is nearly <em>always</em> an excellent idea) I responded with a sentence explaining why I thought this kind of thing was a bad idea. </p>

<p>I promised myself I'd write a blog entry with some loose thoughts in it too.</p>

<p>This is the classic example of a "tooling oriented fix" for a "problem of our own creation", after primarily making my living in the enterprise space where this sort of thing is rife I'm quite sensitive to such things when they arise when there is a better solution available.</p>

<p><em>If using relative paths in your JS project is painful, stop using relative paths in your JS projects</em></p>

<p><strong>Relative paths require cognitive effort</strong></p>

<p>When opening a project for the first time and encountering a large folder structure, I don't know where to begin. </p>

<p>Even when I'm told where to go, I then have to trawl through the dependencies manually to find the code I want to change. When I want to write tests, it's hard to work out where the files are that I want/need to bring in. </p>

<p>Compare this to a project which is comprised of modules, where each has a package.json which clearly describes where its git repo is, what its purpose is - and more importantly its dependencies. This is easy to understand and traverse and requires minimum new understanding.</p>

<p><strong>Relative paths lead to brittle coupling decisions</strong></p>

<p>If you're changing that code file, how do you know what is going to be impacted by that change? You don't - and this is why we get badly researched articles like <a href="http://techcrunch.com/2013/03/15/the-future-of-javascript/">this one</a> written about how hard JS is to maintain.</p>

<p>Better to make these dependencies explicit, and version them seperately so that upgrading to new versions of these dependencies is a conscious decision. Better still, applying <a href="http://semver.org/">a versioning strategy</a> so that breaking changes become obvious will make life much easier.</p>

<p><strong>Relative paths make tests harder to write</strong></p>

<pre><code>var sut = require('../src/company/lib/server/helpers/util.js')
</code></pre>

<p>Having a test suite that looks like the above over and over again is monstrous, you'll find yourself copying and pasting relative paths all over the suite and that'll in turn make you un-willing to re-factor or move things around for fear of breaking all the tests.</p>

<p>Compare this to instead a module-based approach where the tests we write for a module are simply covering that module. The effort required when decide to move things around is much smaller and we're not having to be dependenent on the organisation of files on your spinny disk or solid state storage.</p>

<p><strong>Relative paths are indicative of modules wanting to get out</strong></p>

<p>Take a look at your relative paths, look at commonly accessed files and consider that perhaps there is a module. Can you describe to me what that shared file does? What its purpose is? If so - you've passed the module test -get it in there.</p>

<p>If you can't tell me what that shared file does, then why does it exist? Is it just a "bag of stuff"? Don't create "bags of stuff", create "modules" with clearly defined purpose so the rest of us can have a clue of what is going on.</p>

<p><strong>So please, stop</strong></p>

<p>If you're not using some sort of package system to help you with your JavaScripts, then please start doing so. Preferably use NPM because it is one of the best designed package managers out there, but feel free to use Bower or something like that too, just stop presenting me with large codebases with piles of JS in them, it's costing you money to hire me and you don't want that money to be spent with me trying to work out how your folder structure works.</p>]]></description><link>http://codeofrob.com/entries/stop-using-relative-paths-in-your-javascripts.html</link><guid isPermaLink="true">http://codeofrob.com/entries/stop-using-relative-paths-in-your-javascripts.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 20 Mar 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[This week, let's create a start-up - Day 5]]></title><description><![CDATA[<p><strong>This post was written on Friday</strong></p>

<p>Final day of "<a href="entries/this-week,-lets-create-a-start-up.html">Build a start-up in a week</a>", how did we do?</p>

<p>Well, we deployed all assets to Amazon and ported across Sam's first customer from his original single-tenant system and everything works as expected. This work included lots of tidy up and "making nice jobs", very little faffing :)</p>

<ul>
<li>Sticking jPlayer into an iFrame so Sam could skin it </li>
<li>Write a migration script to take data from the original system and create an org for it in the new system</li>
<li>Setting up autoplay from the home page (so pressing play on a sermon would re-direct to the sermon page and play the sermon via jPlayer)</li>
<li>Fulltext search functionality on both the public site and the admin site through sermons</li>
<li>Adding the series info on the sermon viewing page</li>
<li>Styling</li>
</ul>

<p>Not very exciting, but all very trivial (even full text search)</p>

<p><em>Migration script</em></p>

<p>This just loaded the original data into memory as a string, de-serialized it into the old data types, copied it across into new data types, re-wrote ids across references and then called SaveChanges.</p>

<p>Didn't even bother using any of the bulk support in RavenDB as the amount of data was trivial, the dumb solution is sometimes the best- <em>next</em></p>

<p><em>Full text search</em></p>

<p>YAY RAVENDB</p>

<pre><code>    public class SermonSearchIndex : AbstractIndexCreationTask&lt;Sermon&gt;
    {
        public SermonSearchIndex()
        {
            Map = docs =&gt; from doc in docs
                          select new
                              {
                                  doc.OrganisationId,
                                  doc.ServiceType,
                                  doc.Title,
                                  doc.SpeakerName,
                                  doc.BibleReference,
                                  doc.SermonDate,
                                  doc.IsPublished
                              };

            Index(x =&gt; x.ServiceType, FieldIndexing.Analyzed);
            Index(x =&gt; x.Title, FieldIndexing.Analyzed);
            Index(x =&gt; x.SpeakerName, FieldIndexing.Analyzed);
            Index(x =&gt; x.BibleReference, FieldIndexing.Analyzed);

        }
    }
}


if (!string.IsNullOrEmpty(input.Search))
{
    query = query.Where(x =&gt; x.Title == input.Search || x.SpeakerName == input.Search || x.BibleReference == input.Search || x.ServiceType == input.Search);
}
</code></pre>

<p>Can't argue with how easy that was, and it still all works with that original paging stuff I wrote on the first day.</p>

<p><em>Adding the series info for a sermon</em></p>

<pre><code>var sermon = session.Load&lt;Sermon&gt;(id)
// if null etc
var series = session.Load&lt;Series&gt;(sermon.SeriesId)
</code></pre>

<p>Remember that ISecureDocumentSession <a href="/entries/this-week,-lets-create-a-start-up---day-4.html">I wrote yesterday</a>? That made the Include stuff hard to cater for on a Load, so I just do two load calls instead - in a more evolved system we'd have to do this better somehow because it isn't going to scale across all the other usages that IDocumentSession can give us.</p>

<p>Instead I'd look at hooking into RavenDB properly to do this security (either using its server-side security bundle, or adding appropriate extension points for this sort of filtering job on the client)</p>

<p>For this sort of thing though, it's two remote calls rather than one on a fairly low traffic system so it should be okay for now.</p>

<p><em>Deploying</em></p>

<p>Took 10 minutes to get onto Amazon thanks to Sam's efforts earlier in the week, and 5 minutes to replace the content on the old system with the script tag to import data from the new Truthvine system. (That's what the customer would have to do to use it)</p>

<p>If that's not easy I don't know what is. </p>

<p><em>Summary</em></p>

<p>ASP.NET MVC is surprisingly tolerable if you leave your opinions and a bit of brain-matter at the door on your way in, certainly it's pretty fine at throwing together a quick cruddy application on top of something simple like RavenDB.  Oh, and Razor is a thing of beauty - well done Microsoft for getting at least one thing right this past few years (Aww, just kidding, you know I love you really)</p>

<p>Mission accomplished and nothing in the solution is messy at all thanks to the no-crap atttitude of throwing things together that work in the simplest way possible.</p>

<p>I wish Sam luck on his start-up adventure and hope he finds enough clients to make the effort worthwhile, he's got a good project on his hands and I hope I've given him the boost he needed to get going.</p>]]></description><link>http://codeofrob.com/entries/this-week,-lets-create-a-start-up---day-5.html</link><guid isPermaLink="true">http://codeofrob.com/entries/this-week,-lets-create-a-start-up---day-5.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 19 Mar 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[This week, let's create a start-up - Day 4]]></title><description><![CDATA[<p><strong>This post was written on Thursday</strong></p>

<p>It's day 4 out of 5 and <a href="/entries/this-week,-lets-create-a-start-up---day-3.html">we pretty much have an end-to-end MVP</a> sorted out, (and a genuine surprise for me given the platform chosen!).</p>

<p>Today we decided we'd concentrate on some of the more fiddly aspects of the job, namely:</p>

<ul>
<li>Getting the workflow nailed for the desktop client</li>
<li>Adding per-customer partitioning to the system</li>
<li>Adding a HTML5 audio player to the public-facing system</li>
</ul>

<p><em>The desktop client</em></p>

<p>Authentication proved to be a stumbling block, we're using forms auth across the site which is pretty unfriendly. I was pretty against creating a whole set of new endpoints just for a desktop client when we had perfectly good forms available for it already but I also didn't want to waste ages faffing with custom auth.</p>

<p>We had a look at creating a separate deployment for the desktop services using WebAPI but that would have meant doing a load of the infra work already achieved for ASP.NET MVC in WebAPI (yeah, they're kinda united and divided at hte same time). This would have been faffing, so we looked at...</p>

<p>Hosting WebAPI inside the ASP.NET MVC system and going for both Basic Auth and Forms Auth, we found a project on Github which federated these two with some custom providers - but that looked like it was going to be a rabbit hole too - and I'm against faffing so we looked at...</p>

<p>The original idea of using the original forms, and issuing tokens to the desktop client ala <a href="http://last.fm">last.fm</a>, this only took 20 minutes or so and proved to be the sane choice for rapid <em>moving on</em></p>

<p><em>Per customer partitioning</em></p>

<p>We actually already had a conversation about this, do we do database-per-client or just field-on-the-document, this is a classic debate and it's not much different in the document database world.</p>

<p>We decided that database-per-client would have been a nightmare faff of session management (shared database as well) - not to mention fun-times if it came to a clouded instance of Raven so lumped our bets in with the database-field.</p>

<p>We looked at hooking the events exposed by the RavenDB client to add the field check to all queries, but unless we wanted to manipulate the final string query this was a dead end (and it didn't seem like there was an easy way to hook the load/save process either). </p>

<p>This is either an omission on our parts, or RavenDB doesn't have those APIs yet, I really want those APIs, so I might add those APIs later, moving on however because we haven't got time for that...</p>

<p>I'm not particularly proud of what we did next, but it worked, everywhere the system asked for IDocumentSession, we changed it to ISecureDocumentSession and exposed the 5 methods on Session that we're actually using </p>

<pre><code>- Load&lt;Type&gt;(string id)
- Load&lt;Type&gt;(int id)
- Load&lt;Type&gt;(string[] ids)
- Query&lt;Type&gt;(string id)
- Store(Object doc)
</code></pre>

<p>In each of these we check for typeof T === ISecured, and apply a check for the OrganisationId of the document.</p>

<p>This took all of 5 minutes, and was an effective use of time, perhaps to be re-visited in the future if it doesn't pan out.</p>

<p><em>Complicated logic</em></p>

<p>However, we now have quite a lot of complicated behaviour around </p>

<ul>
<li>What organisations does the user have permission over</li>
<li>What organisation is the user currently administering</li>
<li>What organisation is being requested by the public facing system</li>
<li>What organisation is being pushed to from the desktop client</li>
<li>etc</li>
</ul>

<p>Most of this logic exists in the infrastructure, and it needs pulling out and unit testing separately - just as a way of documenting the different functionalities exposed by these varients as changes are going to be very time consuing and error-prone otherwise.</p>

<p>This is an example of what <a href="/entries/uncle-bobs-viewpoint-considered-harmful.html">I was talking about in my testing post</a> about diving in when things became too hard to juggle.</p>

<p><em>The HTML5 Audio player</em></p>

<p>"This'll be easy", I said, "We'll just download a widget" I said. We plumped for <a href="http://www.jplayer.org/">jPlayer</a>, which has a few dependencies including jQuery - so it'll have to be hosted inside an iframe so as not to annoy the site we're embedding the public data in.</p>

<p>It wasn't that easy though, first off - our data is in S3, and our public site is on somesubdomain.truthvine.com, cross site calls aren't really allowed...</p>

<p>Actually, they are - turns out that S3 has CORS support these days and on enabling that I was able to hear My Bloody Valentine blaring out of my speakers when visiting the player page in my Chromium install.</p>

<p>The same went for our IE10 instance and our IE9 instance but IE8...? Nope.</p>

<p>After faffing around trying to put the static files on S3 and going to-and-fro a tad, it turned out we'd just mis-typed the path to the SWF file (which will handle CORS for us in crappy browsers) and now we have a cross-browser and cross-platform audio player on the site.</p>

<p>This is the classic example of where faffing costs time, and what I was trying to avoid throughout the day with the other decisions we had.</p>

<p>Trying to build quick, and practising building quick gives you instincts on avoiding these and I'm glad that with the other challenges so far we've managed to avoid faffing. </p>

<p>I guess browser compatability is always gonna be one of those things, but it only took an hour or so and leaving with all of the above achieved in a single day made us feel pretty good :)</p>

<p>Tomorrow time for some more features before I head back off to London and have a couple of days rest before heading to Greece for another coding adventure...</p>]]></description><link>http://codeofrob.com/entries/this-week,-lets-create-a-start-up---day-4.html</link><guid isPermaLink="true">http://codeofrob.com/entries/this-week,-lets-create-a-start-up---day-4.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 18 Mar 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[This week, let's create a start-up - Day 3]]></title><description><![CDATA[<p><strong>This post was written on Wednesday</strong></p>

<p>Now we have the <a href="/entries/this-week,-lets-create-a-start-up---day-1.html">Admin functionality</a> and the <a href="/entries/this-week,-lets-create-a-start-up---day-2.html">Public functionality</a> spiked properly into, it's time to look at file uploads properly.</p>

<p>Sam has a tool which will (client-side) be used to process audio files for upload in a very simple and stripped down manner (built specifically for his target demographic) - I quite like that.</p>

<p>I also have admin forms for this task and this is where our first bit of feature-confusion happens.</p>

<p><em>Rob: Okay, so you have audio files attached to sermons, I've implemented that as a list of value types with a URI and display name</em></p>

<p>Sam: "We probably want to have specific buckets for "High quality audio", "Low quality audio" and "Sermon notes"</p>

<p><em>Rob: Wait what? Sermon notes, we can upload arbitrary files?</em></p>

<p>Sam: "Not arbitrary, we have two types of audio file and often a PDF for the sermon notes"</p>

<p><em>Rob: Okay, seems like these are going to be explicit UI concepts so I'll bake that into the actual domain</em></p>

<p>Sam: "Yeah, that'll work... oh except sometimes they upload the entire sermon as well as pieces from the sermon"</p>

<p><em>Rob: So we have explicit files to be uploaded and arbitrary files, I don't mind handling that, although the UI could be complicated</em></p>

<p>Sam: "Hmm, I really want them to be told what to upload as that's user friendly, but I also want the flexibility of anything"</p>

<p>There was also the matter of workflow and how to expose this functionality to the uploading client he was building.</p>

<p>This was a bit of an ongoing conversation, and over the day I actually tried a few workflows out to see what would be easier, and we settled for being able to upload any files at all, but the server would work out what the files were and categorise them when displaying them to either the admin or the public. (Iterating has the advantage of fast feedback)</p>

<p>As for the workflow, I decided I'd use plain old HTML forms with re-directs and links for workflow, done in such a manner that his client can use the same API as the user does through the browser. I can't quite do it with the routes I'd want because I couldn't get ASP.NET MVC to play ball without a bit of faffing around- and I haven't got time to do that. The concepts are there and if we want to be purists later we can change the server without risk of the client breaking so there's that.</p>

<p>With regards to S3, I was surprised how easy this was, I pulled the Amazon SDK NuGet package, and in less than 10 minutes had files being sent to S3, using the Task libraries to manage multiple uploads at the same time. +1 point to the .NET eco-system at this point - definitely better than it used to be.</p>

<p>My experience with ASP.NET MVC is even happier today, making peace with it seems to be paying off, my most pleasing find today was the support for arrays:</p>

<pre><code>for(var i = 0; i &lt; Model.Items.Length; i++ ) {
  Html.EditorFor(x=&gt; x.Items[i].Title)
}
</code></pre>

<p>That made me a happy person. (I last used MVC to build a full product in the days of MVC1 and this was not available)</p>

<p>I spent a bit of time making all the workflows consistent across the admin site and the public site, and polishing the styling and data being displayed across all the pages so I could "mark those features as being done" (After using them a bit and getting feedback they weren't going to change substantially so it was worth investing that time now so I didn't have to later).</p>

<p>We also get everything up onto Amazon so it worked, and verified all the admin functionality and public functionality existed in the way desired.</p>

<p>So that's that, in three days we have built a working product and gotten it deployed into the cloud - and on top of the .NET framework too, which is probably my biggest surprise.</p>

<p>The next two days are about adding data partitions per church, getting the desktop client to use the API properly and adding search/navigation functionality for the viewing public and hopefully even some profile pages for the different preachers along with their sermons. I'll probably nail some pegs into the ground and write some stabilising tests around this stuff so Sam can carry on moving forwards without me keeping the code in a reasonable shape. We'll see how much time we have.</p>

<p>I'm pumped - I <em>love</em> building stuff.</p>]]></description><link>http://codeofrob.com/entries/this-week,-lets-create-a-start-up---day-3.html</link><guid isPermaLink="true">http://codeofrob.com/entries/this-week,-lets-create-a-start-up---day-3.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 15 Mar 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[This week, let's create a start-up - Day 2]]></title><description><![CDATA[<p><strong>This post was written on Tuesday</strong></p>

<p>Yesterday <a href="/entries/this-week,-lets-create-a-start-up---day-1.html">I pretty much put together the admin side of the project</a>, and today I decided to focus on the other side of the project - dumping content into a third party site as if it was on the site itelf.</p>

<p>Carrying on from yesterday, this was actually pretty simple</p>

<ul>
<li>Create a JS file for inclusion on the third party site</li>
<li>When imported, it looks for !#/this-stuff-after-the-hash-bang</li>
<li>It then loads the appropriate content from the main truthvine site based on the path after the hashbang</li>
</ul>

<p>We have to use a hashbang because we can't rely on the site we're being embedded on to be able to do server-side redirects but we want back-forward buttons to work.</p>

<p>What we ended up doing was splitting up the system so we have a solution that looks like this:</p>

<ul>
<li>TruthVineAdmin (ASP.NET MVC)</li>
<li>TruthVinePublic (ASP.NET MVC)</li>
<li>TruthVine (RavenDB/Infrastructure)</li>
<li>TestThirdPartyWebsite (Static files only with the script tag in them)</li>
</ul>

<p>I'd normally not like to have a "common" assembly in a solution as the tendency of developers is to shuffle lots of needless 'shared' code to this place (where they'd be better off writing the code separately in the web projects), but I trust that Sam won't do this and the only things that go in this shared assembly are:</p>

<ul>
<li>RavenDB models</li>
<li>Common ASP.NET MVC infrastructure (session-per-request)</li>
<li>The paging code</li>
</ul>

<p>There is little point trying to share view models or play around trying to re-use views and hide and show admin functionality on content pages (that stuff is always horrible to do unless you have time to build up some decent conventions), so this separation makes sense.</p>

<p>As for my happiness rating with ASP.NET MVC today, well - it stayed out of my way because I did everything the way it wanted me to - because of this I ended up building the third party JS content-embedding system to the point where it had pretty much reached feature parity with the system we were basing this off in the first place. (Hurrah)</p>

<p>I'm pretty much doing things the way I've <a href="http://codebetter.com/robashton/2011/06/13/finding-a-balance-with-asp-net-mvc/">Described previously on CodeBetter</a> without any of the feature-based grouping (haven't got time to set it up)</p>

<p>Controller actions all pretty much look like this across the site</p>

<pre><code>[HttpGet]
public ActionResult Edit(int id) {
   var doc = this.Documents().Load&lt;ThatDocument&gt;(id)
   if(doc == null) return new Error404Result()
   return View(new EditViewModel(doc))
}

[HttpPost]
public ActionResult Edit(EditViewModel input) {
   var doc = this.Documents().Load&lt;ThatDocument&gt;(model.Id)
   if(doc == null) return new Error404Result()

   if(ModelState.IsValid) {
    input.SaveTo(doc);
    return RedirectToAction("View", new { Id = model.Id })
   }
   input.CopyFrom(doc);
   return View(input);
}
</code></pre>

<p>Straight down to earth and simple. Coupled with all of those helper methods and Razor it's pretty easy to throw up new forms and use redirects to create a workflow over the site.</p>

<p>My happiness rating with RavenDB is as ever, it stays out the way and handled persistence for me - lovely.</p>

<p>With a working admin portal and a working content embedding system, that's pretty much the end-to-end product written in two days, leaving us three days to mop up the rest of the tasks. </p>

<p>The good thing about all the work so far is that the domain has been very well understood and communicated (thanks to the previous incarnation of the system) so we've not had to spend too long discussing or debating things, I've been showing the work to Sam on a feature by feature basis to get feedback (he is my customer after all) and adopting his feedback every hour or so. </p>

<p>Tomorrow we'll look at getting these three sites deployed on EC2, and throwing the audio files up to S3, because that'll put us in a good place.</p>]]></description><link>http://codeofrob.com/entries/this-week,-lets-create-a-start-up---day-2.html</link><guid isPermaLink="true">http://codeofrob.com/entries/this-week,-lets-create-a-start-up---day-2.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 14 Mar 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[This week, let's create a start-up - Day 1]]></title><description><![CDATA[<p><strong>This post was written on Monday</strong></p>

<p>I've finished my <a href="/entries/this-week,-lets-create-a-start-up.html">first day</a> of the build a start-up in a week challenge, and now I know a little more about the project.</p>

<ul>
<li>Sam has already built a codebase that his local church uses to put sermons online</li>
<li>His target audience is non-technical churches that have managed to get a website up there (even if it's just static code)</li>
<li>He wants to be able to embed a single line of code in one of their pages and give them all the functionality</li>
<li>The functionality isn't too complex, but it has to be dead easy</li>
</ul>

<p>Okay, so what the heck are sermons and what's the deal about getting them online</p>

<ul>
<li>Churches have sermons</li>
<li>A sermon is just an audio file (encoded to a variety of formats)</li>
<li>Each sermon can belong to a series of sermons (perhaps on a topic of some sort)</li>
<li>Sermons have meta data associated with them, as do the series</li>
<li>Each church needs their own subset of this data</li>
<li>Each church can have multiple users who can add sermons and series</li>
</ul>

<p>Not that complicated, and my first suggestion is</p>

<p><em>Can't we just use Wordpress/Drupal/Etc and have this done in a few hours?</em></p>

<p>If I was building an MVP, that's pretty much what I'd do, but Sam is pretty insistent that he wants it done in .NET (<em>long time no see</em>) and RavenDB (<em>I was doing this last week!</em>), so I guess I need to get out my Windows laptop and once more work my way around the perils of .NET and ASP.NET MVC)</p>

<p>Why ASP.NET MVC? Because I actually remember quite a lot of it from the last time I did .NET and I'm not going to waste time trying to learn another .NET web framework when I have to start building stuff <em>now</em> - when building something with such a short time-frame, you should be using something you know to make the most of the time.</p>

<p>Anyway, after trying to create a few "empty sites" in Visual Studio, I finally find a configuration that is "emptier" than the other ones and get to work (this is still confusing Microsoft!)</p>

<p>Turns out it's not only "mediocre" these days, but I'm actually able to get most of the basic CRUD operations and workflow done in a few hours, highlights of this experience being:</p>

<ul>
<li>The Razor View Engine</li>
<li>Html.EditorForModel</li>
<li>Html.EditorFor</li>
<li>Data Validation Attributes for the ViewModels (sorry guys, but they work quite well)</li>
<li>Global action filters</li>
</ul>

<p>The default model binding seems to work out of the box for everything, and RavenDB is being managed via global action filters so I only have to do</p>

<pre><code>this.Documents()
</code></pre>

<p>In any controller to get the document session (yay for extension methods), no I'm not bothering wiring up a container, the only objects in play are the input/view models and RavenDB and the state model that is being persisted in it, and it's unlikely to get much more complicated than that (so end-to-end tests will suffice with an in-memory RavenDB for now)</p>

<p>I even wrote a little bit of magic to do paging in a standard way across any view that needs them in RavenDB</p>

<pre><code>pagedResults = session.Query&lt;Whatever&gt;()
       .Where(x=&gt; SomeCondition(x))
       .PerformPaging(inputModel)
</code></pre>

<p>Yay again for extension methods.</p>

<p>I also set up OAuth - I used DotNetOpenAuth, which worked once I'd written a pile of code in a controller action - it's <em>much</em> better than the previous incarnations I used last time I did .NET, but it's still not quite as good as say, passport in NodeJS (and I'll hazard a guess it doesn't quite meet the standards of whatever RoR provides for this either).</p>

<p>I guess that's because with node, we usually have control over the entry point and everything can be done with connect middleware in a standardised fashion, whereas ASP.NET MVC is an opinionated framework which doesn't know what its opinions are and still suffers from a sad-mix of xml configuration and confusion, still - I guess once you know about this stuff you can copy and paste these bits of infrastructure around so it's not too awful.</p>

<p>Anyway, today I achieved with ASP.NET MVC and RavenDB</p>

<ul>
<li>All the basic CRUD forms + workflow around sermons and series (about 10 dynamic pages in all)</li>
<li>Basic paging/filtering controls for anything that needs them</li>
<li>Audio upload (alhough not going to S3 yet)</li>
<li>Authentication with credentials</li>
<li>Authentication via OAuth</li>
<li>Theming using the bootstrap theme Sam has already provided</li>
</ul>

<p>Tomorrow I'll hook up the script to embed content in third party websites, and get the MVP finished - that'll leave three days to do all the value-adds, I'm fairly happy with this progress and feel that <em>this</em> is still how we build software, even if it's not in the technology I'd have chosen.</p>]]></description><link>http://codeofrob.com/entries/this-week,-lets-create-a-start-up---day-1.html</link><guid isPermaLink="true">http://codeofrob.com/entries/this-week,-lets-create-a-start-up---day-1.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 13 Mar 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[This week, let's create a start-up]]></title><description><![CDATA[<p>This week (I'm writing this on <strong>Sunday</strong>) on my grand adventure of <a href="/entries/i-am-not-looking-for-a-job.html">"building stuff for people"</a>, I am going to help <a href="http://twitter.com/samuel_d_jack">@samuel_d-jack</a> build a start-up.</p>

<p>Because I'm not yet in the office and don't know what is expected of me there is little I can say about what I'll be doing yet, I'll be writing a blog post each day for publishing in order at some point in the future, so these posts are going to show up out of kilter (I think the final one will be on a Tuesday even though it was penned on a Friday - oh well)</p>

<p>What I do know</p>

<ul>
<li>Sam occasionally works on RavenDB</li>
<li>Sam is a freelance .NET developer</li>
<li>Sam is based up near Birmingham</li>
<li>Sam wants to do something about helping churches get sermons online</li>
</ul>

<p>That's about it, I look forward to seeing what the problem is, and how he wants it solved.</p>]]></description><link>http://codeofrob.com/entries/this-week,-lets-create-a-start-up.html</link><guid isPermaLink="true">http://codeofrob.com/entries/this-week,-lets-create-a-start-up.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 12 Mar 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[The fallacy of the Dreyfus model in software development]]></title><description><![CDATA[<p>Not <a href="/entries/uncle-bobs-viewpoint-considered-harmful.html">another</a> <a href="http://blog.markrendle.net/2013/03/09/dont-unit-test-trivial-code/">post</a> <a href="http://blog.ploeh.dk/2013/03/08/test-trivial-code/">about</a> <a href="http://blog.8thlight.com/uncle-bob/2013/03/05/TheStartUpTrap.html">TDD</a> Rob, please no!</p>

<p>Okay, so I'll reply on a tangent because I've had enough of talking about TDD and want to talk about software development as a learned "craft" and why pimping out magic software development strategies to "newbies" is harmful to the overall quality of software development.</p>

<p>First off, I want to make an opening statement so you know where I'm coming from. This is based on various jobs and contracts I have been a part of and various code bases I have been asked to look at over the years.</p>

<p><blockquote>
    Badly applied software patterns and methodologies often cause bigger problems than not applying them at all
  </blockquote></p>

<p>This is obvious to most people (I hope), we <em>know</em> this - so why am I saying it again?</p>

<p>I read <a href="http://programmers.stackexchange.com/questions/185719/how-should-you-tdd-a-yahtzee-game/188188#188188">this response</a> to a question on TDD on StackExchange and the sentiment being expressed is:</p>

<p><blockquote>
    Flexibility isn't for novices
  </blockquote></p>

<p>This hearkens back to the <a href="http://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition">Dreyfus model of skill acquisition</a> and the idea that beginners and novices shouldn't be left alone to fend for themselves; that they should be strictly adhering to the recognised rules during this development phase.</p>

<p>Let me start off by saying that this premise is something that I agree with across any industry where experience is more important than qualifications or badges next to your name. </p>

<p><strong>However...</strong></p>

<p>Software development is definitely one of these industries, so what's my beef/horse with applying this model in reality?</p>

<p><blockquote>
    The statement that beginners should be strictly following the rules makes the assumption that they have access to somebody who isn't a beginner and can tell them that they're doing it wrong.
  </blockquote></p>

<p>The problem is that software development is <em>still</em> an immature and confusing trade. Access to these experts is limited to 1-2 week consultancy stints where they come in, spout a pile of "truths" and then leave the team to fend for themselves (if this even happens at all).</p>

<p>What we actually have out here in the field is thousands of software teams with no experience of these things. They also have no real access to anybody with these skills.</p>

<p>When they hear advice from the so-called Master Craftsmen in the field that:</p>

<p><blockquote>
    You should be testing all trivial code
  </blockquote></p>

<p>They take that as a gospel and get to work creating literally thousands of brittle unit tests (it's likely they're not even doing TDD "properly"). The end result is that their code is worse off then had they just felt their way through the problem with direct solutions and applied evidence-based solutions to the pain points.</p>

<p>The same problem happened 10 years ago with all that rubbish N-Tier advice that the Enterprise Consultants were doling out.</p>

<p><blockquote>
    The problem is that we're encouraging thousands of new developers to follow the rules and not think for themselves.
  </blockquote></p>

<p><em>All of this has happened before and will happen again.</em></p>

<p><strong>The ideal world</strong></p>

<p>In the ideal world where we all have access to mentors with vast experience in this "more professional world" that our master craftsmen <a href="http://blog.8thlight.com/uncle-bob/2013/03/05/TheStartUpTrap.html">aspire to create</a> then we can afford to spend time bringing up our "novices" with:</p>

<ul>
<li>rigid adherence to taught rules or plans</li>
<li>no exercise of discretionary judgement</li>
</ul>

<p>This sounds absolutely wonderful and when we have a few hundred thousand people with 20 years of experience trying TDD and failing at it. When those few hundred thousand people have found the balance and come to their form of pragmatism these people will make <em>wonderful</em> mentors.</p>

<p><strong>The reality</strong></p>

<p>In reality, the mentors that our novices have access to are the ones who still think that SQL Server is the only safe place to put data. You know - the ones who still think that every app needs a <a href="/entries/cqrs-is-too-complicated.html">BLL, DAL, BOLL,ETC</a>, and that if you write your code properly the first time you shouldn't need tests.</p>

<p>In reality, a lot of these developers have decided that TDD is the greatest thing without really trying it out, or that every piece of code should have a Single Responsibility, and Never Be Touched Once Written (it's an interpretation I've seen). This is  because that is <em>how it's written on the internet</em> and because of this they're "engineering" <em>monsters</em> which while financially great for consultants like me are costing the companies that own those monsters dear.</p>

<p>The reality is that new software developers aren't going to spend their first two years being spoon-fed "the correct way of doing things" (whatever that is, because we're still not sure). </p>

<p>The reality is that they might get a couple of months of "help" when starting software development at their first company (where the help is "this is how you use Enterprise Framework X").</p>

<p>The "people on the internet" spouting TDD and associated methods like sermons do not count as mentors to these people. You cannot apply the Dreyfus model to this sort of learning relationship. These people are not there for these novices and trying to reason about software craftmanship as if they are is what is causing the <em>new</em> problems.</p>

<p>The reality is that to every question the answer is <em>it depends</em> and we should be arming our "novices" with the tools to work out what the real answer is instead of handing them a single hammer with a bag of nails. (That's a metaphor for "writing blog entries which state that <em>you're doing it wrong unless...</em>")</p>

<p><strong>Getting a grip</strong></p>

<p>Spouting dogma at people on the internet and at conferences is self-defeating, (Unless you make your living off consultancy in these matters) it either puts people who know better into defensive mode because they recognise the dogma and rightfully fear it, or encourages people to follow your rules without looking at the wider context which causes substantial problems in software products.</p>

<p>Quit it.</p>]]></description><link>http://codeofrob.com/entries/the-fallacy-of-the-dreyfus-model-in-software-development.html</link><guid isPermaLink="true">http://codeofrob.com/entries/the-fallacy-of-the-dreyfus-model-in-software-development.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 11 Mar 2013 09:30:00 GMT</pubDate></item></channel></rss>