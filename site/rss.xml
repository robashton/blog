<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><image><url>http://codeofrob.com/img/cover.jpg</url><title>Rob Ashton&apos;s blog</title><link>http://codeofrob.com</link></image><generator>RSS for Node</generator><lastBuildDate>Fri, 02 Nov 2018 22:56:47 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><author><![CDATA[Rob Ashton]]></author><item><title><![CDATA[Functional Erlang - Purescript on the BEAM - Intro]]></title><description><![CDATA[<p>Not gonna make a big deal or fanfare about this, but I&#39;m going to jot down my thoughts as the company I work for starts moving into using Purescript for more of our day to day work instead of Erlang.</p>
<h3 id="what-">WHAT?</h3>
<p>Indeed, our codebases are starting to get pretty unwieldy with their sizes and as much as we keep a tight ship with Dialyzer and such, writing all of our code in a language like Erlang is just asking for easily avoidable bugs to enter the room.</p>
<p>So, what is there to look at in this space?</p>
<ul>
<li>The project has a <a href="https://github.com/purerl">Github Org</a></li>
<li>There are a <a href="https://github.com/purerl/package-sets">pile of packages</a> for getting started with</li>
<li>Purescript itself has a ton of users and <a href="http://www.purescript.org/">documentation</a> so we&#39;re not working in unfamiliar lands</li>
<li>There has been some <a href="https://github.com/purerl/purerl_otp_sandbox">experimentation with OTP</a> already, with a few different strategies</li>
</ul>
<p>Our strategy going forward is to take a greenfield app, and start to write it in Purescript, accepting that there will be marginal gains if any when writing the periphery code in Purescript as opposed to the meaty stuff that already exists. (Not to mention all the interop required). This will at least give us in-roads into the language and platform, and highlight any core-work required in the Purerl space to support our needs as we go forwards.</p>
<p>The first targets therefore for our attack, and I&#39;ll do these posts fairly bite-size over the coming weeks to keep things easily digestible..</p>
<ul>
<li>Writing a gen server in Purescript </li>
<li>Persisting data from Purescript</li>
<li>Serving a JS frontend (presumably interop with Cowboy)</li>
</ul>
<p>I imagine there will be a lot of stumbling blocks and &quot;This isn&#39;t quite right yet&quot; comments along the way, nonetheless, it&#39;s going to be fun to write and hopefully to read as well - enjoy.</p>
]]></description><link>http://codeofrob.com/entries/functional-erlang---purescript-on-the-beam---intro.html</link><guid isPermaLink="true">http://codeofrob.com/entries/functional-erlang---purescript-on-the-beam---intro.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 02 Nov 2018 09:30:00 GMT</pubDate></item><item><title><![CDATA[A few notes on Elm 0.17 - Composing Applications]]></title><description><![CDATA[<p>Last little &#39;note&#39; on Elm</p>
<ul>
<li><a href="/entries/a-few-notes-on-elm-0.17---intro.html">A few notes - Intro</a></li>
<li><a href="/entries/a-few-notes-on-elm-0.17---the-language.html">A few notes - The Language</a></li>
<li>A few notes - Composing Applications</li>
</ul>
<p>One of the most common questions in the Slack channels right now is </p>
<pre>
  "How do I do parent/child communication in Elm 0.17"
</pre>

<p>At the heart of it all is <a href="http://guide.elm-lang.org/architecture/index.html">The Elm Architecture</a> enouraging developers to write modules that look like this</p>
<pre><code class="language-haskell">    <span class="import"><span class="keyword">import</span> Html exposing <span class="container">(..)</span></span>

    <span class="typedef"><span class="keyword">type</span> alias <span class="type">Model</span> = <span class="container">{ ... }</span></span>
    <span class="typedef"><span class="keyword">type</span> <span class="type">Msg</span> = <span class="type">Reset</span> | ...</span>

    update : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; ( <span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span> )
    update msg model =
      <span class="keyword">case</span> msg <span class="keyword">of</span>
        <span class="type">Reset</span> -&gt; handleReset model

    view : <span class="type">Model</span> -&gt; <span class="type">Html</span> <span class="type">Msg</span>
    view model = someHtml model</code></pre>
<p>This seems inherently sensible and you can nest components simply by storing their child models on the parent model, and calling into the child &#39;view&#39; and &#39;update&#39; functions with messages and that model that are entirely opaque to the parent.</p>
<p>This is great, two things stand out here</p>
<ul>
<li>Unlike in React, control over the state you use is kept inside the component (updates/etc)</li>
<li>How do you get useful events back up to the parent or send commands to the child when something changes?</li>
</ul>
<p>The first one is a bit weird because it means while you have a top level state object most of it is generally opaque to the code at the top level. A component will create its initial state, send messages to itself to update its state and then use that state to render. The &quot;parent&quot; then has boilerplate to route those messages. Components are therefore entirely standalone.</p>
<p>We are currently rolling with the following concepts for our Elm apps.</p>
<ul>
<li><em>Routing</em>: Top level component, doesn&#39;t have any state other than current page and current model. Handles top level shared events (more on this coming up)</li>
<li><em>Pages</em>: isolated components following the init/update/view/subscriptions pattern and doing all their own data loading/saving internally</li>
<li><em>Children</em>: Mostly don&#39;t require their own models, just dumb rendering functions, no init/update/etc. Raise events from attributes passed in in &#39;view&#39;</li>
</ul>
<p>There are some exceptions to Children, but mostly events come from the DOM and we can just wire them up pretty much directly without any need for intermediate models. You don&#39;t tend to need much more nesting than this. I&#39;m a bit concerned that the Html module seems to load its source of truth from the dom instead of relying on the model passed in but <em>shrug</em>.</p>
<p>What this effectively means is that each Page holds the &quot;Single Source of Truth&quot; and simply renders a tree based on that source of truth, wires up events from that tree into messages within the page, handles those messages, updates the single source of truth and the cycle goes on. </p>
<pre><code class="language-haskell">    update : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; ( <span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span> )
    update msg model = 
        <span class="keyword">case</span> msg <span class="keyword">of</span> 
          <span class="type">MyClickMessage</span> -&gt; ( model, loadSomethingCool )

    view : <span class="type">Model</span> -&gt; <span class="type">Html</span>.<span class="type">Msg</span>
    view model -&gt;
       <span class="type">MyButton</span>.default [ onClick <span class="type">MyClickMessage</span> ] <span class="string">"Click me!"</span></code></pre>
<p>There are some things that need to be handled globally however, changes to navigation, displaying generic error messages/feedback, dialog management (okay, not dialog management, don&#39;t use dialogs please), global data management (which user are we?) and sometimes we need to </p>
<ul>
<li>Tell a Page that something has changed while it wasn&#39;t looking</li>
<li>Tell the Router that we want something to happen</li>
</ul>
<p>There have been (in the last few days) a couple of posts written on this subject</p>
<ul>
<li><a href="http://folkertdev.nl/blog/elm-child-parent-communication">Child/Parent Communication in Elm</a></li>
<li><a href="https://medium.com/@alex.lew/f4bfaa1d3f98#.otdxecxl8">The Translator Pattern</a></li>
</ul>
<p>Our current preferred method for getting messages to the Router is detailed in the first post and looks a bit like this</p>
<p><em>Update method in Page</em></p>
<pre><code class="language-haskell">  update : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; ( <span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span>, <span class="type">Cmd</span> <span class="type">Common</span>.<span class="type">Event</span> )
  update msg model =
      <span class="keyword">case</span> msg <span class="keyword">of</span>
          <span class="type">FetchFail</span> err -&gt;
              handleError err model

          <span class="type">Tick</span> -&gt;
              ( model, <span class="type">Cmd</span>.none, <span class="type">Cmd</span>.none )

          <span class="type">ReloadSomeState</span> -&gt;
              ( model, updateSomeState, <span class="type">Cmd</span>.none )

          <span class="type">VisitResource</span> id -&gt;
              changeRoute (<span class="type">ResourcePageRoute</span> id) model

          <span class="type">FetchSomeStateSucceed</span> state -&gt;
              ( { model | <span class="type">SomeState</span> = <span class="type">Just</span> state }, <span class="type">Cmd</span>.none, <span class="type">Cmd</span>.none )
</code></pre>
<p>See the tuple? Pages return a triplet where the third item can be something from Common.Event. Common also exports ways of making those events to keep life easy for us in our Pages.</p>
<pre><code class="language-haskell">
    changeRoute : <span class="type">Route</span> -&gt; model -&gt; ( model, <span class="type">Cmd</span> msg, <span class="type">Cmd</span> <span class="type">Event</span> )
    changeRoute route model =
        ( model, <span class="type">Cmd</span>.none, event (<span class="type">RouteChanged</span> route) )
</code></pre>
<p>I wouldn&#39;t try and force this any further down than the Page level, most Components below this can get away with just using [ onEvent SomeMsg ] and we don&#39;t want too much child-&gt;parent communication anyway, it&#39;s usually indicative that we&#39;re trying to keep state in the wrong place.</p>
<p>Our current preferred method for getting messages from the Router to the Child (this is very rare) is simply to export a method from the child component which knows what sort of message to return.</p>
<pre><code class="language-haskell">    <span class="module"><span class="keyword">module</span> Child exposing <span class="container">(<span class="type">Msg</span>, <span class="type">Model</span>, <span class="title">doSomethingInteresting</span>)</span> 

    doSomethingInteresting : SomeArgumentType -&gt; Model -&gt; <span class="container">( <span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span> )</span>
    doSomethingInteresting arg model = <span class="container">( <span class="title">model</span>, <span class="title">kickTaskOffFor</span> <span class="title">arg</span> )</span>
</code></pre>
<p>This can just be called in the &#39;update&#39; method of the parent.</p>
<h1 id="the-ugly-bit-of-routing">The ugly bit of routing</h1>
<p>Dynamic dispatch in a typed language is a pain and currently we have a lot of boilerplate around child components, it looks a bit like this in our &#39;update&#39; function in our Router, you can easily imagine our init/subscriptions/view methods.</p>
<pre><code class="language-haskell">
    bubble : (a -&gt; <span class="type">Msg</span>) -&gt; <span class="type">Cmd</span> a -&gt; <span class="type">Cmd</span> <span class="type">Common</span>.<span class="type">Event</span> -&gt; <span class="type">Cmd</span> <span class="type">Msg</span>
    bubble lifter cmd ev =
        <span class="type">Cmd</span>.batch
            [ <span class="type">Cmd</span>.map lifter cmd
            , <span class="type">Cmd</span>.map <span class="type">Event</span> ev
            ]

    update : <span class="type">Msg</span> -&gt; <span class="type">Model</span> -&gt; ( <span class="type">Model</span>, <span class="type">Cmd</span> <span class="type">Msg</span> )
    update msg model =
        <span class="keyword">case</span> msg <span class="keyword">of</span>
            <span class="type">HomePageMsg</span> act -&gt;
                <span class="keyword">let</span>
                    ( newPage, cmd, ev ) =
                        <span class="type">HomePage</span>.update act model.homePage
                <span class="keyword">in</span>
                    ( { model | homePage = newPage }, bubble <span class="type">HomePageMsg</span> cmd ev )

            <span class="type">ResourcePageMsg</span> act -&gt;
                <span class="keyword">let</span>
                    ( newPage, cmd, ev ) =
                        <span class="type">ResourcePage</span>.update act model.resourcePage
                <span class="keyword">in</span>
                    ( { model | resourcePage = newPage }, bubble <span class="type">ResourcePageMsg</span> cmd ev )

            <span class="type">Event</span> ev -&gt;
                <span class="keyword">case</span> ev <span class="keyword">of</span>
                    <span class="type">Common</span>.<span class="type">RouteChanged</span> newRoute -&gt;
                        ( model, newUrl (toHash newRoute) )

                    <span class="type">Common</span>.<span class="type">HttpError</span> err -&gt;
                        <span class="type">Debug</span>.log (toString err) ( model, <span class="type">Cmd</span>.none )
</code></pre>
<p>That&#39;s a whopping case clause for each child component. It&#39;s avoidable if they all share the same model and you can do tricks by lifting the model into a parametric type but you still need to write a clause for each child because you can&#39;t have a heterogenous list of &#39;routes&#39; to dispatch from.</p>
<p>I haven&#39;t seen a tidy way of doing this yet, an example of lifting the child models into a parametric type can be found in the <a href="https://github.com/debois/elm-parts">elm-parts</a> repo, but it&#39;s a bit invasive while not adding all that much (it&#39;s a good start though).</p>
<p>I think if records had &#39;setter&#39; functions then most of these functions for update/init/view/etc could be generated on start-up by calling a builder repeatedly with each route, something worth musing on but not seen in the wild yet.</p>
<p>Honestly I think Elm needs some metaprogramming up in its face, Haskell templating or something similar.  There are arguments against it along the lines of it &quot;It&#39;s complicated and it will scare people off&quot; but currently I think the boilerplate is a growing issue of annoyance with no good solution as of yet.</p>
<h1 id="some-modules">Some modules</h1>
<p>We&#39;re using <a href="https://github.com/elm-lang/navigation">elm navigation</a> and <a href="https://github.com/evancz/url-parser">evancz UrlParser</a> to do our routing and that&#39;s all fairly simple, just onerous as far as updates go. </p>
<p>Nuff said, I don&#39;t have opinions beyond &quot;this is going to get a bit clunky when our web-app has a few dozen routes. There is an argument that we should just do this on the server and go all progressive-enhancement on our app - no thanks, we&#39;re using Erlang for most of our apps and it&#39;s not a path we want to tread.</p>
]]></description><link>http://codeofrob.com/entries/a-few-notes-on-elm-0.17---composing-applications.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-few-notes-on-elm-0.17---composing-applications.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 05 Jul 2016 09:30:00 GMT</pubDate></item><item><title><![CDATA[A few notes on Elm 0.17 - The Language]]></title><description><![CDATA[<p>Continuing on then</p>
<ul>
<li><a href="/entries/a-few-notes-on-elm-0.17---intro.html">A few notes - Intro</a></li>
<li>A few notes - The Language</li>
</ul>
<h1 id="so-it-s-haskell-">So it&#39;s Haskell?</h1>
<p>Not really, there are a lot of things in common with Haskell but on closer inspection they are typically same-same-but-different.</p>
<pre><code class="language-haskell">    <span class="comment">-- Haskell</span>
    doSomething :: <span class="type">Foo</span> -&gt; <span class="type">Bar</span>

    <span class="comment">-- Elm</span>
    doSomething : <span class="type">Foo</span> -&gt; <span class="type">Bar</span></code></pre>
<p>or</p>
<pre><code class="language-haskell">    <span class="comment">-- Haskell</span>
    doSomething x y = x $ somethingElse y

    <span class="comment">-- Elm</span>
    doSomething x y = x &lt;| somethingElse y</code></pre>
<p>I don&#39;t really care about any of these differences, as they are largely arbitrary syntax/naming decisions - although I do feel as though maintaining more of a similarity with Haskell seeing as these choices <em>are</em> arbitrary would make it easier to port code or read documentation across the two.  (The Elm compiler is hosted in Haskell after all anyway...)</p>
<p>The lack of typeclasses has lead to things like this though</p>
<pre><code class="language-haskell">

    <span class="comment">-- Haskell</span>
    andFinally &lt;$&gt; somethingElse &lt;$&gt; something

    <span class="comment">-- Elm</span>
    <span class="type">Maybe</span>.andThen (<span class="type">Maybe</span>.andThen something somethingElse) andFinally

</code></pre>
<p>Not to mention the functions that List has that String doesn&#39;t (I don&#39;t care if String is a list or not, a lot of the same operations do apply and having to look up functions for &#39;String&#39; or &#39;List&#39; instead of just functions that apply against monoids - bleh.</p>
<p>Agh.</p>
<h1 id="typeclasses">Typeclasses</h1>
<p>No type classes, there is a whole history of conversation about the lack of need for them (and the ability for ADTs to do the job admirably), I have yet to see this promised land however, all I see is a bunch of modules for different data structures with methods dangling off them and it reminds me a bit of Erlang where my ability to write sensibly composed functional code is often hampered by its fudge of modules.</p>
<p>By getting rid (in name anyway) of Monads, Applicative, etc - Elm seems much more acessible to the average user. That&#39;s not to say that they don&#39;t exist in some form in the codebase but side effects/etc have been shoved into the more domain specific &quot;<a href="https://github.com/elm-lang/core/blob/master/src/Task.elm">Task</a>&quot; and Effect managers and in the Elm Architecture itself it&#39;s rare you have to touch anything that isn&#39;t &quot;just data&quot;. </p>
<p>This is a sensible design decision on the surface, as users who are new to functional programming aren&#39;t overwhelmed by concepts but I can&#39;t help but feel that the data-oriented patterns in Elm couldn&#39;t be exposed in Haskell itself without surfacing those &quot;tricky&quot; concepts whilst keeping them available (there&#39;s a weekend project then). </p>
<p>Moving on, by placing focus on ADTs and records and inferring expected structure from usage the error messages can be a bit perplexing to start off with, despite them being very well written.</p>
<p>Consider this function for example</p>
<pre><code class="language-haskell">    <span class="typedef"><span class="keyword">type</span> alias <span class="type">Model</span> = <span class="container">{
      <span class="title">realField</span> : <span class="type">String</span>
    }</span></span>

    extractThingy : <span class="type">Model</span> -&gt; <span class="type">String</span>
    extractThingy model = model.missingField
</code></pre>
<p>The error from this both simultaneously very useful and counter-intuitive:</p>
<pre>
    -- TYPE MISMATCH ------------------------------------------------------ Test.elm

    The type annotation for `extractThingy` does not match its definition.

    23| extractThingy : Model -> String
                        ^^^^^^^^^^^^^^^
    The type annotation is saying:

        { realField : ... } -> String

    But I am inferring that the definition has this type:

        { b | missingField : ... } -> a

    Detected errors in 1 module.  
</pre>

<p>Instead of &quot;Hey, Model doesn&#39;t have a field called missingField&quot; we get a complaint that the code is inferring a structure with &#39;missingField&#39; by usage and it doesn&#39;t match the definition it has been supplied. This is because the compiler works backwards from the point of usage and gives its error messages from that context.</p>
<p>I&#39;m not the only one who got confused initially by this and with more complicated structures and nested code the errors being dumped out can be pretty daunting. It&#39;s something you get the hang of though and the descriptive nature of the error messages make them look a lot more excessive than they really are.</p>
<h1 id="functional-records">Functional Records</h1>
<p><a href="http://lexi-lambda.github.io/blog/2015/11/06/functionally-updating-record-types-in-elm/">This has been covered before</a>, but records have &#39;getters&#39; generated for them so we can do things like this</p>
<pre><code class="language-haskell">    <span class="typedef"><span class="keyword">type</span> alias <span class="type">Model</span> = <span class="container">{ 
          <span class="title">realField</span> : <span class="type">String</span>
        }</span></span>

    extractThingy : <span class="type">List</span> <span class="type">Model</span> -&gt; <span class="type">List</span> <span class="type">String</span>
    extractThingy items = <span class="type">List</span>.map .realField items
</code></pre>
<p>This can be quite handy if we&#39;re writing functional code around records, sadly no equivalent setters are generated so it&#39;s hard to compose operations against records.</p>
<h1 id="development-environment">Development environment</h1>
<p>I&#39;m in Emacs these days on account of our company&#39;s switch to <a href="https://www.rebar3.org/">Rebar3</a> in the <a href="http://erlang.org/">Erlang</a> world and my reluctance to sit there and fix my Vim plug-ins; I&#39;m therefore using <a href="https://github.com/jcollard/elm-mode">elm-mode</a> which gives me access to some integration with elm-reactor and elm-format which we use and don&#39;t even bother arguing about.</p>
<p>Following the <a href="https://github.com/NoRedInk/elm-style-guide">elm-style guide</a> from No-Red-Ink leaves us one less thing to worry about when writing code.</p>
<p>I currently really miss the following things from my Haskell development:</p>
<ul>
<li><a href="http://www.mew.org/~kazu/proj/ghc-mod/en/">ghc-mod</a></li>
<li><a href="www.haskell.org/hoogle/">hoogle</a></li>
<li>compile-on-save insta-feedback-in-repl</li>
</ul>
<p>I think I can probably do the latter in an hour or so with existing tooling, but right now I feel one of the biggest benefits of having a sensible type system is missing: Being able to inspect the darned types and work out how functions are supposed to compose without having to constantly jump to documentation.</p>
<p>Hoogle or a hoogle-like is a must, even with something as low on surface area as Elm; when you know the types of what you&#39;re working with and you know the types of the things you want then Hoogle is one of the most useful things in your arsenal.</p>
<p>That said, a lot of the time in Haskell we are dealing with parametric types and the functions we are looking for go from (a -&gt; b) -&gt; b, in our record and ADT oriented world we don&#39;t have the interchangeability that we&#39;d get in that world and Hoogle is less useful. I don&#39;t know how I feel about that yet.</p>
<h1 id="a-note-on-purescript-at-this-point">A note on Purescript at this point</h1>
<p>I see that the Almighty <a href="http://twitter.com/bodil">@bodil</a> <a href="https://github.com/bodil/purescript-signal">Got there already</a> as I was just musing about using the patterns in Elm in a better programming language, I&#39;d be interested in seeing 0.17 &quot;bye bye FRP&quot; patterns written in Purescript for sure.</p>
<h1 id="next-up-">Next up..</h1>
<p>I&#39;ll look at the structure of our web apps and highlight some of the issues and decisions we&#39;ve encountered so far in 0.17</p>
]]></description><link>http://codeofrob.com/entries/a-few-notes-on-elm-0.17---the-language.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-few-notes-on-elm-0.17---the-language.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 30 Jun 2016 09:30:00 GMT</pubDate></item><item><title><![CDATA[A few notes on Elm 0.17 - Intro]]></title><description><![CDATA[<p>I&#39;ve been writing a bit of Elm lately for work as we have never really liked Javascript and with Elm 0.17.0 it looks like some sensible decisions have been made and it&#39;s going to be a viable replacement for our currect defacto choice of React + NPM.</p>
<p>Obviously I&#39;m in favour of that, I&#39;m a big fan of Haskell and Haskell type languages and the only reason I hadn&#39;t thrust down this direction already is my own reluctance to spend time learning an immature technology for application code that has generally been &quot;good enough&quot; up until now (I&#39;d prefer to spend the time on my guitar/coffee sorry not sorry).</p>
<p>Now I&#39;ve written a couple of Elm applications (one of which will have gone into production by the time this post is published), I just want to make a few remarks about the &#39;state of things&#39;, knowing that I don&#39;t really have the full history of things regarding Elm and there may well be reasons behind some of the design decisions I&#39;m having a hard time with.</p>
<p>This post is more of an overview of what things look like and what resources I used to learn Elm with, my other posts will deal with language and application structure separately so I don&#39;t just dump out a few thousand words that nobody will ever read.</p>
<h1 id="the-state-of-docs-samples">The state of docs/samples</h1>
<p><a href="https://elm-community.github.io/elm-faq/17.html">0.17</a> only came out fairly recently and most of the bigger examples available were written before this. This means that a lot of the sample code use concepts that don&#39;t exist any more (<a href="http://elm-lang.org/blog/farewell-to-frp">Signals</a>) and there has been very little written of any consequence in the New Way. This means that composing larger applications is a bit of a stab in the dark and we&#39;ve had to guess our way around this.</p>
<p>There are examples written by <a href="https://github.com/evancz/">evancz</a> in 0.17, but like any other examples I can find they are limited to using a single top level model and command structure and don&#39;t really give any indication as to what something larger would look like. It&#39;s really good reading that the &quot;Commands and Subscriptions help nest components infinitely&quot; but there isn&#39;t really any indication as to what that actually looks like in the wild.</p>
<p>That said, the docs around the language itself and <a href="http://guide.elm-lang.org/architecture/">&quot;The Elm Architecture&quot;</a> are very good and a lot more complete than a lot of &quot;small&quot; projects like this would have usually been. The absolute focus on &quot;user oriented design&quot; really shows itself in that Elm is doing its best to use simple language and hide anything that isn&#39;t data or &#39;plain old code&#39; from the developer.</p>
<h1 id="learning-from-others">Learning from others</h1>
<p>While I have not directly interacted with any community members, I have joined the <a href="http://elmlang.slack.com">Slack</a> and browsed the <a href="https://groups.google.com/forum/#!forum/elm-discuss">mailing list</a> in an attempt to find answers to the questions I have had and that other people have similarly had.</p>
<p>I get the feeling that most people doing Elm are either writing fun little games (It looks <em>excellent</em> for this, or they&#39;ve not really attempted to write anything substantial in 0.17 yet. There are a lot of questions about composition and events and no real answers other than &quot;it&#39;s bit awkward&quot;. It feels a bit head-in-sand at the moment and one of the reasons I&#39;m doing these posts is to get some feedback over the way I&#39;ve ended up doing things.</p>
<p>The people <em>in</em> the mailing list and Slack seem to of the resoundingly friendly variety and the people approaching the language appear to be in the camp of it being their first functional language and there are no shortage of people ready to answer their questions in the Slack channels.  Searching through the history of the Slack and mailing list answered most of my questions about 0.17 or at least left me at a level of understanding that there isn&#39;t an answer yet and I&#39;d better just get on and do it my way for now.</p>
<h1 id="my-overall-impression">My overall impression</h1>
<p>Elm is in a place where I&#39;m happily going to use it for most of our front-end work from now on; the up-front time putting together the types and calls to get data is easily regained when building the actual application because compilation errors massively outweigh the runtime errors once the data is in place. </p>
<p>I&#39;ll probably do some more posts beyond these &quot;notes&quot; as I build larger things and have anything worth sharing; for now Elm seems to be a sensible option for those building applications for web browsers.</p>
]]></description><link>http://codeofrob.com/entries/a-few-notes-on-elm-0.17---intro.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-few-notes-on-elm-0.17---intro.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 28 Jun 2016 09:30:00 GMT</pubDate></item><item><title><![CDATA[A Londoner's guide to emigrating to Glasgow]]></title><description><![CDATA[<p>I&#39;ve been asked a couple of times already about moving to Glasgow in Scotland from depressed folks in England knowing that</p>
<ul>
<li>The economy is going to shit (crashy crashy yay)</li>
<li>The community is going to shit (racism, etc)</li>
<li>The UK is going to be a bad place to do business from if it&#39;s not part of the EU</li>
</ul>
<p>And part of this is the hope that</p>
<ul>
<li>Scotland was very pro-remain</li>
<li>Scotland recognises the value of immigrants</li>
<li>Scotland may have another #indyref and they want to come here to vote &quot;yes&quot; in it</li>
</ul>
<p>My own personal feelings? I voted no to independence because being part of the UK which was part of the EU was economically and globally sensible and given how things are now, I&#39;d change my vote to yes and hope that whoever was in charge put in place incentives for the tech industry/etc to start hiring and building in Scotland as it&#39;s a relatively cheap place to do business already and we could do with the income if we&#39;re no longer relying on money from England. (Sorry Cybernats, you were always wrong about this).</p>
<h1 id="why-glasgow-">Why Glasgow?</h1>
<p>So step one on that plan, get the tech community to start moving up here anyway - here are some reasons for you to consider moving to Glasgow</p>
<p><em>It&#39;s not London</em></p>
<p>I moved to Glasgow because it wasn&#39;t London; okay I moved to Glasgow because I had a nasty break-up and needed a change of scenery and it made me very happy indeed. A metaphor perhaps? It worked for me and it could work for you too.</p>
<p>You don&#39;t want to move to Edinburgh because Edinburgh is like a mini-London and is full of the same kinds of people in London that you&#39;d rather not hang out with. Not to mention that just like some parts of London it&#39;s impossible to move around because tourists are shuffling all over the place. Tourism is good for Scotland and thankfully they have a place to go and it&#39;s called Edinburgh.</p>
<p>Okay, so Edinburgh has better coffee, food and cocktails; c&#39;est la vie, it&#39;s less than an hour away by train and the tourists haven&#39;t discovered that yet, long may it stay that way.</p>
<p>So yeah, Glasgow = Not London. It&#39;d be nice to keep it that way too so keep your expectations to yourself and come and love Glasgow for what it is.</p>
<p><em>It&#39;s cheap</em></p>
<p>This is a hard one to wrestle with, telling everybody about Glasgow may increase rental and purchase prices and may damage those that already live here (not me, the indigineous Glaswegians). My hope is that the buy-to-invest nightmare that is London won&#39;t be repeated up here because since #brexit nobody wants to buy anything in GBP any more.</p>
<p>But you can&#39;t deny it, Glasgow is a cheap place to live - from the rent, the buses, the nights out and even the flights across to the continent; come up here and hire some of the locals and let&#39;s build a new tech hub eh?</p>
<p><em>The people are amazing</em></p>
<p>They can be scary at times the Glaswegians, but that&#39;s mostly because we&#39;ve been indoctrinated by the media to view their accent as one step away from getting a &quot;bottling&quot; to the face (Pretty sure that the verbification of the word &quot;bottle&quot; was a Scottish thing too) but honestly it&#39;s not like that at all. I have found conversations in the most unlikely of places with the most unlikely of people and so long as you&#39;re not putting on airs or trying to be something you&#39;re not you&#39;ll get on well with everybody up here.</p>
<p>I&#39;m often asked (especially since I started spending time in Japan) why I&#39;d return to Glasgow and the answer is always the people. Doing my circuit of the coffee shops and bars when I get back is an absolute pleasure and it&#39;s amazing to see the hard work people are putting in to building sustainable business that doesn&#39;t alienate the local crowd.</p>
<h1 id="so-where-do-i-move-to-">So where do I move to?</h1>
<p>You&#39;re sold? Excellent; my advice would be to get on a train up this way and get yourself in an AirBNB for a week, walk around and find an area that suits you. One of the great things about Glasgow not being London is that you don&#39;t need to sign the paperwork in blood before renting a house and pay up to six months in advance. Nae bother - sign your contract, pay a month&#39;s rent and deposit and that apartment is yours. This isn&#39;t the same level of commitment you have previously been used to.</p>
<p>One of the other great things about Glasgow is that no matter where you live, is that most places around the Subway are within 20 minutes of everywhere else around the Subway. There is only one Subway, it is a circle and it goes to most of the places you&#39;d like to be.</p>
<p>Taxis are cheap too, so if you end up going for a night out in Finnieston and you want to get home to your apartment in East Glasgow you&#39;re not going to have to take out a new mortgage to afford one.</p>
<p>So location isn&#39;t actually that important and I&#39;d probably encourage the tech community to think before clustering together in a single area and pricing everyone else out of it. That said, let&#39;s look at a few of the distinct areas and see what you&#39;re getting into if you hit them.</p>
<p><em>The West End</em></p>
<p>Ah the west end; this is where a lot of the more &quot;posh&quot; restaurants and bars are, Porter and Rye, The Finnieston, Ox &amp; Finch, Kelvingrove Cafe etc. It can be a bit pricey to plonk yourself in the &quot;nicer&quot; looking parts of this because it&#39;s probably also one of the wealthiest parts of town. It&#39;s surprisingly unconnected to the Subway - the nearest stops being a 20 minute walk across Kelvingrove park or west across to Kelvinhall or Partick.</p>
<p>I&#39;d probably not advise people to set up here, the extra cost isn&#39;t really worth it and you&#39;re better off being somewhere quieter nearby if you&#39;re wanting to hang out here a lot. If you&#39;re wanting to get the train regularly from Glasgow Central then you&#39;re best off between here and centre (The M8 is smack between the two locations, so somewhere near that) but if you&#39;re not fussed go further west around the Subway for cheaper digs and quieter evenings.</p>
<p>Similar to: The posher bits of Shoreditch</p>
<p><em>The East End</em></p>
<p>There is a lot of theatre around here and it&#39;s where the Barrowlands is. You can have a very good night out in this neck of the woods without spending anywhere near as much as you would in Finnieston. There is an occasional lost tourist looking for the Glasgow Museum of Modern Art or the Necropolis (both worth checking out by the way) but again you&#39;re better off being somewhere quieter nearby if you&#39;re wanting to hang out here a lot. Further east is lots of housing (and a good deli!) but the Subway doesn&#39;t reach out that far so you&#39;re either going to be looking at the mainline trains or buses to get back into town if you&#39;re in a hurry.</p>
<p>Similar to: North London, think zone 2/3 onwards if they had theatres</p>
<p><em>Southside</em></p>
<p>I&#39;m starting to think that this is where it&#39;s all happening but it&#39;s only just kicking off. The best bakery in the world is down here (Bakery47) and down in Strathbungo there are some interesting restaurant happenings. It&#39;s cheap and it&#39;s not sexy and it&#39;s also (mostly) not on the Subway but there are so many trains both in and out of Glasogw (plus NextBike + Bus) that this isn&#39;t a big deal. If you&#39;re going out in the East/West ends then it&#39;s a definite taxi home but that&#39;s only going to be a tenner so it&#39;s probably worth it.</p>
<p>Similar to: I don&#39;t think we can really draw comparisons, London is far too busy to have a place like this - even in the outskirts.</p>
<p><em>The Centre</em></p>
<p>I wouldn&#39;t try and live here, you won&#39;t be spending that much time here anyway outside of the occasional coffee shop visit, to go shopping or to catch a train; it&#39;s not worth it for the lack of sleep all the noise would cost you.</p>
<p>Similar to: Probably that bit of scrub between Farringdon and City, er yeah.</p>
<p><em>The North</em></p>
<p>I&#39;m sure I&#39;ll offend some people here but there is nothing there but housing, maybe if you&#39;re buying a house and don&#39;t mind a bit of a trek to get into town then I&#39;m sure this is fine. Think Borehamwood, look it up - you have time.</p>
<p><em>Recommendation</em></p>
<p>I&#39;d probably look at somewhere within 15 minutes walk of a Subway stop and call it a day. It&#39;s all good and Glasgow isn&#39;t that big. Location doesn&#39;t matter in the same way that it does in London because it doesn&#39;t take two hours to get everywhere. Read the info below and look at where all the things are on a map and work out what&#39;s going to work for you.</p>
<h1 id="getting-out-of-the-country">Getting out of the country</h1>
<p>The extra flight from Glasgow when going international can be a bit of a burden although it rarely increases the price of the ticket all that much. A return flight to London can often be had for less than £90 which is less then the train ticket in most cases and can get you in before the first meeting of the day.</p>
<p>The main international hub is sadly Amsterdam which means going with KLM and Air France if you&#39;re wanting fast convenience, I usually stick with BA however and go via London because for the longer flights the overhead is worth it. </p>
<p>The train down to London is about six hours and there is little phone coverage on the way down (plus the line is as shakey AF), don&#39;t expect to get much work done even in first class if you&#39;re prone to feeling a bit sick when you&#39;re being jolted around all over the place.</p>
<p>I have found that I have fewer reasons to visit London than I expected however, you probably will too. </p>
<h1 id="where-can-i-work-">Where can I work?</h1>
<p>Assuming you already have a job (if you don&#39;t then you&#39;re on your own, they do exist though) you probably want to find coffee shops and co-working spaces to hang in.</p>
<p>Let&#39;s start with coffee shops/etc.
-</p>
<p>*<a href="http://labespr.tumblr.com/">Laboratorio Espresso</a>*</p>
<p>Probably some of the best coffee in Glasgow, it isn&#39;t a large establishment but most of their custom comes from takeaway so nobody is going to worry if you&#39;re sat there with a laptop for an hour or two (especially if you share a table with somebody else). I usually perch on the bar so I can natter to the baristas/customers as they come by and can do this for an hour or two. No power but there is wifi.</p>
<p>Best: In the early morning when you still have battery left on the laptop.</p>
<p>*<a href="http://avenue.coffee/location/great-western-road/">Avenue GWR</a>*</p>
<p>A great place to work, plenty of space although they do get busy around lunchtime; I usually perch on the bar (this is a trend I know) but there are ample tables to set up shop on too and most people do just that.</p>
<p>Best: Either side of lunch is good, not lunch though</p>
<p>*<a href="http://www.spitfireespresso.com/">Spitfire Espresso</a>*</p>
<p>Amazing breakfasts, fun sound track (you&#39;ll get bored of it after a while though), wifi and lots of seating and tables and power. This is a good place to recharge for an hour with a bite to eat while you get some work done.</p>
<p>Best: Either at breakfast time or anytime in the afternoon; the lunchtime rush is strong here so don&#39;t be taking up those tables if you&#39;re not eating lunch.</p>
<p>*<a href="http://allthatissolid.co.uk/">All that is Coffee</a>*</p>
<p>Bright and airy artspace with a coffee shop on the ground floor. I usually tether to my phone for internet and I don&#39;t think there is power down here but there is a lot of space and it&#39;s a good place to hit up for a couple of hours when you&#39;re with other people because of the ample seating.</p>
<p>Across the road is *<a href="http://www.monocafebar.com/">Mono</a>*, a vegan restaurant/record shop where you can usually get a bit of work done with a beer or two for very little money but when it&#39;s busy it&#39;s very busy indeed and it&#39;s always worth bearing that in mind.</p>
<p>*<a href="http://www.stereocafebar.com/">Stereo</a>*</p>
<p>Vegetarian bar near central station - banging tunes and food and nobody minds you sitting there in the afternoon plugging away at work with a plate of nachos and a beer to hand (or diet coke, whatever floats your boat). </p>
<p>*<a href="http://theoldhairdressers.com/">The Old Hairdressers</a>*</p>
<p>Across the road from Stereo, often a good place to head if Stereo is too busy.</p>
<p>*<a href="http://www.stravaigin.co.uk/">Stravaigin</a>*</p>
<p>This is a restaurant with two floors, the ground floor is a less formal bar area and you can happily sit here with a glass of wine and a laptop and not get bothered for a couple of hours. Again lunchtime is busy and you know the drill - the lunch is great though so perhaps an hour of work before lunch and an hour or two after lunch and you&#39;re golden.</p>
<p>*<a href="http://www.alstonglasgow.co.uk/">Alston Bar &amp; Beef</a>*</p>
<p>It&#39;s a gin bar underneath Glasgow Central that has power and wifi and gin - you&#39;ll find me here towards the end of a day working in town when I need to recharge both mentally and electrically.</p>
<p>Co-working spaces
-</p>
<p>There are a few that I know of and they&#39;re fairly decent..</p>
<p>*<a href="http://www.thewhiskybond.co.uk/">The Whisky Bond</a>*</p>
<p>£200 a month for a fixed desk, £20 day rate, fast wifi etc. This is a place that advertised heavily and is pretty commercial. It&#39;s in &quot;the north&quot;, but is actually only 10 minutes from Cowcaddens Subway so isn&#39;t so bad to get to. There is little nearby but thankfully there is a cafe in the building and while their coffee isn&#39;t to my taste they do some great sandwiches. Convenient.</p>
<p>*<a href="https://rookieoven.com">Rookie Oven</a>*</p>
<p>Younger and fresher and at a cool location at the Fairfield Shipyard Offices just south of the river, this is also 10 minutes walk from a Subway station (Govan) and again there isn&#39;t that much around here. It&#39;s cheaper than the Whisky Bond (£175 monthly fixed desk) and for better or for worse they advertise as having a Sonos playing the very best 80s tunes but hey - did I mention it&#39;s at the Fairfield Shipyard Offices? They have a museum to visit! This is where the Glasgow Elixir/Erlang meet-up takes place so it&#39;s not a bad place to be.</p>
<p>*<a href="http://thinktankglasgow.com">Thinktank</a>*</p>
<p>Super professional city-centre co-working at £300 a desk. This is quieter and more serious than Rookie Oven and comes with free tea/coffee. Advantage of being in the centre is there are no shortage of lunch spots nearby and all the amenities (post offices/etc) are there so those little things can get done that need doing during the day.</p>
<p>What Rob Does
-</p>
<p>I personally choose to work from home at home - I know it&#39;s a novel idea but I make some of the best coffee in Glasgow and with far more interesting beans than you&#39;ll find in most shops. That said, occasionally I&#39;ll have a day out and I&#39;ll just hop between the various locations listed above as I see fit/when I get bored. It&#39;ll cost me about £30 to spend the whole day out of the house including lunch and coffee and it&#39;s generally worth it.</p>
<p>I&#39;ll often grab lunch at <em>Riverhill</em> while I&#39;m down there, Glasgow isn&#39;t big and it doesn&#39;t take long to get around it.</p>
<h1 id="the-basics-coffee-and-brunch-">The basics (Coffee and Brunch)</h1>
<p>I get it, you&#39;re coming from London where you have a gazillion options for brunching around and coming to Glasgow can be a bit of a culture shock on that front. Nowhere serves booze before 11am/12pm and  that 9am bloody mary just ain&#39;t gonna happen.</p>
<p>That said there are some great options for some really good breakfasts with coffee at the start of the day and your liver will thank you for not killing it with the London drinking culture. Some of these were covered above for &#39;working spaces&#39; but I&#39;ll cover them again with more detail here.</p>
<p>*<a href="http://papercupcoffeecompany.bigcartel.com/where">Papercup GWR</a>*</p>
<p>Tiny shop, small menu but AMAZING EATS. This is my favourite breakfast in Glasgow and I love coming here. Some of the filter coffee is <em>great</em> - get here early if you don&#39;t want an awkward wait for a table. No booze.</p>
<p>*<a href="http://papercupcoffeecompany.bigcartel.com/where">Papercup High Street</a>*</p>
<p>Bigger version of the above with a slightly different menu and a different coffee set-up. I&#39;ve not had the espresso here yet as they only opened recently but they&#39;re rocking an EK43 so it&#39;s probably quite good. No booze.</p>
<p>*<a href="http://avenue.coffee/location/byres-road/">Avenue Byres Road</a>*</p>
<p>Weekends will see you a good fry up here alongside some pretty decent coffee, gerronit. No Booze.</p>
<p>*<a href="http://www.riverhillcafe.com/west-nile.htm">Riverhill West Nile Street</a>*</p>
<p>Brunchy lunchy, they do a bone marrow bloody mary and some damned good breakfasts to boot. Coffee is from the local roastery Dear Green and while the espresso isn&#39;t usually to my tastes you can order a flat white and be happy with what you get. But you&#39;re here for the bloody mary anyway aren&#39;t you?</p>
<p>*<a href="http://www.spitfireespresso.com/">Spitfire Espresso</a>*</p>
<p>Eggs and eggs and fry ups and eggs, this is the stuff of dreams when you just need some stodge to get over that hangover. Espresso is a very safe medium roast and I prefer it in milk. OH GOD THOSE FRY UPS. No Booze.</p>
<p>*<a href="http://www.hutchesonsglasgow.com">Hutchesons Glasgow</a>*</p>
<p>Posh breakfast or brunch - the latter comes with bubbles and this is definitely a place to head to when you want something a bit more special.</p>
<p>*<a href="http://13thnote.co.uk/">Thirteenth Note</a>*</p>
<p>Vegetarian breakfast :) Booze once the law allows it..</p>
<p>*<a href="http://www.cafegandolfi.com/">Cafe Gandolfi</a>*</p>
<p>I&#39;ve been here for a dinner date and it was reeet good. Holy crap though if the breakfast doesn&#39;t completely blow the socks off the East End; huge variety including vegetarian options and I assume given they have a license that at some point towards lunchtime the booze will start flowing.</p>
<h1 id="date-night-eating-boozing">Date night - Eating/Boozing</h1>
<p>Okay most of these are in the West End, like I said above that&#39;s just where this stuff is clustered. Some of these places are owned by larger companies or by the same people - you can look this up yourself if you&#39;re bothered. The G1 group own a lot of things in Glasgow and we try to avoid anything they have their grubby mitts on.</p>
<p>*<a href="http://www.oxandfinch.com">Ox and Finch</a>*</p>
<p>Some of the best foods; classic western stuff with an occasional twist. Large vegetarian menu as well as a non-patronising children&#39;s menu make this a pretty great place to bring an inclusive party.</p>
<p>*<a href="http://www.thefinniestonbar.com/">The Finnieston</a>*</p>
<p>Seafood focused restaurant with a fairly decent cocktail bar which you can go to even if you&#39;re not dining (and a lot of people do!). It gets crowded in the evenings but don&#39;t let that put you off ordering a couple of good drinks to stand around and natter with.</p>
<p>*<a href="http://www.porterandrye.com/">Porter &amp; Rye</a>*</p>
<p>Sometimes the steak here is better than some of the best I&#39;ve had from Hawksmoor, it&#39;s all dry-aged in-house and they do some stonking rye-based cocktails (as well as other classics). I love this place and I love their menu and I often treat myself to a solo-dinner here when I&#39;m feeling blue.</p>
<p>*<a href="http://www.kelvingrovecafe.com/">Kelvingrove Cafe</a>*</p>
<p>Probably the best cocktails in Glasgow, nice long bar to sit on if you&#39;re by yourself. Best off reserving a table if you&#39;re coming with a party - they do food too.</p>
<p>*<a href="http://www.alstonglasgow.co.uk/">Alston Bar &amp; Beef</a>*</p>
<p>Second best steak in Glasgow and SO MUCH GIN TO CHOOSE FROM. A few barrel aged cocktails too, definitely a great place to come if you&#39;re in the area.</p>
<p>*<a href="http://www.stravaigin.co.uk/">Stravaigin</a>*</p>
<p>Posh food downstairs in the basement, more rustic food upstairs and it&#39;s all great and all local. I&#39;d say it has an Indian/Asian theme going for it as most of the good stuff is curry-based but it&#39;s hard to pin it down as the ingredients are locally sourced and black pudding and haggis aren&#39;t exactly asian fare...</p>
<h1 id="some-other-cool-stuff">Some other cool stuff</h1>
<p>*<a href="http://www.bakery47.com/">Bakery47</a>*</p>
<p>Mostly baking for catering, the owners Sam and Anna open some days of the week (and usually post a picture of their opening hours on Instagram each week). </p>
<p>Usually they&#39;ll open shop on Sunday morning at 9am with a rotating guest barista (All Started Here/Back to Black/Fun in a cup/Dear Green) serving coffee and stay open until they&#39;re sold out; a process that usually takes about three hours.</p>
<p>Get there at 9am for the best croissants you&#39;re going to get probably in the UK, and grab a loaf of bread to take home for the week ahead. Weep because it&#39;s going to be another week until you get to come here again.</p>
<p>*<a href="http://www.ranjitskitchen.com">Ranjit&#39;s Kitchen</a>*</p>
<p>Homemade punjabi food, super busy, super affordable, south of the river. I don&#39;t need to say anything else about this.</p>
<h1 id="getting-around">Getting around</h1>
<p>The *<a href="http://www.spt.co.uk/subway/">Subway</a>* will do 90% of the job for you, it runs in a circle through most of the neighbourhoods that you&#39;ll need access to on a day to day basis and is affordable as it&#39;s a flat day rate (£3.4 at time of writing) once you&#39;ve used it twice in one day.</p>
<p>That said, it&#39;s not open on Sunday mornings or evenings, public holidays tend to be an issue as well and if you want to get somewhere it doesn&#39;t go you&#39;ll need to find other options.</p>
<p>*<a href="http://www.nextbike.co.uk/en/glasgow/">Nextbike</a>* is our equivalent to the Boris Bike - they&#39;re lighter and more balanced, cheaper and you can download an app to your phone that lets you pay by the bike (you can press the right buttons on your walk to the bike stand and know which bike is yours before you even get there). There is an annual rate available if this is something you&#39;re going to use a lot. This is how I get to the Bakery on Sunday mornings.</p>
<p><em>The buses</em> are frustration incarnate, exact change required, ran by various different companies and who even knows how much it&#39;s going to cost in advance without being the kind of person who looks that up and counts out the right money in advance. One day they&#39;ll upgrade to contactless payment but until then I&#39;m going to cary on relying on the bikes and subway.</p>
<p><em>Taxi</em>s are cheap and plentiful from the town centre, but I mostly only use them once it gets late and I can&#39;t be bothered walking home. It&#39;s cheaper if you call private hire</p>
<p>You only need a <em>car</em> if you&#39;re going to be doing your large weekly shop at one of the large out of town supermarkets or wanting to do tourism outside of Glasgow without relying on public transport.</p>
<h1 id="the-music">The Music</h1>
<p>Scottish music is amazing, it must be the weather. Frightened Rabbit, Twilight Sad, Belle and Sebastien, James Yorkston, Glasvegas, Mogwai, etc. (Also did you know Mark Knopfler was born in Glasgow? He was! Look it up!</p>
<p>Anyway we have some great music venues (some of them are already listed) and there is always something on - I don&#39;t need to list them out, just go look at a gig guide already..</p>
<h1 id="the-arts">The Arts</h1>
<p>I have a friend who is well into theatre and I&#39;ve been to quite a few of the productions in the east end, there is some fantastic and weird stuff happening in the art scene in Glasgow and it&#39;s fun to play lucky dip with the theatre productions that are on here.</p>
<p>My favourite experience so far has been in the (sadly now closed) Arches, lying in bed with a complete stranger and being asked to share some very intimate things as part of a performance on sexuality; did I mention fantastic and weird?</p>
<h1 id="getting-out-of-glasgow">Getting out of Glasgow</h1>
<p>One of the greatest things until last then; </p>
<h2 id="this-is-what-awaits-you-a-mere-30-minute-train-ride-out-of-glasgow">This is what awaits you a mere 30 minute train ride out of Glasgow</h2>
<img src="/img/lomond.jpg" width="400px" />

<h2 id="this-is-what-awaits-you-30-minutes-train-30-minutes-boat-out-of-glasgow">This is what awaits you 30 minutes train + 30 minutes boat out of Glasgow</h2>
<img src="/img/arran.jpg" width="400px" />

<h2 id="this-is-what-awaits-you-in-autumn">This is what awaits you in Autumn</h2>
<img src="/img/autumn.jpg" width="400px" />

<h2 id="and-over-in-edinburgh">And over in Edinburgh</h2>
<img src="/img/edinburgh.jpg" width="400px" />

<h1 id="summary">Summary</h1>
<p>Sod England, it&#39;s all down hill from here; come and make Scotland great again, it&#39;s a cheaper place to do business, full of really great people and amazing ways to relax the brain (whisky!). It&#39;s going to take a lot less effort to make this the kind of open and liberal place we want to live in because we&#39;re already 90% of the way there; let&#39;s do this together.</p>
<p>I&#39;ll make you some coffee at Cafe Ashton once you&#39;re in town. It&#39;s a promise.</p>
]]></description><link>http://codeofrob.com/entries/a-londoners-guide-to-emigrating-to-glasgow.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-londoners-guide-to-emigrating-to-glasgow.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 27 Jun 2016 09:30:00 GMT</pubDate></item><item><title><![CDATA[Why you can't be a good .NET developer]]></title><description><![CDATA[<p>I was on Twitter today and I saw this tweet by <a href="https://twitter.com/ICooper/">Ian Cooper</a></p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/jbogard">@jbogard</a> Agreed, it&#39;s crazy. The self-loathing mystifies me. All web C# use multiple languages (SQL and JS?) <a href="https://twitter.com/Adron">@Adron</a> <a href="https://twitter.com/aliostad">@aliostad</a> <a href="https://twitter.com/randompunter">@randompunter</a></p>&mdash; Ian Cooper (@ICooper) <a href="https://twitter.com/ICooper/status/742758275133890560">June 14, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>My first reaction was simply to laugh, because the idea of self-loathing .NET developers is a funny one, my second reaction was to say something pithy on Twitter and then I remembered I had a blog which <em>somehow</em> despite my best efforts is still running for some reason &quot;in the cloud&quot; and thought I&#39;d disagree here instead.</p>
<h1 id="it-s-not-self-loathing">It&#39;s not self loathing</h1>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/jbogard">@jbogard</a> The worst part of this is the old belief that I have to classify as an X developer and join or leave <a href="https://twitter.com/Adron">@Adron</a> <a href="https://twitter.com/aliostad">@aliostad</a> <a href="https://twitter.com/randompunter">@randompunter</a></p>&mdash; Ian Cooper (@ICooper) <a href="https://twitter.com/ICooper/status/742756504642674688">June 14, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>There is a reason this mentality exists and it isn&#39;t one of self loathing. The reason why people &quot;leave&quot; .NET is because <em>it is impossible to be a good .NET developer</em>. To work in a development shop with a team is to continually cater for the lowest common denominator of that team and the vast majority of software shops using .NET have a whole lot of lowest common denominator to choose their bad development decisions for.</p>
<p>Tangible examples? I remember well the insistence of one boss that we use TFS because some developers would find it hard to use git. I remember the steadfast committal to ASP.NET web forms because the &quot;new concepts&quot; in ASP.NET MVC were going to take too long for the team to become productive in. There is now this furore over .NET core and the new thing in the tiny 0.001% of people that care are whether they persist in using Windows or switch to more productive environments. Of course <a href="https://twitter.com/aliostad">@aliostad</a> gets it right here and points out that the primary &quot;<em>Important Thing</em>&quot; should be a focus on <a href="http://byterot.blogspot.co.uk/2016/06/after-all-it-might-not-matter-commentary-status-of-dotnet-dotnetcore-csharp-oss-fsharp-dnx.html">functional programming in languages like F#</a> and of course the reason it doesn&#39;t happen is because &quot;it&#39;s too hard for most people in our team&quot;.</p>
<p>It&#39;ll not happen because as long as you&#39;re working on a platform that is primarily used by derpy enterprise shops, you will continually be held back because those derpy enteprise shops are continually be held back by the derpy enterprise developers that work in the derpy enterprise shops.</p>
<p>It isn&#39;t self loathing, it&#39;s self preservation and an eventual realisation that you can&#39;t actually progress so long as you&#39;re being held back by bad decisions made to cater for the slow and the stupid. Self loathing is just an intermediate stage that people go through while they still believe they can make an impact on the environment around them by caring and shouting into the void to enact tiny changes that help nobody.</p>
<p>The easiest way to progress is always to jump ship and leave, that&#39;s why people do it; moving to a community of people who have seen how to be more effective and productive and leaving the old one behind. In my own case it has been to move to a community that barely exists because the team has to be pretty much self reliant and there is no room for lowest common denominators and long meetings over whether you should use semi-colons or not.</p>
<p><em>This</em> is why you can&#39;t be a good .NET developer, sooner or later the frustration sets in and you go and do something better. The average ability and desire for something better just keeps on plummetting whilst Microsoft try to chase the brain drain by casting little nuggets of mediocrity at the people left behind scrabbling in the mud. </p>
]]></description><link>http://codeofrob.com/entries/why-you-cant-be-a-good-.net-developer.html</link><guid isPermaLink="true">http://codeofrob.com/entries/why-you-cant-be-a-good-.net-developer.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 14 Jun 2016 09:30:00 GMT</pubDate></item><item><title><![CDATA[Erlang and Make - Okay together]]></title><description><![CDATA[<p>We don&#39;t tread the same path as most Erlangers, as <a href="/entries/the-ashton-disinterest-curve---erlang.html">mentioned</a> having been through more than a few of the standard build systems in that ecosystem we&#39;ve settled on our own (the original hard work done by somebody else). All on top of a <a href="/entries/erlang---getting-started-with-vir.html">pile of bash</a> that organically came from real world production use of Erlang.</p>
<h1 id="so-why-make-">So why Make?</h1>
<p>Well firstly we already know it; our other language other than Erlang at work is C (okay and (<em>spit</em>) JavaScript, oky three languages - and Bash... etc). Secondly if you look at an Erlang project and compilation of that Erlang project you&#39;ll see that we have a bunch of files that need compiling into another format (mostly independent to each other), let&#39;s have a wee look at that.</p>
<pre><code>src/<span class="variable">%.</span>erl       -&gt;    ebin/<span class="variable">%.</span>beam
src/<span class="variable">%.</span>app.src   -&gt;    ebin/<span class="variable">%.</span>app
src/<span class="variable">%.</span>xrl       -&gt;    ebin/<span class="variable">%.</span>beam
src/<span class="variable">%.</span>yrl       -&gt;    ebin/<span class="variable">%.</span>beam
priv/mibs/<span class="variable">%.</span>bin -&gt;    mins/<span class="variable">%.</span>mib</code></pre><p>Etc.</p>
<p>If only there was a tool which allowed you to declaratively wildcard a bunch of inputs to a bunch of outputs and use timestamps to determine whether individual files needed re-compiling again. Hmmmmm.</p>
<p>So yeah, this is our fork of <a href="http://github.com/id3as/erl-mk.git">erl-mk</a>, although in a few days this will be renamed to <a href="http://github.com/id3as/id3as.mk">id3as.mk</a> so check which link doesn&#39;t 404 and this will see you right.</p>
<h1 id="conventions">Conventions</h1>
<p>There is a standard structure to an Erlang project, and it looks like this</p>
<pre><code class="language-bash">    relx.config
    src/%.erl
    src/%.app.src
    release-files/sys.config
    release-files/*.anything.<span class="keyword">else</span>
    include/%.hrl</code></pre>
<p>We can only get away with using a standard one-size-fits-all Makefile if you conform to some convention and given that there is already a convention to Erlang projects this is the one that we are using. Additionally you can also have</p>
<pre><code class="language-bash">    apps/&lt;app-name&gt;/&lt;the same as above&gt;</code></pre>
<p>To have multiple apps in the same project, and</p>
<pre><code class="language-bash">    deps/&lt;dep-name&gt;/&lt;the same as above&gt;</code></pre>
<p>To rely on other Erlang projects and their source code - more on that in a little bit.</p>
<h1 id="using-id3as-mk">Using id3as.mk</h1>
<p>To configure and use id3as.mk, we use an entry point Makefile to set up some variables and download id3as.mk - this would usually be called &quot;Makefile&quot; or &quot;makefile&quot; and sit in the top level of the project (vir will generate this if you&#39;re using it).</p>
<pre><code class="language-cmake">    DEPS_DIR = $(addsuffix /deps, $(realpath .))
    ERL_LIBS = $(DEPS_DIR):$(realpath apps)

    <span class="keyword">export</span> DEPS_DIR
    <span class="keyword">export</span> ERL_LIBS

    <span class="keyword">export</span> ERLCFLAGS = +debug_info +warn_export_vars +warn_shadow_vars +warn_obsolete_guard +'{lager_truncation_size, <span class="number">10240</span>}'
    <span class="keyword">export</span> ERLMIBFLAGS =

    DEPS = lager cowboy gproc jsx

    dep_lager = git://github.com/basho/lager.git <span class="number">2.0</span>.<span class="number">1</span>
    dep_cowboy = git@github.com:extend/cowboy.git master
    dep_gproc = git://github.com/esl/gproc.git <span class="number">0.2</span>.<span class="number">12</span>
    dep_jsx = git://github.com/talentdeficit/jsx.git master

    id3as.mk:
      @wget --no-cache -nv -O $@ 'https://raw.github.com/id3as/id3as.mk/master/id3as.mk' || rm -f $@

    -<span class="keyword">include</span> id3as.mk</code></pre>
<p>I&#39;m not a huge fan of using this for dependency downloads (I&#39;d prefer a bash script) but it&#39;s just a single operation at the start to download all dependencies to the DEPS_DIR and then build is just standard Make. You&#39;d still need to specify which dependencies you had because the Makefile uses this to build up a dependency tree and only build each dependency once (in the right order).</p>
<p>Anyway, it&#39;s self explanatory - you&#39;ll see that in Erlang we haven&#39;t got a package manager (although some misguided but well meaning folk are trying to change that), and we just download source into a deps folder and build that ourselves. (No, they&#39;re not submodules, <em>ew</em>)</p>
<p>For each dep, id3as.mk checks if there is a Makefile present (in which case it&#39;ll run that), checks if there is a rebar.config present (in which case it&#39;ll run rebar) and falls back to re-executing itself in the dep dir. For all the id3as.mk based dependencies it&#39;ll honour timestamps all the way down. Rebar is a little more dumb and once you&#39;re in the world of rebar it can be a little slow as it insists on recursing over deps multiple times during a single build (boo, hiss).</p>
<p>I&#39;m a big fan of having dep source available - it means if you build up a tags file for your editor you can jump into the source code of even the third party dependencies you&#39;re using and see how they work (what better documentation than the actual code okay just joking devs we should all be writing better documentation).</p>
<h1 id="make-commands">Make commands</h1>
<ul>
<li>&quot;make get-deps&quot; - initial download of deps</li>
<li>&quot;make&quot; - build <em>everything</em></li>
<li>&quot;make apps&quot; - just build the apps</li>
<li>&quot;make clean&quot; - clean up our app</li>
<li>&quot;make clean-all&quot; - ruthlessly gut everything</li>
<li>&quot;make apps/[foo]&quot; - just build the foo app</li>
<li>&quot;make deps&quot; - just build the deps</li>
<li>&quot;make deps/[foo]&quot; - just build that dep (useful if you&#39;re debugging a third party dep)</li>
<li>&quot;make rel&quot; - make a release</li>
</ul>
<p>Neato. Everything is just timestamp checking and then for bonus points</p>
<ul>
<li>make -j <anything from above>   - DO IT IN PARALLEL</li>
</ul>
<p>Seeing as most of these steps and most of the erl/beams are independent of each other a build is much faster if you run it in parallel.</p>
<h1 id="on-package-managers">On package managers</h1>
<p>I often get a few eyebrows raised when I say we don&#39;t need one of these - so the next entry will write about why they&#39;re unnecessary (in any of the incarnations so far) and why we should do without.</p>
]]></description><link>http://codeofrob.com/entries/erlang-and-make---okay-together.html</link><guid isPermaLink="true">http://codeofrob.com/entries/erlang-and-make---okay-together.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 24 Mar 2015 08:30:00 GMT</pubDate></item><item><title><![CDATA[Erlang - Getting started with vir]]></title><description><![CDATA[<p><a href="http://github.com/robashton/vir">Vir</a> is a bunching together of various scripts we had lying around our projects written in a combination of Bash and Erlang to manage the execution/release/etc process for our applications. It does what we need to do and stops about there - I suspect the best way of using Vir is to either use it as it is or fork it for your own organisation rather than trying to make it help everybody.</p>
<p>The easiest way to get started with vir is to clone it to ~/.vir and add this folder to the path, but it&#39;ll work if you just add it to a GH repo and run it locally to so... whatever - do what you want it&#39;s just a bash script.</p>
<p>Anyway, running vir should give us a list of possible commands, for now we&#39;ll just create an empty web application in a folder, so do something like the below..</p>
<pre><code>mkdir awesomeapp
cd awesomeapp
git init
vir init -t web awesome
git commit <span class="keyword">...</span></code></pre><p>This creates an application called &quot;<em>awesome</em>&quot; (and builds it) based off the <em>web</em> and gives us a folder structure that looks similar to below:</p>
<p>As mentioned in a previous blog entry, this is at immediate glance a lot to digest, but we can go through it a little at a time and see just what has been created for us.</p>
<p><strong>Config</strong></p>
<pre><code><span class="title">apps</span>/awesome/release-files/sys.config
<span class="title">apps</span>/awesome/src/awesome_config.erl</code></pre><p>sys.config is a standalone file containing various key-value pairs of config and awesome_config is a wrapper that provides an API to read that file. Not much to see here.</p>
<p><strong>Application startup</strong></p>
<pre><code><span class="title">apps</span>/awesome/src/awesome_app.erl
<span class="title">apps</span>/awesome/src/awesome_sup.erl</code></pre><p>An application requires something that implements the OTP Behaviour &quot;Application&quot; (<em>awesome_app.erl</em>), and if I want child processes within the structure I&#39;ll need a supervisor to manager them, that&#39;s (<em>awesome_sup.erl</em>).</p>
<p><strong>A web application</strong></p>
<pre><code>apps/awesome/src/<span class="filename">awesome_cowboy.erl</code></pre><p>This is just a OTP genserver that uses Cowboy (one of our dependencies) to create a simple http listener.</p>
<p><strong>Release artifacts</strong></p>
<pre><code><span class="title">deployment</span>/build_no
<span class="title">deployment</span>/major_ver
<span class="title">deployment</span>/minor_ver</code></pre><p>This is a cheap way of bumping version for the application during a release cycle.</p>
<p><strong>Dependencies</strong></p>
<pre><code><span class="title">deps</span>/cowboy/
<span class="title">deps</span>/cowlib/
<span class="title">deps</span>/edown/
<span class="title">deps</span>/gen_leader/
<span class="title">deps</span>/goldrush/
<span class="title">deps</span>/gproc/
<span class="title">deps</span>/jsx/
<span class="title">deps</span>/lager/
<span class="title">deps</span>/ranch/</code></pre><p>Lots of folders containing lots more of the above. They were cloned and brought in because the Makefile contains a list of dependencies.</p>
<p>In reality we&#39;re only explicitly bringing in <em>cowboy</em>, <em>gproc</em>, <em>jsx</em> and <em>lager</em> and the others are further dependencies of these. Because Erlang operates in a single global namespace you can&#39;t do explicit imports ala NodeJS and have multiple versions of things in the application.</p>
<p>It doesn&#39;t matter too much anyway because dependency applications often spin up a fleet of processes on start-up rather than simply operating as library code, so you wouldn&#39;t want more than one version of an application running within a project.</p>
<p><strong>Various Manifests</strong></p>
<pre><code>apps/awesome/relx<span class="variable">.config</span>
apps/awesome/src/awesome<span class="variable">.app</span><span class="variable">.src</span></code></pre><p><em>relx.config</em> is a manifest specifying how to do a release with all the appropriate files, and <em>awesome.app.src</em> tells the boot system what state our application needs to be in before it can be started.</p>
<p><strong>A Makefile</strong></p>
<pre><code><span class="attribute">Makefile</code></pre><p>Yup, we use make.</p>
<h1 id="using-it">Using it</h1>
<p>So how do we use this? Well the bash script we just ran probably did all this already but loosely our general dev cycle will be</p>
<pre><code><span class="title">make</span> -j apps         <span class="comment">#  "make in parallel, the apps only, ignore the deps"</span>
vir run awesome      <span class="comment">#  "vir, run the app please"</span></code></pre><p>If we add new dependencies, then we&#39;ll need to run the following command after a build before running</p>
<pre><code>vir boot             # <span class="keyword">Generate</span> bootscripts <span class="keyword">for</span> each application based <span class="keyword">on</span> the manifests</code></pre><p>So what do we have when it starts up? Well, let&#39;s look at the logs first</p>
<pre><code>Erlang/OTP <span class="number">17</span> [erts-<span class="number">6.1</span>] [source] [<span class="number">64</span>-bit] [smp:<span class="number">4</span>:<span class="number">4</span>] [async-threads:<span class="number">10</span>] [kernel-poll:<span class="constant">false</span>]

<span class="number">13</span>:<span class="number">08</span>:<span class="number">49.978</span> [info] Application lager started <span class="function_start"><span class="keyword">on</span> <span class="title">node</span></span> nonode@nohost
<span class="number">13</span>:<span class="number">08</span>:<span class="number">49.979</span> [info] Application ranch started <span class="function_start"><span class="keyword">on</span> <span class="title">node</span></span> nonode@nohost
<span class="number">13</span>:<span class="number">08</span>:<span class="number">49.979</span> [info] Application crypto started <span class="function_start"><span class="keyword">on</span> <span class="title">node</span></span> nonode@nohost
<span class="number">13</span>:<span class="number">08</span>:<span class="number">49.980</span> [info] Application cowlib started <span class="function_start"><span class="keyword">on</span> <span class="title">node</span></span> nonode@nohost
<span class="number">13</span>:<span class="number">08</span>:<span class="number">49.988</span> [info] Application cowboy started <span class="function_start"><span class="keyword">on</span> <span class="title">node</span></span> nonode@nohost
<span class="number">13</span>:<span class="number">08</span>:<span class="number">49.998</span> [info] Application gproc started <span class="function_start"><span class="keyword">on</span> <span class="title">node</span></span> nonode@nohost
<span class="number">13</span>:<span class="number">08</span>:<span class="number">49.998</span> [info] Application shared started <span class="function_start"><span class="keyword">on</span> <span class="title">node</span></span> nonode@nohost
Mode dev <span class="keyword">not</span> found
<span class="number">13</span>:<span class="number">08</span>:<span class="number">50.024</span> [info] Application awesome started <span class="function_start"><span class="keyword">on</span> <span class="title">node</span></span> nonode@nohost
Eshell V6<span class="number">.1</span>  (abort <span class="keyword">with</span> ^G)</code></pre><p>Neato, we see all the applications specified in <em>awesome.app.src</em> started up. (Mode dev isn&#39;t found because we haven&#39;t got one and that&#39;s the default mode)</p>
<p>This is awesome.app.src for reference.</p>
<pre><code><span class="cell">{application, awesome,
 [
  {description, ""}</span>,
  <span class="cell">{vsn, "<span class="number">1.0</span><span class="number">.0</span>"}</span>,
  <span class="cell">{registered, []}</span>,
  <span class="cell">{modules, []}</span>,
  <span class="cell">{included_applications, []}</span>,
  <span class="cell">{applications,
   [
    kernel,
    jsx,
    stdlib,
    lager,
    cowboy,
    gproc,
    shared
   ]}</span>,
  <span class="cell">{mod, { awesome_app, []}</span>},
  <span class="cell">{env, []}</span>
  ]}.</code></pre><p>See what I mean about dependencies not simply being a pile of code, that list of folders we have in deps contain actual applications that are started up before awesome_app itself.</p>
<p>Is it working?</p>
<pre><code>curl http://localhost:3000/index.html
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
  <span class="tag">&lt;<span class="title">head</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">head</span>&gt;</span>
  <span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span></code></pre><p>Yup.</p>
<h1 id="next-up">Next up</h1>
<p>I&#39;ll look at our Makefile and how we handle dependencies, and explain a bit more our decisions around that.</p>
]]></description><link>http://codeofrob.com/entries/erlang---getting-started-with-vir.html</link><guid isPermaLink="true">http://codeofrob.com/entries/erlang---getting-started-with-vir.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 19 Mar 2015 09:30:00 GMT</pubDate></item><item><title><![CDATA[Erlang - How we do it]]></title><description><![CDATA[<p>Having <a href="/entries/the-ashton-disinterest-curve---c.html">established</a> that I <a href="/entries/the-ashton-disinterest-curve---javascript-and-node.html">apparently</a> <a href="/entries/the-ashton-disinterest-curve---clojure.html">hate</a> <a href="/entries/the-ashton-disinterest-curve---erlang.html">everything</a>, let&#39;s get a bit more constructive and go over how at the company I work at, we do Erlang and do Erlang effectively.</p>
<p>Let&#39;s start off with a little history first though to build context for this series... I&#39;ll use &quot;we&quot; a lot, but what I really mean is &quot;me and my current understanding of our way&quot;.</p>
<h1 id="where-we-are">Where we are</h1>
<p>There were a couple of .NET developers, and they had need to build a distributed system and they looked at .NET and went &quot;hell no, let&#39;s do that little bit in Erlang&quot; and then a little bit later &quot;Oh sod it, let&#39;s do everyting in Erlang this is actually great&quot;. Lots of mistakes were made over the next few years and they were learned from as they were made. Eventually a developer called Rob (me) joined the team and most of the important mistakes had already been made and a lot of decisions had been made about how best to be effective at Erlang development.</p>
<p>We&#39;ve been through our own custom build systems/runners, to using <a href="https://github.com/rebar/rebar">Rebar</a>, to using fairly <a href="https://github.com/ninenines/erlang.mk">poorly written</a> Makefiles to using <a href="https://github.com/fenollp/erl-mk">reasonably written</a> Makefiles to just forking the best one and making it <a href="https://github.com/id3as/erl-mk">our own</a>. We&#39;ve been through the &quot;let&#39;s make everything a gen server&quot; to &quot;why do we need gen servers anyway&quot; to &quot;okay, here is the happy medium&quot;. We&#39;ve had bash scripts lying around a bunch of projects for automation purposes that have diverged from each other, converged again and been merged into a &quot;<a href="https://github.com/robashton/vir">single tool to rule them all</a>&quot;. We have sensible ways to build up APIs between gen servers, between running applications and we have a common swiss army knife of a common library that every time I go to write Erlang without for personal stuff I wonder how on earth I ever got on without.</p>
<p>It&#39;s a pretty mature stack and because we own most of it outside of our basic dependencies we&#39;re not subject to the whims of third parties changing their minds about how projects should be written and managed. Leaning on a large platform like Erlang is relaxing because it has been around for a few decades and generally doesn&#39;t undergo massive shifts every year just because some hipster somewhere decides they don&#39;t like <em>that sort</em> of paren or semi-colon.</p>
<p>We&#39;re pretty much against package managers, binary dependencies or other opaque tooling that we can&#39;t understand and simply make our own. We&#39;ve learned the hard way that sometimes the best tools are the ones that we&#39;ve all been using since the dawn of time (Bash and Make) and slowly over time these ideas have converged and become crystalised as a standard set of tools we all understand and are happy with.</p>
<h1 id="a-series-then">A series then</h1>
<p>So we have these bash scripts and makefiles and our standard application structure and while we&#39;ve been using them for years in various forms we&#39;ve never really publicised that they&#39;re actually OSS on Github. We&#39;ve never talked about how to use them to build Erlang applications (new starters? Pair for half a year and you&#39;ll have it all down like second nature anyway).</p>
<p>Now that most of this has stabilised (for now), it&#39;s quite a good time to write a blog series about our workflow, how to bootstrap a new application, how to do builds and releases and best practises around gen servers and processes and APIs and inter-process communication. We&#39;re also heavy Docker users (for now) so I&#39;ll cover our loose workflow around how we use that for development etc.</p>
<p>On board? The next entry will be about bootstrapping an empty application.</p>
]]></description><link>http://codeofrob.com/entries/erlang---how-we-do-it.html</link><guid isPermaLink="true">http://codeofrob.com/entries/erlang---how-we-do-it.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 17 Mar 2015 09:30:00 GMT</pubDate></item><item><title><![CDATA[The Ashton Disinterest Curve - Erlang]]></title><description><![CDATA[<p>I&#39;ve complained about <a href="/entries/the-ashton-disinterest-curve---c.html">.NET</a> (nothing has changed by the way) and <a href="/entries/the-ashton-disinterest-curve---javascript-and-node.html">JS</a> (or here) and I&#39;ve been pretty nice about <a href="/entries/the-ashton-disinterest-curve---clojure.html">Clojure</a> (or so I thought) and I&#39;ve managed to delay doing anything about Erlang at all because reasons.</p>
<h1 id="erlang-mundane-brilliance">Erlang - mundane brilliance</h1>
<p>I&#39;m not passionate about Erlang; I&#39;ve never been passionate about Erlang and I&#39;ve never hated it either. Perhaps this explains why I&#39;m over a year into working with it professionally and I still don&#39;t feel the need to talk loudly about it one way or another. (That and I have a great team of colleagues, work remotely and build pretty awesome products that are actually being used by people - okay then).</p>
<p>Let&#39;s get something out of the way then, I&#39;m not an Erlang evangelist - I was even asked in a talk the other day what my three sentence elevator pitch for Erlang would be and I haven&#39;t got one. If you want to put in the effort to work in the Erlang ecosystem then the rewards will become apparent fast enough but trying to explain how exactly such an ugly language contributes positively in any way to our product quality/stability in a tidy soundbite just isn&#39;t something I&#39;m interested in doing.</p>
<h1 id="erlang-is-ugly">Erlang is Ugly</h1>
<p>Contrived bit of code I just wrote in the airport:</p>
<pre><code class="language-erlang">
    -module(greeter).

    -export([hello/2]).

    -record(state, {
        targets :: list(target_config())
      })

    init() -&gt;
      spawn_link(fun chat_loop/0).

    hello(Pid, Str, Names)
      case Names of
        [] -&gt;  ok;
        [ Head | Tail ] -&gt;
          Pid ! { hello, Str, Head },
          hello(Pid, Str, Names)
      end.

    chat_loop(State) -&gt;
      NewState = receive
        { hello, Str, Name } -&gt;
          Target = lookup_name(Name),
          Target:write(Str),
          State,
        { register, Name, Cfg } -&gt;
          register_name(State, Name, Cfg)
        after 1000
          housekeeping(State)
      end,
      chat_loop(NewState).

    register_name(State = #state { targets = Targets }, Name, Cfg) -&gt;
      State#state { targets = [ { Name, Cfg } | Targets ] }.
`</code></pre>
<p>Or whatever. This is all fairly standard code and certainly there is nothing unusual in here that you&#39;d not expect to see in any old module from around the place. This is probably about 5% of the syntax of Erlang and you can start to see why a lot of people start to pick up Erlang via the medium of &quot;Learn Erlang for Great Good&quot; or something similar and after a week of syntax lessons throw their arms in frustration and exclaim &quot;What on earth is the point?&quot; and either switch to Elixir or something even worse (okay it&#39;s relative) like NodeJs.</p>
<p>No <em>real</em> type system, no polymorphism, hilariously inconsistent APIs for processing lists, queues, dictionaries (even within the list API itself it&#39;s not consistent with the argument orders etc), no real way of doing function composition or guaranteeing purity in functions (which means guard clauses can only use built-ins) and what you really have is a way of writing locally &quot;pure&quot; code across imperative operations on networks and filesystems.</p>
<h1 id="erlang-has-moving-parts">Erlang has moving parts</h1>
<p>How do you do releases? How do you build your application? How do you test it? How do you run it? What do you need for all of this to work? A quick scan of an &quot;empty&quot; project built from scratch just now on my machine contains:</p>
<ul>
<li>Makefile (for building stuff)</li>
<li>Relx (for releasing stuff)</li>
<li>sys.config (for configuring stuff)</li>
<li>relx.config (for configuring the release)</li>
<li>foo_app.src (a manifest for the application)</li>
<li>foo_app.erl (the application entry point)</li>
<li>foo_web.erl (a gen server for spinning up the web process hierarchy)</li>
<li>foo_sup.erl (a supervisor for managing the process hierarchy)</li>
<li>foo_config.erl (a little wrapper for accessing sys.config)</li>
<li>a &#39;deps&#39; folder containing &quot;gproc (process utils), lager (logging), cowboy (web)</li>
</ul>
<p>And a few other bits. This is astonishingly daunting and no amount of &quot;just use rebar&quot; will ever make that easy. I&#39;m generally against scaffolding because it allows awkward design to survive but you almost <em>need</em> to scaffold the basic Erlang application somehow because of all the bits you need to just spin it up. Contrast that to a simple node project with its app.js. node_modules and ... oh wait you can pretty much write something useful from this point and <em>discover as you go</em> while still building something tangible that somebody might want to use.</p>
<p>Oh, and unlike Clojure there is no real REPL (stop saying erl is a REPL or like a REPL because it really is not a REPL and it offers none of the same experiences you&#39;d expect from a REPL and nobody does applications which can be bootstrapped easily via a REPL and there is very little tooling support for talking to this from your editor so really it&#39;s nothing like Clojure omg stop you guys)</p>
<p>At this point the folk in the Erlang community reading this will be thinking &quot;but it&#39;s not quite like that - once you have a workflow it&#39;s all sensible enough&quot; or &quot;You don&#39;t need most of those things for an application really&quot; or &quot;why would you want to do things in a REPL anyway?&quot; or all sorts of self-deluding statements because they&#39;ve been blinded by some of the better things in Erlang and things like working and profitable products for years and that&#39;s sort of okay but in a way also really frustrating because it seems that after a few years of Erlang development Erlangers seem to forget just how awful some of the tools they&#39;re working with actually are.</p>
<h1 id="erlang-s-oss-is-moving-sands">Erlang&#39;s OSS is moving sands</h1>
<p>Every few months we decide we need to make http calls from our applications and we have to do the dance of working out which library is still being maintained or compiles in the current version of Erlang, ibrowse caused us issues until we switched to lhttpc but unicode and R17 really pissed us off and then lhttpc was deprecated so we looked at gun (which uses maps) but actually shotgun is a better wrapper but there is also fusco except that&#39;s not ready yet yes it&#39;s 2015 and we don&#39;t have a consensus on a http client. (Actually Gun is pretty neat and there are reasons to be re-writing http clients with the advent of http2 etc but okay this is a little frustrating and a small example of the ecosystem).</p>
<p>The language itself is still evolving and some libraries just stop working between releases, there aren&#39;t too many active users of most Erlang libs once you get out of the basic world of http and databases and you will find bugs and you&#39;ll have to fix those bugs and you&#39;ll have to invest time in doing that if you want to be effective in this world - so you&#39;ll need to be a competent Erlang developer to build an Erlang application but is that such a bad thing given that 90% of developers working in their chosen language are incompetent and at least we have this as a safeguard to keep that sort of person out? I really don&#39;t know I&#39;m just thinking out loud).</p>
<p>Oh - and every month I find another Erlang library that hasn&#39;t written their manifest properly so doesn&#39;t work in the releases that we build using relx and we&#39;re relying on dangling forks or commits of quite a few projects because nobody seems to be around to take our call for fixing them or merging our fixes.</p>
<p>It&#39;s not brilliant but...</p>
<h1 id="erlang-does-seem-to-work">Erlang does seem to work</h1>
<p>It doesn&#39;t just work, it excels. Once you&#39;ve fought and made peace with all of the above (and more) and you&#39;re using the bash scripts and makefiles that the rest of your company is using for automating the build/test/release process and you&#39;ve spent the time learning how all of it fits together then you can spend some time looking at supervision trees and process ownership and you realise that it&#39;s pretty hard to crash an Erlang application and leave anything open or dangling or in a weird state if you reasoned about your supervision structure at all.</p>
<p>OTP is pure wonder (gen_server, supervisors, applications etc) and the libraries that ship wth Erlang using the process model and underlying abstractions are battle-tested, stable and well thought out.</p>
<p>Consider that I can write the following code anywhere in any old gen server and if it fails (IE, write doesn&#39;t return &#39;ok&#39;, the entire process tree crashes and subject to the rules in the supervisor either will be restarted, kill siblings or parents or pass the error up automatically to the next supervision level and we&#39;ll have a log about all of this including the current state of the offending process and there won&#39;t be a dangling open handle to the file and a whole bunch of other useful &quot;none-artifacts&quot; that you&#39;d easily overlook if you hadn&#39;t put in the time to avoid them.</p>
<pre><code><span class="setting">ok = <span class="value">file:write(Handle, Bytes).</span></span></code></pre><p>Not having to dance around exceptional error cases in most file or networking scenarios and writing your code on top of these built-ins means you can spend more time writing the code you need to write for the feature itself (Okay admittedly if you&#39;ve gotten around the syntax issues). This philosophy and things like it hold true across the various libraries we use from across the ecosystem and mean we don&#39;t tend to get too many support calls at 2am because web servers have disappeared because something is locked, crashed, down permanently, corrupt or whatever.</p>
<p>Easy inter process communication means it is easy to build self-contained little workers around little balls of state and not worry about concurrency (most of the time) because everything is safe if you&#39;re following the happy path. Generally it also means that shifting cpu heavy stuff around our stack is easy because we can always take one of these processes and spin it up somewhere else. I mentioned that in Clojure we ended up with Actors in core.async but without error handling or safe handle management and here is the answer neatly packaged for us in a platform that has been around and battle-tested for 10x as long. Neat.</p>
<h1 id="but-what-about-elixir">But what about Elixir</h1>
<p>If I mention Erlang, this is always the first thing that comes up and it sorta annoys me. I have a few issues with Elixir and they&#39;re not really to do with the language itself because y&#39;know, I couldn&#39;t care less about syntax in general but I do care about philosophy/focus. It&#39;s irrational but here goes:</p>
<p>1) I&#39;ve worked in Ruby, the Ruby community might be friendly but they&#39;re mostly godawful developers and their tendency to overload operators with magic, or monkey patch internals or generally do any sort of meta-programming because ahahaaha lols made me almost quit programming altogether in frustration when I stared into that abyss for the duration of that job</p>
<p>2) Elixir comes from that background, with that sort of developer and now with ADDED MACROS (oh man no don&#39;t give these kids more metaprogramming tools)</p>
<p>You see - Clojure is allowed to have Macros because the rules of Macro club are clearly written down and stated as thus:</p>
<ul>
<li>Don&#39;t use Macros</li>
<li>Don&#39;t use Macros</li>
<li>Don&#39;t use Macros</li>
<li>Okay, re-write those rules - we&#39;re going to use Macros because our name is Rich Hickey</li>
</ul>
<p>This general sensibility means that you don&#39;t generally bring in libraries in Clojure and then have to wonder why everything in your application no longer works because somebody decided to re-define basic mathematical operators (for those not doing Ruby <em>yes this is actually a thing I don&#39;t know what even</em>).</p>
<p>Erlang doesn&#39;t cost us any money because we can&#39;t pretend records/maps are objects, we don&#39;t need that functionality. Erlang doesn&#39;t cost us money because we can&#39;t do meta-programming (actually we sorta can but sssh don&#39;t tell the Ruby devs) - and while the syntax might be ugly it isn&#39;t something that is a fundamental issue beyond the initial learning curve because you should be learning OTP, not the language. Putting the focus on that shiny language takes a lot of focus away from the things in Erlang that are actually <em>useful</em> as in the ode above. This is further chronicled by the sheer number of blog entries of &quot;Ruby vs Elixir&quot;, &quot;Node vs Elixir&quot; etc as if somehow the language is at all anything you should be interested in. I find it incredibly hard to trust Elixir, anything written <em>in</em> Elixir or anything written by the Elixir devs (see Ruby metaprogramming above).</p>
<p>The new and shiny detracts from the old and gnarly without really adding that much in tangible benefits and bringing in the hipster brigade who all totally missed the point when it came to the bit in the chapter &quot;What do you mean you can&#39;t re-assign variables&quot;.</p>
<p>If you&#39;re a great dev then you can probably be more effective in Elixir (probably), but bear in mind they&#39;re re-building all the shitty infrastructure around packaging management, build tools, scaffolding etc that it has been quite a relief to stay away from in this last year of doing Erlang (I&#39;ll cover this in the upcoming series). So thanks but no thanks - you are all incorrect in your thinking and I&#39;ll see you in a couple of years when you work that out for yourself.</p>
<h1 id="lfe">LFE</h1>
<p>An interesting idea, and we&#39;re looking at trialling it in our low value webby bits side by side with the Erlang (because it&#39;s not trying to do anything magic beyond offering a fairly simple syntax change - you know I love a good LISP). At the moment there are a pile of things that we&#39;d want in it (I found some issues the first six hours I jumped in and while Robert Virding is very fast at fixing them we&#39;d need to keep it in low value code while we helped grow the project).</p>
<p>Bonus: It&#39;s not being ran by Ruby script kiddies, so that&#39;s a Good Thing (tm).</p>
<h1 id="state-on-the-disinterest-curve">State on the disinterest curve</h1>
<p>Still not really that interested in Erlang, simply building things in it and enjoying it - this process is pretty mundane and perhaps that&#39;s what I&#39;ve been looking for all this time. I&#39;m going to throw in some more blog entries after this one covering how <em>we</em> build things in Erlang because we do things <em>our</em> way and I&#39;ve been asked about this a few times now. This should be fun.</p>
]]></description><link>http://codeofrob.com/entries/the-ashton-disinterest-curve---erlang.html</link><guid isPermaLink="true">http://codeofrob.com/entries/the-ashton-disinterest-curve---erlang.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 09 Mar 2015 10:30:00 GMT</pubDate></item></channel></rss>