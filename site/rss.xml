<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><image><url>http://codeofrob.com/img/cover.jpg</url><title>Rob Ashton&apos;s blog</title><link>http://codeofrob.com</link></image><generator>RSS for Node</generator><lastBuildDate>Mon, 11 Nov 2013 22:06:19 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><author><![CDATA[Rob Ashton]]></author><item><title><![CDATA[Starting the frameworkless JS project]]></title><description><![CDATA[<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
</ul>
<h1>So you have an empty folder</h1>
<p><em>Set up the initial project structure</em></p>
<pre><code><span class="title">npm</span> init
<span class="title">git</span> init
<span class="title">echo</span> <span class="string">"node_modules"</span> &gt; .gitignore

<span class="title">mkdir</span> public
<span class="title">touch</span> public/index.html
<span class="title">touch</span> app.js

<span class="title">git</span> commit -am <span class="string">"Initial commit"</span></code></pre>
<p><em>Install a standalone http server to serve our static files</em></p>
<pre><code>npm install -g http-<span class="keyword">server</span>
cd <span class="keyword">public</span>
http-<span class="keyword">server</span>

(<span class="keyword">server</span> now listening on http:<span class="comment">//localhost:8080)</span></code></pre>
<p><em>Install browserify so we can build our application</em></p>
<pre><code><span class="title">npm</span> install -g browserify</code></pre>
<p><em>Write our first application</em></p>
<pre><code><span class="title">echo</span> <span class="string">"console.log('hello world')"</span> &gt; app.js</code></pre>
<p><em>Build our application</em></p>
<pre><code>browserify app<span class="variable">.js</span> -o <span class="keyword">public</span>/app<span class="variable">.js</span></code></pre>
<p><em>This will create a wonderful file which can be loaded by our index.html</em></p>
<pre><code><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"app.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></code></pre>
<p><em>The output actually looks like this:</em></p>
<pre><code>;(<span class="function"><span class="keyword">function</span> <span class="title">e</span><span class="params">(t,n,r)</span>{<span class="title">function</span> <span class="title">s</span><span class="params">(o,u)</span>{<span class="title">if</span><span class="params">(!n[o])</span>{<span class="title">if</span><span class="params">(!t[o])</span>{<span class="title">var</span> <span class="title">a</span>=<span class="title">typeof</span> <span class="title">require</span>=="<span class="title">function</span>"&amp;&amp;<span class="title">require</span>;<span class="title">if</span><span class="params">(!u&amp;&amp;a)</span><span class="title">return</span> <span class="title">a</span><span class="params">(o,!0)</span>;<span class="title">if</span><span class="params">(i)</span><span class="title">return</span> <span class="title">i</span><span class="params">(o,!0)</span>;<span class="title">throw</span> <span class="title">new</span> <span class="title">Error</span><span class="params">("Cannot find module '"+o+"'")</span>}<span class="title">var</span> <span class="title">f</span>=<span class="title">n</span><span class="params">[o]</span>={<span class="title">exports</span>:{}};<span class="title">t</span><span class="params">[o]</span><span class="params">[0]</span>.<span class="title">call</span><span class="params">(f.exports,function(e)</span>{<span class="title">var</span> <span class="title">n</span>=<span class="title">t</span><span class="params">[o]</span><span class="params">[1]</span><span class="params">[e]</span>;<span class="title">return</span> <span class="title">s</span><span class="params">(n?n:e)</span>},<span class="title">f</span>,<span class="title">f</span>.<span class="title">exports</span>,<span class="title">e</span>,<span class="title">t</span>,<span class="title">n</span>,<span class="title">r</span>)}<span class="title">return</span> <span class="title">n</span><span class="params">[o]</span>.<span class="title">exports</span>}<span class="title">var</span> <span class="title">i</span>=<span class="title">typeof</span> <span class="title">require</span>=="<span class="title">function</span>"&amp;&amp;<span class="title">require</span>;<span class="title">for</span><span class="params">(var o=0;o&lt;r.length;o++)</span><span class="title">s</span><span class="params">(r[o])</span>;<span class="title">return</span> <span class="title">s</span>})<span class="params">({1:[function(require,module,exports)</span>{</span>
<span class="transposed_variable">console.</span><span class="built_in">log</span>(<span class="string">'hello world'</span>)

},<span class="cell">{}</span>]},<span class="cell">{}</span>,<span class="matrix">[<span class="number">1</span>]</span>)
;</code></pre>
<p><em>This is a bit useless for debugging in the browser, so instead we pass the &#39;d&#39; option to browserify and it will generate source maps so in the browser can debug our original file which looks like this</em></p>
<pre><code>console.<span class="built_in">log</span>(<span class="comment">'hello world')</span></code></pre>
<p><em>To generate the source maps, that&#39;s</em></p>
<pre><code>browserify -d app<span class="variable">.js</span> -o <span class="keyword">public</span>/app<span class="variable">.js</span></code></pre>
<h1>Installing our first module</h1>
<p>I want to set the content of a div to &quot;Hello world&quot;, and in order to do this for the sake of argument I want to wait for the dom to be loaded. </p>
<p>In jQuery this would be the equivalent of the </p>
<pre><code><span class="variable">$(</span>function() { <span class="regexp">//</span> <span class="keyword">do</span> stuff here })</code></pre>
<p>The equivalent to this that I&#39;ve found in NPM is a module called &quot;domready&quot;, so I install it with</p>
<pre><code><span class="comment">npm</span> <span class="comment">install</span> <span class="comment">domready</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</code></pre>
<p>Save modifies my package.json to contain the module I&#39;ve installed, so other developers can install it on cloning this repo. Now in my app.js I can write some code to use this</p>
<pre><code>var domReady = require('domready')
domReady(function() {
  var container = document.getElementById('container')
  container.innerHTML = "<span class="tag">&lt;<span class="title">p</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="title">p</span>&gt;</span>"
})</code></pre>
<p>Building this with</p>
<pre><code>browserify -d app<span class="variable">.js</span> -o <span class="keyword">public</span>/app<span class="variable">.js</span></code></pre>
<p>Gives me the desired results of seeing &quot;Hello world on the page&quot;</p>
<h1>Recap</h1>
<p>All we&#39;ve done is</p>
<ul>
<li>Installed some bits on our machine</li>
<li>Written an app.js that uses a module</li>
<li>Ran a command to build that into the static file directory on my site</li>
</ul>
<p>Next we&#39;ll look at an option for doing some templating...</p>
]]></description><link>http://codeofrob.com/entries/starting-the-frameworkless-js-project.html</link><guid isPermaLink="true">http://codeofrob.com/entries/starting-the-frameworkless-js-project.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 07 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - an example]]></title><description><![CDATA[<p>I was at a client last week helping with some <a href="http://ravendb.net/">RavenDB</a> stuff and helping out with some of their JS while I was at it.</p>
<p>What I am going to do is walk through a bit of code I wrote with a couple of the developers from the client to explore a particular set of questions that they had, and demonstrate some of the concepts around frameworkless JS and why it doesn&#39;t mean &quot;re-inventing the wheel&quot; as such.</p>
<p>The repo is actually <a href="http://github.com/robashton/look-ma-no-frameworks">here</a> if you want to skip my blathering and have a look without any context - but be aware that the code written is very focused on what questions were being asked by the developers at the client site.</p>
<p>I feel the conversation often gets too focused on the negative aspects of frameworks, rather than the positive experience to be had developing without one and for that reason I&#39;m really glad to have a tangible example to walk through to demonstrate the fun to be had over at this side of the fence.</p>
<h3>What was I asked for?</h3>
<p>The developers were working on a project which didn&#39;t have a lot of data-binding (but had some), and involved the coordination between several actors on page. They were wondering how I dealt with such scenarios and whether I would be open to using libraries like Knockout within a frameworkless context. They were also curious about how to handle multiple &quot;pages/views&quot; and how to re-use widgets/code across multiple applications and avoid building a monolith. </p>
<h3>What did we build?</h3>
<p>It&#39;s not much when you look at it, we demonstrate </p>
<ul>
<li>How we can build feature/widget folders that could potentially become npm modules in their own right</li>
<li>How to compose our application&#39;s functionality around the dom</li>
<li>How we could manage event listeners when moving around the application</li>
<li>How this approach doesn&#39;t necessary preclude us from using more bulky libs like Knockout</li>
<li>How you can have multiple &quot;pages&quot; with back/forward navigationo</li>
<li>Some rules to keep things sane as the application grows over time</li>
</ul>
<p>A few different techniques were used across the code example for templating/content, this was simply to demonstrate that we had <em>options</em>, we&#39;ll discuss as part of this blog series what the standard approach might look like.</p>
<h3>The features</h3>
<p>Again not much, we have a list of customers who belong to various banks, and we want to filter those customers by their bank as well as dive into the customer&#39;s details. There is no &quot;write&quot; functionality, although this would just be a matter of presenting the customer within a form and posting it so not a stretch to extend the example.</p>
<h3> </h3>
<p>I&#39;ll go over the code from the beginning and talk about the decisions/conversations had while doing this. It&#39;ll be fun.</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---an-example.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---an-example.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 05 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Primary-Secondary and when it isn't]]></title><description><![CDATA[<p>I was recently called in to do an emergency consult at a new client because their RavenDB instance was in a bit of a pickle and anybody they <em>might</em> have wanted to call in was already busy so I got the call ;-)</p>
<h2>The situation</h2>
<ul>
<li>I arrived bleary eyed at 9am, and I had less than four hours until I had to leave to get on a plane to Geneva(!!)</li>
<li>&quot;We have conflict documents all over the place in our secondary database&quot;</li>
<li>&quot;We have documents that exist in the secondary and not the primary&quot;</li>
</ul>
<p>Ruh oh!</p>
<p>My immediate assumption on hearing that their secondary was full of documents that weren&#39;t on the primary was that they were actually running a primary/primary set-up by accident, but in actual fact it was slightly more involved than that.</p>
<h2>The RavenDB Replication Bundle</h2>
<p>RavenDB replication is set up by telling a server that it has a replication destination, that is a primary is told about the secondary and instructed to push documents over there when it can get the chance. It uses etags to determine which documents need to go over and uses etags to detect conflicts and create mulitiple versions of a conflicted document.</p>
<p>The different between primary/primary or primary/secondary is simply whether you set up both servers with a replication destination or just one of them.</p>
<p><em>So far so good</em></p>
<ul>
<li>The thing is, the client has the ability to failover automatically when the primary stops being reachable for whatever reason. </li>
<li>By default the client isn&#39;t allowed to write to the secondary and it is an explicit option to turn that on.</li>
<li>The assumption is that if the primary goes down, the system should go into <em>read only</em> mode and prevent further damage</li>
</ul>
<p>This is quite a sensible set-up, and a very reasonable one because you don&#39;t know what caused that failure, don&#39;t want the failure to repeat on the secondary and a diminished functionality is still better than no functionality at all.</p>
<p>A primary/secondary set-up is conceptually a lot easier to deal with than a primary/primary or cluster-setup because you never have to deal with conflicts. Conflicts in a lot of state-based systems are painful to deal with so if we can avoid dealing with them then we should.</p>
<p>RavenDB also has the option to allow writes to secondary and <em>this is where the fun begins</em>.</p>
<ul>
<li>The application is writing to the primary</li>
<li>The primary becomes unreachable for some reason</li>
<li>The application starts writing to secondary</li>
<li>The primary becomes reachable once more</li>
<li>The application starts writing to primary</li>
<li>There are documents left orphaned on secondary!!!</li>
<li>Eventually, conflicts (or in this client&#39;s case, pretty quickly because <em>batch processes</em>)</li>
</ul>
<p>What we&#39;re saying here actually, is that if you are writing to secondary on failure, what you actually have is a primary/primary with the wrong name.</p>
<p>It&#39;s left in userland to determine what to do here, we could:</p>
<ul>
<li>Set up a replication target for the secondary so when this happens we get write-backs once primary returns</li>
<li>Manually trigger a copy of the data back to primary once we establish that primary is &quot;okay&quot;</li>
<li>Etc</li>
</ul>
<p>The essence of this though is that if we&#39;re going to be allowing writes to secondary during failure, then we need to have some form of conflict resolution set up because it&#39;s not <em>really</em> a primary/secondary relationship these servers have.</p>
<h2>Their fix</h2>
<p>We have two choices, we can </p>
<ul>
<li>Have a read-only failure mode</li>
<li>Have a write-on-failure mode but handle conflicts gracefully</li>
</ul>
<p>Opting for the latter because their internal consumer <em>always</em> wants to be able to write, the easiest approach was to write a &quot;last write wins&quot; conflict resolver. Not always advisable but in this case there were few side effects from adopting such a position.</p>
<h2>The summary</h2>
<p>You should think about your topology and what you actually want to support when setting this up. This is usually always a business decision, as it revolves around what levels of availability they need to do their job.</p>
]]></description><link>http://codeofrob.com/entries/primary-secondary-and-when-it-isnt.html</link><guid isPermaLink="true">http://codeofrob.com/entries/primary-secondary-and-when-it-isnt.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 31 Oct 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[This consultant shows you one weird trick to take down a managed database]]></title><description><![CDATA[<h3>Sysadmins hate him...</h3>
<p>I was visiting a client last week who have been having trouble with their RavenDB instance for a few months and understandably getting a bit frustrated as time went on.</p>
<h2>The scene</h2>
<p>I arrived, drank some coffee and we hit a room with the projector in it, and brought up the graphs of resource usage on the server running RavenDB - they&#39;ve been pretty handy with the <a href="http://www.splunk.com">splunk</a> and they have quite a few graphs! (Their usage of Splunk was <em>awesome</em> actually, can highly recommend looking at it)</p>
<p>Memory usage looks something like this through the day</p>
  <script type="text/javascript" src="/d3.v2.js"></script>
  <script type="text/javascript" src="/dimple.js"></script>

  <div id="initial-memory-usage"></div>

  <script type="text/javascript">
    var svg = dimple.newSvg("#initial-memory-usage", 590, 400);
    var myChart = new dimple.chart(svg, [
    { Hour: 0, Memory: 15},
    { Hour: 1, Memory: 15},
    { Hour: 2, Memory: 15},
    { Hour: 3, Memory: 15},
    { Hour: 4, Memory: 0},
    { Hour: 5, Memory: 2},
    { Hour: 6, Memory: 4},
    { Hour: 7, Memory: 4},
    { Hour: 8, Memory: 4},
    { Hour: 9, Memory: 6},
    { Hour: 10, Memory: 6},
    { Hour: 11, Memory: 7},
    { Hour: 12, Memory: 8},
    { Hour: 13, Memory: 10},
    { Hour: 14, Memory: 10},
    { Hour: 15, Memory: 10},
    { Hour: 16, Memory: 14},
    { Hour: 17, Memory: 14},
    { Hour: 18, Memory: 10},
    { Hour: 19, Memory: 10},
    { Hour: 20, Memory: 15},
    { Hour: 21, Memory: 15},
    { Hour: 22, Memory: 15},
    { Hour: 23, Memory: 15}
    ]);
    myChart.setBounds(60, 30, 510, 305)
    var x = myChart.addCategoryAxis("x", "Hour");
    x.addOrderRule("Hour");
    myChart.addMeasureAxis("y", "Memory");
    myChart.addSeries(null, dimple.plot.bar);
    myChart.draw();
  </script>


<p>That 4am block is a result of an automated process to kill their RavenDB instance every day because if they left it running it would being down the server when people were actually using the system - not so good! (It starts spiking around 9am because it starts being under quite a reasonable load).</p>
<h2>My line of questioning on seeing this</h2>
<ul>
<li>How many databases on that one instance: <em>12</em></li>
<li>How much memory on the server: <em>16gb</em></li>
<li>How many cores on that server: <em>2</em></li>
<li>How much data in the databases?: <em>Between 500mb and 13gb</em></li>
<li>How many documents in that largest database?: <em>Er, not that many</em></li>
<li>How big are those documents?: <em>Some are quite big, they have PDFs attached to them</em></li>
</ul>
<h1>Ah.</h1>
<p>The thing is, RavenDB can deal with large documents. Internally it does quite a few things to avoid objects ending up on the <a href="http://msdn.microsoft.com/en-us/magazine/cc534993.aspx">Large Object Heap</a> or being promoted to the 2nd generation.</p>
<ul>
<li>Using streams in and out of core storage</li>
<li>Using streams in an out of HTTP</li>
<li>De-serializing only into RavenObject structures (lots of small objects)</li>
<li>Not holding onto objects any longer than it has to</li>
</ul>
<p>If you were to create objects with lots of fields that reached the above size in all likelihood RavenDB&#39;s practises around this kind of thing would result in happy developers, happy ops and happy sales teams?</p>
<p>But byte arrays that are automatically put on the Large Object Heap? There is little Raven can do about these, as when the objects internally are de-serialized into tokens, the smallest token it can make with them is however large the byte array is! </p>
<p>Under what circumstances does RavenDB load these fields?</p>
<ul>
<li>Indexing</li>
<li>Querying</li>
<li>Loading</li>
</ul>
<p>Imagine now that you create a new index on the server and it has to </p>
<ul>
<li>run through all of the documents to put content into Lucene</li>
<li>To do this it has to de-serialize them</li>
<li>When being de-serialized .NET is going to say &quot;That field is large, it is going on the Large Object Heap&quot;</li>
<li>It is going to have to look for space on the LOH</li>
<li>It is going to expand the LOH</li>
<li>They&#39;re all different sizes, it is unlikely to find space in the middle very often</li>
<li>The LOH is going to keep expanding during the indexing process</li>
<li>The machine is going to run out of memory</li>
</ul>
<p>This is just typical .NET behaviour, and to make things worse, when the issues first started being noticed the first port of call was to open Raven Studio and start inspecting the server (performing queries), thus adding to the problem and causing even more hilarious memory spikes.</p>
<p>To give an indication, when opening up the performance counters for the server the kind of thing we were seeing looked like this:</p>
<p>  <img src="/img/lho.png"></p>
<p>Yes indeed, that&#39;s nearly all the memory on the server being allocated to the LHO as a result of excessive large objects of varying sizes being aggressively loaded through the indexing and querying processes.</p>
<h1>The solution?</h1>
<p>Much like with every other database out there, storing binary blobs in a store which is built for querying/transactions isn&#39;t ideal - but there are two options available here</p>
<ul>
<li>External storage (s3, fileservers, anything else)</li>
<li>RavenDB Attachments</li>
</ul>
<p>The latter isn&#39;t encouraged as it&#39;s just a convenience - but to prove a point I generated 1.5 million documents of varying sizes with byte arrays on the fields to reproduce the problem successfully on my laptop (that&#39;s actually the screenshot above), then migrated them into attachments to show what a difference this would make as attachments are <em>never</em> loaded fully into memory.</p>
<p>  <img src="/img/beforeafter.jpg"></p>
<p>What a difference choosing an appropriate store makes! In the second number the &quot;PDFs&quot; are <em>still being stored in RavenDB</em>, just not in the primary document store.</p>
<p>When I left the client their server was sitting flat at 4gb consumption (with the database still full of PDFs, but instructions in how to avoid causing issues until they had been purged)</p>
<h1>The summary</h1>
<ul>
<li>Well, I think Raven could benefit from having some sort of warning when it sees this sort of usage, although it&#39;s not <em>that</em> common so not really a priority</li>
<li>There is little a database can do to get around this sort of thing, save sticking things in off-heap storage - but that&#39;s not going to work when your indexing is written in .NET</li>
</ul>
<p>I&#39;m currently <a href="https://github.com/robashton/cravendb">writing my own database</a> in a different managed platform and I&#39;m strongly considering sticking indexing into its own process to avoid this sort of long-term build up of issues. That said - the JVM doesn&#39;t do per-process GC so that might not help that much.</p>
<p>Either way it&#39;s interesting and points to one of the limitations of writing a database or any high throughput system in a managed environment if you&#39;re going to be expecting big chunks of data that can&#39;t be broken up somehow. (Okay, this is quite specific, and will rarely catch anybody out).</p>
]]></description><link>http://codeofrob.com/entries/this-consultant-shows-you-one-weird-trick-to-take-down-a-managed-database.html</link><guid isPermaLink="true">http://codeofrob.com/entries/this-consultant-shows-you-one-weird-trick-to-take-down-a-managed-database.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 29 Oct 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Refactoring the Clojure method I am least proud of in CravenDB]]></title><description><![CDATA[<p>I&#39;ve had a bit of a duck in my <a href="http://github.com/robashton/cravendb">database</a> for a while (and I&#39;m not making reference to the read-strings that were in there for months while I got on with more important things).</p>
<p>The duck came in the form of this method</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">defn</span></span> perform-query 
  <span class="collection">[tx reader query offset amount sort-field sort-order]</span>
  <span class="list">(<span class="title"><span class="built_in">loop</span></span> <span class="collection">[results <span class="list">()</span>
         current-offset offset
         total-collected<span class="number"> 0</span>
         attempt<span class="number"> 0</span> ]</span>
         <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="collection">[requested-amount <span class="list">(<span class="title"><span class="built_in">+</span></span> current-offset <span class="list">(<span class="title"><span class="built_in">max</span></span> amount<span class="number"> 100</span>)</span>)</span>
               raw-results <span class="list">(<span class="title">lucene/query</span> reader query requested-amount sort-field sort-order)</span>
               document-results <span class="list">(<span class="title">convert-results-to-documents</span> tx <span class="list">(<span class="title"><span class="built_in">drop</span></span> current-offset raw-results)</span>)</span>
               new-results <span class="list">(<span class="title"><span class="built_in">take</span></span> amount <span class="list">(<span class="title"><span class="built_in">concat</span></span> results document-results)</span>)</span>
               new-total <span class="list">(<span class="title"><span class="built_in">count</span></span> new-results)</span> 
               new-offset <span class="list">(<span class="title"><span class="built_in">+</span></span> current-offset requested-amount)</span>]</span>

           <span class="list">(<span class="title">debug</span> <span class="string">"Requested"</span> requested-amount 
                    <span class="string">"CurrentTotal"</span> total-collected 
                    <span class="string">"Skipped"</span> current-offset <span class="string">"Of"</span>
                    <span class="string">"Received"</span> <span class="list">(<span class="title"><span class="built_in">count</span></span> raw-results)</span>)</span>
           <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title"><span class="built_in">and</span></span> <span class="list">(<span class="title"><span class="built_in">=</span></span> <span class="list">(<span class="title"><span class="built_in">count</span></span> raw-results)</span> requested-amount)</span>
                    <span class="list">(<span class="title"><span class="built_in">not=</span></span> new-total amount)</span>
                    <span class="list">(<span class="title">&gt;</span><span class="number"> 10</span> attempt)</span>)</span>
             <span class="list">(<span class="title"><span class="built_in">recur</span></span> new-results 
                    new-offset 
                    new-total
                    <span class="list">(<span class="title"><span class="built_in">inc</span></span> attempt)</span>)</span>
             new-results)</span>)</span>)</span>)</span></code></pre>
<p>Essentially we have a lucene reader and we want to</p>
<ul>
<li>Query it for some results (offset + amount-ish)</li>
<li>Pull those results through as documents</li>
<li>If we don&#39;t have enough documents and there are some left, query again</li>
<li>Keep going until either we have enough, or there are no more left</li>
</ul>
<p>It&#39;s fairly simple, but what we can see in the method is</p>
<ul>
<li>I&#39;m using &#39;loop&#39;, this usually indicates other non-functional problems</li>
<li>I&#39;m effectively building &#39;take&#39;, &#39;skip&#39;, etc myself</li>
</ul>
<p>One thing I&#39;ve learned so far in Clojure that if you have a abnormal construct (in this case my lucene reader), is that we should try and get that into either a <em>map</em> or a <em>sequence</em> as early on as possible so as to be able to leverage all the Clojure built-ins on it.</p>
<h3>What I want here, is a lazy sequence built up with recursion</h3>
<p>I wrote a quick proof of concept of that sort of thing, it looks like this:</p>
<pre><code class="lang-clojure">(defn number-seq 
  ([] (number-seq 0))
  ([i]
  (cons (inc i) (lazy-seq (form-sequence (inc i))))))</code></pre>
<p>What I have here is a function I can call with all the usual suspects like</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">take</span></span><span class="number"> 100</span> <span class="list">(<span class="title">number-seq</span>)</span>)</span> <span class="comment">;; Get me 0 to 100</span>
<span class="list">(<span class="title"><span class="built_in">drop</span></span><span class="number"> 10</span> <span class="list">(<span class="title"><span class="built_in">take</span></span><span class="number"> 100</span> <span class="list">(<span class="title">number-seq</span>)</span>)</span> <span class="comment">;; Get me 10 to 100</span>
<span class="comment">;; etc</span></code></pre>
<p>And it&#39;s fully lazy and potentially infinite and all those things. The whole &quot;cons a value onto a lazy sequence&quot; trick is the solution to quite a few of the Clojure koans and had I done them perhaps I&#39;d not have written the above loop.</p>
<h3>First step - reduce the arguments</h3>
<p>Before ripping apart this loop, I thought it better to jump in the repl to create the constructs that go into the loop, then sit there and pull the loop apart into its constituent parts before using them in a recursive function.</p>
<p>Looking at the query method, I&#39;m passing quite a lot in to it</p>
<ul>
<li>tx: the current transaction we&#39;re pulling data from</li>
<li>reader: a wrapper around a lucene reader</li>
<li>query: the query itself</li>
<li>offset: the number of values to skip in the page</li>
<li>amount: the number of values to pull from the reader</li>
<li>sort-field: the field we&#39;re sorting on</li>
<li>sort-order: the order of sorting</li>
</ul>
<p>It is quite clear that only two of these values actually change during the recursive loop, and the rest are only used with a single object (reader) the same way over and over again.</p>
<p>My first step in C# would probably be to &quot;create another object&quot;, in this case here though a producer function of some sort is what springs to mind</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">defn</span></span> lucene-producer <span class="collection">[tx reader query sort-field sort-order]</span>

  <span class="list">(<span class="title"><span class="built_in">fn</span></span> <span class="collection">[offset amount]</span>
    <span class="list">(<span class="title">-&gt;&gt;</span> 
      <span class="list">(<span class="title">lucene/query</span> reader 
                    query 
                    <span class="list">(<span class="title"><span class="built_in">+</span></span> offset amount)</span> 
                    sort-field 
                    sort-order)</span> 
      <span class="list">(<span class="title"><span class="built_in">drop</span></span> offset)</span> 
      <span class="list">(<span class="title">convert-results-to-documents</span> tx)</span>)</span>)</span>)</span></code></pre>
<p>I actually go a bit further and bring in the loading of the documents as well, now I can call this over again like so</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title">producer</span><span class="number"> 0</span><span class="number"> 100</span>)</span> <span class="comment">;; Get me the first 100 items in the index</span>
<span class="list">(<span class="title">producer</span><span class="number"> 10</span><span class="number"> 100</span>)</span> <span class="comment">;; Get me the items 10-100 in the index</span></code></pre>
<p>Now of course, this producer function might not actually return the requested number of results because the underlying code is doing de-duping and removing documents that have been deleted and not yet cleared from the index.</p>
<p>I slot this into my original loop function, verify it all still works and then look at the next step:</p>
<h3>Second step - split out the paging</h3>
<p>What I really want is the ability to skip through pages of the index and not keep accumulators around in the loop itself, I can employ a similar trick and write a function that knows about the current page and how to get the next page. I&#39;ll store the results in a map and a function to get the next page in the map as well.</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">defn</span></span> lucene-page 
  <span class="list">([<span class="title">producer</span> page-size] <span class="list">(<span class="title">lucene-page</span> producer<span class="number"> 0</span> page-size)</span>)</span>
  <span class="list">([<span class="title">producer</span> current-offset page-size]
   <span class="collection">{
    <span class="attribute">:results</span> <span class="list">(<span class="title">producer</span> current-offset page-size)</span>
    <span class="attribute">:next</span> <span class="list">(<span class="title"><span class="built_in">fn</span></span> <span class="collection">[]</span> <span class="list">(<span class="title">lucene-page</span> producer <span class="list">(<span class="title"><span class="built_in">+</span></span> current-offset page-size)</span> page-size)</span>)</span>
   }</span>)</span>)</span></code></pre>
<p>An alternative might be to just assoc the paging values into the map itself and create a next-page function like so</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">defn</span></span> lucene-page 
  <span class="list">([<span class="title">producer</span> page-size] <span class="list">(<span class="title">lucene-page</span> producer<span class="number"> 0</span> page-size)</span>)</span>
  <span class="list">([<span class="title">producer</span> current-offset page-size]
   <span class="collection">{
    <span class="attribute">:producer</span> producer
    <span class="attribute">:offset</span> current-offset
    <span class="attribute">:page-size</span> page-size
    <span class="attribute">:results</span> <span class="list">(<span class="title">producer</span> current-offset page-size)</span>
   }</span>)</span>)</span>

<span class="list">(<span class="title"><span class="built_in">defn</span></span> next-page <span class="collection">[<span class="collection">{<span class="attribute">:keys</span> <span class="collection">[producer offset page-size]</span>}</span>]</span>
  <span class="list">(<span class="title">lucene-page</span> producer <span class="list">(<span class="title"><span class="built_in">+</span></span> offset page-size)</span> page-size)</span>)</span></code></pre>
<p>But I quite like the little function and it&#39;s smaller so I&#39;m rolling with it until I&#39;m told that it&#39;s a bad thing and I&#39;m a naughty boy.</p>
<p>With this, I can consume the results I have and and simply call &quot;next&quot; to get the next lucene page without worrying about the accumulators in the loop function, this means I&#39;m now left with quite a stripped down loop:</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> perform-query 
  [producer offset amount]
  <span class="list">(<span class="title">loop</span><span class="body"> [results <span class="list">(<span class="body">)</span></span>
        page <span class="list">(<span class="title">lucene-page</span><span class="body"> producer amount)</span></span>]
      <span class="list">(<span class="title">let</span><span class="body"> [new-results <span class="list">(<span class="title">take</span><span class="body"> amount <span class="list">(<span class="title">concat</span><span class="body"> results <span class="list">(<span class="body"><span class="keyword">:results</span> page)</span></span>)</span></span>)</span></span>
            new-total <span class="list">(<span class="title">count</span><span class="body"> new-results)</span></span>]

          <span class="list">(<span class="title">if</span><span class="body"> <span class="list">(<span class="title">and</span><span class="body"> <span class="list">(<span class="title">=</span><span class="body"> <span class="list">(<span class="title">count</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:results</span> pager)</span></span>)</span></span> <span class="number">0</span>)</span></span>
                    <span class="list">(<span class="title">not=</span><span class="body"> new-total amount)</span></span>)</span></span>
            <span class="list">(<span class="title">recur</span><span class="body"> new-results 
                    <span class="list">(<span class="body"><span class="list">(<span class="body"><span class="keyword">:next</span> page)</span></span>)</span></span>)</span></span>
            new-results)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<h3>To the recursive lazy sequence</h3>
<p>Now I&#39;ve pulled out the important bits of this code into two different stages (pulling data from lucene, paging data over that), it&#39;s quite trivial to convert the loop into a lazy sequence</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> lucene-seq 
  <span class="list">(<span class="body">[page] <span class="list">(<span class="title">lucene-seq</span><span class="body"> page <span class="list">(<span class="body"><span class="keyword">:results</span> page)</span></span>)</span></span>)</span></span>
  <span class="list">(<span class="body">[page src]
  <span class="list">(<span class="title">cond</span><span class="body">
    <span class="list">(<span class="title">empty</span><span class="body">? <span class="list">(<span class="body"><span class="keyword">:results</span> page)</span></span>)</span></span> <span class="list">(<span class="body">)</span></span>
    <span class="list">(<span class="title">empty</span><span class="body">? src)</span></span> <span class="list">(<span class="title">lucene-seq</span><span class="body"> <span class="list">(<span class="body"><span class="list">(<span class="body"><span class="keyword">:next</span> page)</span></span>)</span></span>)</span></span>
    <span class="keyword">:else</span> <span class="list">(<span class="title">cons</span><span class="body"> <span class="list">(<span class="title">first</span><span class="body"> src)</span></span> <span class="list">(<span class="title">lazy-seq</span><span class="body"> <span class="list">(<span class="title">lucene-seq</span><span class="body"> page <span class="list">(<span class="title">rest</span><span class="body"> src)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<p>I&#39;m pretty pleased with this, tidying up the rest of the code around the rest of the file reduces my line count by 50% and leaves the complete solution looking like this:</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> lucene-producer [tx reader opts]
  <span class="list">(<span class="title">fn</span><span class="body"> [offset amount]
    <span class="list">(<span class="title">-&gt;&gt;</span><span class="body"> 
      <span class="list">(<span class="title">lucene/query</span><span class="body"> reader 
                    <span class="list">(<span class="body"><span class="keyword">:query</span> opts)</span></span> 
                    <span class="list">(<span class="title">+</span><span class="body"> offset amount)</span></span> 
                    <span class="list">(<span class="body"><span class="keyword">:sort-by</span> opts)</span></span> 
                    <span class="list">(<span class="body"><span class="keyword">:sort-order</span> opts)</span></span>)</span></span> 
      <span class="list">(<span class="title">drop</span><span class="body"> offset)</span></span> 
      <span class="list">(<span class="title">valid-documents</span><span class="body"> tx)</span></span>)</span></span>)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> lucene-page 
  <span class="list">(<span class="body">[producer page-size] <span class="list">(<span class="title">lucene-page</span><span class="body"> producer <span class="number">0</span> page-size)</span></span>)</span></span>
  <span class="list">(<span class="body">[producer current-offset page-size]
  {
    <span class="keyword">:results</span> <span class="list">(<span class="title">producer</span><span class="body"> current-offset page-size)</span></span>
    <span class="keyword">:next</span> <span class="list">(<span class="title">fn</span><span class="body"> [] <span class="list">(<span class="title">lucene-page</span><span class="body"> producer <span class="list">(<span class="title">+</span><span class="body"> current-offset page-size)</span></span> page-size)</span></span>)</span></span>
  })</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> lucene-seq 
  <span class="list">(<span class="body">[page] <span class="list">(<span class="title">lucene-seq</span><span class="body"> page <span class="list">(<span class="body"><span class="keyword">:results</span> page)</span></span>)</span></span>)</span></span>
  <span class="list">(<span class="body">[page src]
  <span class="list">(<span class="title">cond</span><span class="body">
    <span class="list">(<span class="title">empty</span><span class="body">? <span class="list">(<span class="body"><span class="keyword">:results</span> page)</span></span>)</span></span> <span class="list">(<span class="body">)</span></span>
    <span class="list">(<span class="title">empty</span><span class="body">? src)</span></span> <span class="list">(<span class="title">lucene-seq</span><span class="body"> <span class="list">(<span class="body"><span class="list">(<span class="body"><span class="keyword">:next</span> page)</span></span>)</span></span>)</span></span>
    <span class="keyword">:else</span> <span class="list">(<span class="title">cons</span><span class="body"> <span class="list">(<span class="title">first</span><span class="body"> src)</span></span> <span class="list">(<span class="title">lazy-seq</span><span class="body"> <span class="list">(<span class="title">lucene-seq</span><span class="body"> page <span class="list">(<span class="title">rest</span><span class="body"> src)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<p>No doubt a seasoned Clojure developer would further reduce this (and there are probably a couple of snafus), but I&#39;m pretty pleased that the interface I&#39;m now exposing to the rest of my code is just a plain old sequence and even if I go and play golf with the underlying code the behaviour of that sequence shouldn&#39;t change. </p>
]]></description><link>http://codeofrob.com/entries/refactoring-the-clojure-method-i-am-least-proud-of-in-cravendb.html</link><guid isPermaLink="true">http://codeofrob.com/entries/refactoring-the-clojure-method-i-am-least-proud-of-in-cravendb.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 03 Oct 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[On Testing and the REPL in Clojure]]></title><description><![CDATA[<p>I&#39;m currently at <a href="http://euroclojure.com/2013/">Euroclojure</a> where I have the pleasure to have been meeting and chatting to people about Clojure and related ponies for the past day or so - and I&#39;ve learned a few things and got a much better feel for what the Clojure community is about.</p>
<p>One theme that keeps coming up is the ugly one of testing, and its association with the obsession over tests in other communities, whether it be TDD or some other variant of making yourself feel good through automatic code exercise.</p>
<p>Another theme that keeps coming up is that the JVM (particularly under Clojure) has a heavy start-up time of quite a few seconds, so that practising a strict TDD feedback loop as you change your code is impractical without installing hacky workarounds like drip or associated (pre-warming the JVM for example). This is reminiscent of what the Rails folk do with Spork/related and comes with a whole suite of interesting problems.</p>
<p>Another more concerning theme is the derision I&#39;ve been feeling from a lot of corners as a result of the first theme on tests themselves - some of it is joking around, and some of it is almost describing tests as a set of crutches to get around the fact that some code is hard to manipulate in the REPL for example.</p>
<p>As I&#39;ve been writing <a href="https://github.com/robashton/cravendb">CravenDB</a>, and during my time at MastodonC I have been adjusting my patterns and attitudes around this subject and I&#39;d like to describe where I&#39;m currently at with testing, tdd, the repl and Clojure.</p>
<h3>The REPL <em>IS</em> TDD</h3>
<p>The REPL has taken over as my primary way of exploring a new problem or a new feature, and this seems to be due to the following reasons:</p>
<ul>
<li>I quite like manipulating a bit of code once I already have state in memory and repeating a small bit of code over and over until the algorithm is just right</li>
<li>Running tiny tests around that sort of thing would be time consuming, because JVM/Clojure start-up time</li>
<li>Most code written in Clojure seems to be very honest in that it&#39;s just about transforming state to get some sort of result, and this is usually as a result of composing little functions in a chain (often through experimentation) to get the result we ewant.</li>
</ul>
<p>If I was in another platform where the REPL isn&#39;t quite as good (so anything else really), I think I&#39;d still be writing lots of small tests to build up my understanding around a problem. If I was in another platform where the process of finding a result wasn&#39;t so... functional, I&#39;d probably have a lot more code and I&#39;d have to hide it behind classes which require setup/teardown and tests are a good way of repeating that process in a consistent way.</p>
<p>The separation of state from behaviour in a functional language like Clojure combined with the dynamic nature of Clojure makes the practice of repeatedly editing little bits of that behaviour then sending state through that behaviour a stonkingly easy thing to do, so it&#39;s of course a happy path.</p>
<p>Once I&#39;ve done this, I clear the REPL and my job is done because...</p>
<h3>I would only throw those tests away anyway</h3>
<p>If I&#39;m doing TDD (which I rarely do because most enterprise code is so stupidly simple), I build up quite a suite of tests around  tiny pieces of understanding and can end up with a very feel-good number of tests that do very little but get in my way once written.</p>
<p>What generally happens is that I&#39;ll end up with very much an outside-in set of tests around the actual features/functionality and I&#39;ll delete all the tiny tests because their only purpose was to help build my understanding and my more functional tests are more about testing the final result.</p>
<p>I&#39;ve found that while writing my <a href="https://github.com/robashton/cravendb">database in Clojure</a>, that once I&#39;ve finished building up a set of functions around some state to get ma new version of that state, that writing a couple of tests around that whole set of functions that test maybe a positive and a negative case is a reasonable thing to do because I end up leaning on that test in the future when adding new features to prevent regressions against my overall functionality.</p>
<p>What also seems to be the case, is I can often just transplant the code I&#39;ve built up in the REPL into </p>
<ul>
<li>The code base</li>
<li>The tests</li>
</ul>
<p>And get that regression suite almost for free.</p>
<ul>
<li>I don&#39;t spend a lot of time fixing the regression suite because of internal structure changes as they&#39;re more dependent on the overall results than internal set-up.</li>
<li>They do save me a lot of time in regressions because I&#39;m discovering better ways to write my internals all the time and I&#39;m not always capable of keeping the whole system in my head when practising those better ways.</li>
<li>They <em>do</em> seem quite high in volume, but I&#39;ve not found that the line count in my tests is quite as indicative of bad code as it would be in the main code base (most of it is just descriptions of what the tests do rather than big chunks of code that I&#39;ll have to maintain.</li>
<li>Sometimes fixing an issue is just a matter of turning debug logging on and running a test, I like that as a result of <em>log all the things</em></li>
</ul>
<h3>I do have to be careful though</h3>
<p>It is difficult sometimes when I break functionality to not start falling into the trap of repeatedly running the tests and &quot;fixing&quot; things until the tests pass. I&#39;ve set a hard rule for myself for the moment that if I can&#39;t get the tests to pass with-in a couple of iterations that I have to drop back to the REPL and start exploring the problem from the inside-out.</p>
<p>This process helps ensure:</p>
<ul>
<li>The internals are still easy enough to use within a REPL</li>
<li>I still understand the internals (as a developer new to the project, this would be how they learned I guess)</li>
<li>I don&#39;t spend time shotgun debugging issues</li>
</ul>
<h3>Fin</h3>
<p>That&#39;s my process anyway, I&#39;ve enjoyed telling people I have 1500 lines of code in my tests and hearing that sharp in-take of breath at this conference, but of this project I have to say they&#39;re the bit I&#39;m least ashamed of. Some of my loops on the other hand....</p>
]]></description><link>http://codeofrob.com/entries/on-testing-and-the-repl-in-clojure.html</link><guid isPermaLink="true">http://codeofrob.com/entries/on-testing-and-the-repl-in-clojure.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 01 Oct 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Perception is fleeting, OSS in .NET]]></title><description><![CDATA[<p>Oh I see everybody is writing OSS in .NET blog posts again</p>
<p>  <img src="/img/yawn.gif"></p>
<p>On second thoughts, I cba - too busy <a href="http://github.com/robashton/cravendb">writing code on Github</a></p>
]]></description><link>http://codeofrob.com/entries/perception-is-fleeting,-oss-in-.net.html</link><guid isPermaLink="true">http://codeofrob.com/entries/perception-is-fleeting,-oss-in-.net.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 26 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[I worry too]]></title><description><![CDATA[<p>I have been asked (more than) a few times over the past year or so questions along the lines of</p>
<ul>
<li>How can you actually make a living without long term contracts</li>
<li>Don&#39;t you worry about not finding work?</li>
<li>What about failure? What if you find you&#39;re not good enough for a client?</li>
<li>Are you saving for your future? Don&#39;t you worry about that?</li>
</ul>
<p>And the list goes - a list of reasons why people would feel worried or stressed by being in my position at the moment, and you know what - these questions are pretty hard to deflect because...</p>
<h1>I do worry</h1>
<p>Oh I worry - I&#39;ve hedged my bets by lodging in a cheap room somewhere outside of London the past couple of months for a low amount of money, no deposit and no minimum term, I&#39;ve hedged my bets by not taking on anything too long term so I can always leave the country, I&#39;ve hedged my bets by making friends like a mad person in case somebody - anybody has some work to throw my way, but I still worry. I worry that I&#39;ve still not been able to open a bank account in the country where I am supposedly paying taxes and that means that the money I&#39;ve been earning is still a mysterious pool of which a pile belongs to the government but I&#39;m not able to work it out properly because it&#39;s intermingled between my company and myself.</p>
<p>I worry that I&#39;m not going to find enough work to pay for coffee <em>and</em> my rent, I worry that I&#39;m not going to be able to afford to follow through on my plans for next year (which is to go on holiday for a month or so again), I worry that I&#39;m not investing in my future, I worry that I&#39;m going to end up 60 and poor, I worry that I&#39;m not charging enough I worry that I&#39;m charging too much and I worry that I&#39;m not good enough to be doing what I am doing. I worry about the talk I&#39;m giving next and whether I&#39;m prepared enough for it, I worry that I&#39;m not even qualified to give that talk - I worry that when I open my mouth at a conference people are going to realise I&#39;m pretty much making it up as I go along as I don&#39;t know what I&#39;m doing.</p>
<p>I worry about all of these things and more - and I worry about them even more when people start listing off these things to me as a question because it reminds me of my worries - because after all, I&#39;m living life pretty much on the edge and I&#39;ve not really got the big name that would guarantee me lots of lucrative enterprise consulting contracts. I worry that I should be marketing myself more instead of spending my spare time writing code that nobody really cares about and I worry that I market too much and people are going to get fed up of me asking for work.</p>
<h1>I don&#39;t let it consume me</h1>
<p>So yes - I worry, it&#39;ll come as a surprise to people who are even close to me because I wear a cocky know-it-all no-bullshit arrogant aura of confidence everywhere I go, and that&#39;s a marketing tool too because nobody wants to hire a quiet passive guy who sits in the corner and doesn&#39;t feel as if he has any answers.</p>
<p>I don&#39;t let the worry consume me, I tell myself that there are safety nets and I tell myself that I can always get a real job if I really need to (and oh man, I worry about this too because that&#39;d be long term commitment to staying in one place for more than a few weeks and I get cabin fever really easy these days). But I tell myself that there are safety nets anyway because the worst thing that can happen is I take a real job except actually that&#39;s not the worst thing because the worst thing that could happen is that my field of software development collapses and I&#39;m left without a job - okay that&#39;s a pretty real worry but I don&#39;t let that consume me either because I have work for the next few weeks booked up at least and that&#39;ll keep the food in my mouth.</p>
<p>I don&#39;t let the worry consume me because things have a way of working themselves out if you throw your hands in the air and admit defeat and ask for help from people who already have their crap sorted out.</p>
<p>I don&#39;t let the worry consume me because I&#39;d prefer to be writing code and I can&#39;t write code when I worry so I write code to push the worry away and only let the worry in when I&#39;ve got a spare 30 minutes and there is no power in my laptop and I have nothing better to do.</p>
<p>I don&#39;t let the worry consume me because I&#39;ve spent many years now putting myself into worrying situations and things haven&#39;t fallen apart yet. </p>
<p>Worry has proven itself to give me nothing in return for the space in the head that I afford it, and by refusing to acknowledge it and just press on with what I <em>want</em> to do regardless I&#39;ve found that I can get along just fine.</p>
<p>But don&#39;t make the assumption that I don&#39;t worry and I&#39;m not scared - it&#39;s just the things I worry and fear are privileged white male software developer things to worry and fear and I&#39;m lucky to be doing what I&#39;m doing and getting away with it.</p>
]]></description><link>http://codeofrob.com/entries/i-worry-too.html</link><guid isPermaLink="true">http://codeofrob.com/entries/i-worry-too.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 25 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[An introduction to the OHD platform via REPL driven development]]></title><description><![CDATA[<p>As mentioned at the start of my little bit of Cascalog wandering, I&#39;ve asked <a href="https://www.mastodonc.com/">Mastodon C</a> to let me come and work with them for a couple of weeks in the assumption that they&#39;ll have some tasks I can get on and do and pick up information as I go along.</p>
<p>In preparation for this, I went through the Cascalog for the Impatient walkthrough (or at least the first 75%) while I was sat in a pub, and now I&#39;m at the office and finding out what I am going to be getting on with!</p>
<ul>
<li><a href="/entries/impatiently-learning-cascalog---part-1.html">For the impatient - Part 1</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-2.html">For the impatient - Part 2</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-3.html">For the impatient - Part 3</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-4.html">For the impatient - Part 4</a></li>
</ul>
<p>I&#39;ve been asked to look at the <a href="http://openhealthdata.cdehub.org/">CDEC Open Health Data Platform</a> which takes data from the <a href="http://www.hscic.gov.uk/">HSCIC</a> to work out a few things such as the cost to the health service for Diabetes, or breakdowns across regions for the costs/prevalence of diabetes.</p>
<p>It&#39;s a nice example of what can be done with <a href="https://github.com/nathanmarz/cascalog">Cascalog</a>, although diving into it can be daunting as you&#39;re immediately met with walls of Clojure that look like this</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">defn</span></span> diabetes-spend-per-head-per-ccg-per-month <span class="collection">[gp-spend gp-prevalence]</span>
  <span class="list">(<span class="title">&lt;-</span> <span class="collection">[?ccg ?year ?month ?ccg-registered-patients ?ccg-diabetes-patients ?ccg-total-net-ingredient-cost ?spend-per-head]</span>
      <span class="list">(<span class="title">gp-spend</span> <span class="attribute">:&gt;</span> ?ccg ?practice ?year ?month ?gp-total-net-ingredient-cost)</span>
      <span class="list">(<span class="title">gp-prevalence</span> <span class="attribute">:&gt;</span> ?practice ?gp-name ?gp-registered-patients ?gp-diabetes-patients ?gp-prevalence)</span>
      <span class="list">(<span class="title">ops/sum</span> ?gp-registered-patients <span class="attribute">:&gt;</span> ?ccg-registered-patients)</span>
      <span class="list">(<span class="title">ops/sum</span> ?gp-diabetes-patients <span class="attribute">:&gt;</span> ?ccg-diabetes-patients)</span>
      <span class="list">(<span class="title">ops/sum</span> ?gp-total-net-ingredient-cost <span class="attribute">:&gt;</span> ?ccg-total-net-ingredient-cost)</span>
      <span class="list">(<span class="title">has-patients?</span> ?ccg-diabetes-patients)</span>
      <span class="list">(<span class="title">spend-per-head</span> ?ccg-total-net-ingredient-cost ?ccg-diabetes-patients <span class="attribute">:&gt;</span> ?spend-per-head)</span>)</span>)</span></code></pre>
<p>This actually makes sense if you&#39;re familiar with logic-based programming or have followed the impatient tutorial so I&#39;m relieved to be able to read through most of this code. If you&#39;ve not been doing this, or it&#39;s 8am and you don&#39;t do this for a living then seeing a codebase of this causes insteant headaches and nausea. An application of coffee later and it all makes sense.</p>
<p>I am however, on running it met with a couple of problems:</p>
<ul>
<li>Where is the data supposed to come from?</li>
<li>How do I run this stuff?</li>
</ul>
<h3>Repl driven development</h3>
<p>The way I&#39;ve been writing Clojure is via tests and a tight feedback loop built up around those tests. I have however been told on numerous occasions that I should be using the repl more and this codebase is an example of where the author is clearly a big fan of the repl!</p>
<p>There is also little automation in place for getting the data or executing the code because if you&#39;re familiar with the repl and you have the data already, then throwing code at the repl is the fastest way to put this together and that is what has been done.</p>
<p>So what does this look like? Littered through the codebase are paragraphs of Clojure that look like this:</p>
<pre><code class="lang-clojure">;; month,total_spend
#_ (?- (hfs-delimited &quot;./output/diabetes-total-spend-per-month-england&quot; :delimiter &quot;,&quot; :sinkmode :replace)
       (total-spend-per-month-england
        (diabetes-spend-per-ccg-per-month
         (diabetes-drugs
          (prescriptions/gp-prescriptions
           (hfs-delimited &quot;./input/prescriptions/pdpi&quot; :delimiter &quot;,&quot;))
          (ods/current-practices (hfs-delimited &quot;./input/ods/gppractice/epraccur.csv&quot; :delimiter &quot;,&quot;))))))</code></pre>
<p>See that <em>#_</em> stuff? That&#39;s a comment which means this code isn&#39;t compiled at all normally, but it&#39;s there so a hardy Emacs user can just execute the code by sending it from the editor to the Repl.</p>
<p><strong>I&#39;m a vim user, get me out of here</strong></p>
<p>So there&#39;s that.  Thankfully, a few people have written plug-ins to make Clojure development a bit more dreamy in Vim and a good starting point is the <a href="https://github.com/ctford/vim-fireplace-easy/">vim-fireplace-easy</a> repository put together by <a href="https://twitter.com/ctford">@ctford</a> which brings together a few plug-ins.</p>
<p><em>vim-fireplace</em></p>
<p>Vim-fireplace means that I get handy short-cuts for sending code to the repl for execution, I simply fire up a repl in one terminal, and vim in another terminal and then sticking my cursor over an expression and typing &#39;cpp&#39; means that expression being evaluated in that repl.</p>
<pre><code>  <span class="list">(<span class="title">+</span><span class="body"> <span class="number">4</span> <span class="number">5</span>)</span></span></code></pre>
<p>So, sending this to the repl would mean I&#39;d be given the answer &#39;9&#39;, or putting the cursor over the big expression above would result in a query being sent through Cascalog.</p>
<p><em>vim-clojure-static</em></p>
<p>This just brings in lots of good behaviour when dealing with braces/highlighting/etc - a must for any developer witing clojure in vim.</p>
<p><em>paredit</em></p>
<p>This will automatically force my parens to be balanced, as well as vectors, sets and double quotes - it also brings in handy keyboard shortcuts such as (LEADER+W) for surrounding my current selection with parens, or (LEADER+w &quot;) to surround it with double quotes.</p>
<h3>Doing it their way</h3>
<p>So, over the next few days I&#39;m going to do it <em>their</em> way, by building up a program bit by bit and sending it to the repl for evaluation. </p>
<p>In the next entry, I&#39;ll look at my task and how I start going about it.</p>
]]></description><link>http://codeofrob.com/entries/an-introduction-to-the-ohd-platform-via-repl-driven-development.html</link><guid isPermaLink="true">http://codeofrob.com/entries/an-introduction-to-the-ohd-platform-via-repl-driven-development.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 24 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[A Rob Update - A busy few months]]></title><description><![CDATA[<p>I asked for short-term work, and people responded and the past couple of months have found me doing quite a bit of work in C# and JavaScript, as well as throwing together a puppet set-up for a client (with a vagrant dev environment), and spending a couple of weeks at a data analytics company learning Cascalog and building some pretty charts. (As well as delivering a few conference talks)</p>
<p>It has been a great few months, and as we near the end of September I find myself with a few surprising findings:</p>
<p><strong>I actually quite like working in an office</strong></p>
<p>While I strongly desire the <em>freedom</em> to work from coffee shops (especially on those mornings where I just want to put my head down and throw some code at the laptop), when given this freedom I&#39;ve actually ended up going into the client offices on a regular basis. I enjoy joking with people, drinking coffee with people and making friends with the team.</p>
<p>This has definitely made <em>me</em> feel a bit more flexible with regards to the kind of client work I&#39;m happy to pick up.</p>
<p><strong>two weeks isn&#39;t always enough</strong></p>
<p>I&#39;ve been quite strict about taking work from clients that we keep it to very short term sprints of two weeks, with the idea that</p>
<ul>
<li>It encourages focus from the client - <em>what do you actually want from me?</em></li>
<li>It encourages focus from me - <em>I must ship it</em></li>
<li>It allows for me to get involved with a bigger variety of teams/technologies/products</li>
</ul>
<p>That said, I feel as if I left a bit of a trail behind me at one of my clients when I handed over what I&#39;d done but hadn&#39;t spent sufficient time (with a very busy team) making sure everybody understood what I had done, how far I was through it and what work was still remaining.</p>
<p>I feel as if I should be more flexible about this and under the right circumstances I think I&#39;ll be happy to take on a greater duration of work providing the reasons for this are clearly discussed.</p>
<p><strong>Folk only get fragments of my opinion over the internet</strong></p>
<p>Folk! While I might rant about Angular/KO/Ember/etc not being <em>necessary</em>, and definitely advocate the use of small libraries over all-encompassing frameworks, I&#39;m still <em>happy to work with these technologies</em>.</p>
<p>The number of people/potential clients who I have had this conversation with has genuinely surprised me and made me realise I need to tone it down a little bit when on this subject or any other for that matter. &quot;<em>Oh, we have work but it&#39;s AngularJS so will you actually like it?</em>&quot; - I&#39;m actually pretty pragmatic about this subject and will <em>always</em> defer to the team when I&#39;m project hopping because it would be unfair for me force them into doing something unfamiliar and then fly away again!</p>
<p><strong>I really enjoy learning</strong></p>
<p>While I&#39;ve always learned stuff through the projects I persue both in and outside of work, it has never been an actual <em>goal</em> to learn anything. However - I&#39;ve really started actively trying to learn Clojure/functional programming and during my time at Mastodon realised that some basic stats knowledge might go a long way in the industries in which the technologies I&#39;m enjoying at present.</p>
<p>So, I&#39;ve signed up to the Coursera Statistics One course for the next few months and intend on following that through. It&#39;s an exciting notion that I can just click a button on the internet and then be attached to an online learning course in which I&#39;ll be taught new skills.</p>
<p><strong>Where am I going with this</strong></p>
<p>Well, I&#39;ve got a few months now until the end of the year, and I&#39;m really enjoying doing what I&#39;m doing and I feel as if I&#39;m delivering real value to the clients I&#39;ve worked with so far. I want to plan out some work between now and the new year holidays that doesn&#39;t get in the way of my learning (statistics/clojure) and allows me to deliver some awesome things for people.</p>
<p>I think I&#39;d be happy to take on some longer term stuff (up to 6 weeks) for the right people, so please do get in touch if you have something. (Anywhere in Europe is good, I&#39;m also thinking I wouldn&#39;t mind getting out of London/England for a little bit too).</p>
<p>My hiring details can be found on my <a href="/hire.html">availability page</a>, just drop me an email at <a href="mailto:robashton@codeofrob.com">robashton@codeofrob.com</a> and we&#39;ll see what we can do together.</p>
]]></description><link>http://codeofrob.com/entries/a-rob-update---a-busy-few-months.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-rob-update---a-busy-few-months.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 23 Sep 2013 09:30:00 GMT</pubDate></item></channel></rss>