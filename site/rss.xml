<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><generator>NodeJS RSS Module</generator><lastBuildDate>Tue, 12 Feb 2013 16:34:07 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><item><title><![CDATA[Adding idle indexes to RavenDB]]></title><description><![CDATA[<p>As I mentioned <a href="/entries/working-at-hibernating-rhinos.html">yesterday</a>, I&#39;m currently doing a week or so of work at Hibernating Rhinos (more specifically on RavenDB).</p>

<p>One of the first things I was asked to look at was the indexing system in RavenDB, as there was a backlog of tasks and requests on these, which tie into each other in numerous ways.</p>

<p>I don&#39;t like working on more than one thing at once when I&#39;m Getting Things Done, and while it was tempting to jump right in and say <em>&quot;We need to do the feature where dynamic indexes can be turned off, deleted and compacted over time&quot;</em>, the task was broken up into a few discrete features - some which had been requested individually anyway.</p>

<p>That brings me to the first feature we added in the first few hours of starting work at the office, I sat down with <a href="http://twitter.com/ayende">@ayende</a> and added the capability for indexes to be idle.</p>

<h2>What does that mean? Why would we want to do it? </h2>

<p>In RavenDB, querying is cheap because the answers have already been pretty much worked out by the indexing process. The indexing process has to crawl over every document as they&#39;re added and run user-logic over those documents, this is a process that tends to be IO bound as well as using up a few CPU cycles.</p>

<p>Thus, the more indexes you have, the more work the database has to do during heavy write periods - and as some customers have many indexes and also undergo heavy write periods, it has been requested more than once that indexes be prioritisable - this feature is a big step in that direction. </p>

<p><img alt="" src="/img/idlewis.png"/></p>

<p>Indexes on the server now have a new flag, &quot;Priority&quot;, which can take the following values (Normal | Idle | Forced), the idea being that the user can use the administration console to set indexes that aren&#39;t as important to not be run during busy write periods, and instead only be processed during idle time.</p>

<p>The forced flag? Well, I&#39;ll write about that tomorrow when I cover how idle indexes have been used to make auto-indexing a bit cleverer.</p>]]></description><link>http://codeofrob.com/entries/adding-idle-indexes-to-ravendb.html</link><guid isPermaLink="true">http://codeofrob.com/entries/adding-idle-indexes-to-ravendb.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 12 Feb 2013 12:34:00 GMT</pubDate></item><item><title><![CDATA[Working at Hibernating Rhinos]]></title><description><![CDATA[<p>After a week off in the Western Isles, I&#39;ve started a stint on my <a href="/entries/i-am-not-looking-for-a-job.html">adventures</a> working in Israel for <a href="http://hibernatingrhinos.com">Hibernating Rhinos</a>.</p>

<p>Most of you are familiar with this company, but for those that aren&#39;t, it&#39;s <a href="http://twitter.com/ayende">@ayende</a>&#39;s company, and they make the profilers for various ORMS and that document database we all love, <a href="http://ravendb.net">RavenDB</a>.</p>

<p><img alt="" src="/img/ravendb.png"/></p>

<p>This is a good one for me,  I&#39;ve never been to Israel before so that&#39;s a big+1, I&#39;m already pretty familiar with the product and code-base having spent a while talking about it and contributing over the years - and as I&#39;ve just spent a holiday doing no code I&#39;m pretty excited to be getting some work done.</p>

<p>I made it through security at about 1am after being asked too many times &quot;what are you doing in Israel&quot; and being unable to think of a truthful answer that didn&#39;t make people suspicious. &quot;I&#39;m on a working holiday&quot; led to questions of payment and of course I&#39;m currently free as in beer so that&#39;s something I need to work on if I&#39;m going to any other countries with strict entry requirements.</p>

<p>Anyway, I&#39;ve got a car while I&#39;m here and an apartment for the next week and I&#39;m doing work on RavenDB, what work you ask? Well, like any good employer, Ayende has created a to-do list and let me get on with it how I like.</p>

<p>I quite like this way of working, &quot;Here is a pile of stuff that needs doing, get to it and ask if you need any help&quot;, no long meeting to align on vision and share synergies with stakeholders, no complicated requirements document or architecture plans - just a list of bullet points and the expectation that I&#39;ll go and seek the information that I need to get the job done. (Managers take note!).</p>

<p>This is also a very productive way of working, I&#39;ll talk more about the actual work I&#39;m doing in the next post, but what I can say is that I&#39;ve cleared most of what I was expected to do in the whole time I&#39;m here in the first couple of days of arriving. That&#39;s what Getting Things Done is all about and it aligns well with my aims of working on travelling.</p>

<p>How we are working is nice, as I said - there is a to-do list, that&#39;s publicly visible on <a href="http://issues.hibernatingrhinos.com">issues.hibernatingrhinos.com</a> under the tag &quot;Rob&#39;s sprint&quot;, I&#39;m working off a fork of the main project and keeping a pull request open as I go through - the current pull request can be found <a href="https://github.com/ravendb/ravendb/pull/502">here</a>, and here is a screenshot of that so far:</p>

<p><img alt="" src="/img/hrpr.png"/></p>

<p>And this is the issues list so far (green means &#39;done&#39;)</p>

<p><img alt="" src="/img/hryt.png"/></p>

<p>I&#39;ve got plans of tourism on Friday and Saturday (Sunday is a work day in Israel - that&#39;s something new I found out), maybe I&#39;ll put some photos online of me floating in the dead sea.</p>

<p>I&#39;ll write about the actual work I&#39;m doing in the next few entries.</p>]]></description><link>http://codeofrob.com/entries/working-at-hibernating-rhinos.html</link><guid isPermaLink="true">http://codeofrob.com/entries/working-at-hibernating-rhinos.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 11 Feb 2013 12:34:00 GMT</pubDate></item><item><title><![CDATA[Lots of small things]]></title><description><![CDATA[<p><strong>Questions:</strong></p>

<ul><li>&quot;But how do you maintain large JS codebases...&quot;</li><li>&quot;How do I build Enterprise Scale JS applications&quot;</li><li>&quot;How do I refactor across an entire project in JS&quot;</li></ul>

<p><strong>Answers:</strong></p>

<ul><li>You don&#39;t</li><li>Lots of small things</li><li>Build small things that do one thing well</li><li>You shouldn&#39;t build large JS codebases</li></ul>

<p>Etc</p>

<p>I almost started a drinking game at NodeDublin, &quot;take a drink every time somebody mentions the Unix Philosophy or one of the above statements&quot;, I&#39;m glad I did not - it was held in the Guinness Storehouse and I&#39;d have not lasted beyond the first couple of sessions had I gone through with it.</p>

<p>These are sentiments uttered at conferences, in meeting rooms, in blog comments, in blog entries and pretty much whenever the subject of large code-bases in JS come up. Normally uttered with a self-satisfied smirk and with little to no further guidance on how exactly one might go about it.</p>

<p>Sure, you can always fall back to Typescript or Coffeesript or KoolaidScript, sure you can leverage awesome IDEs like Webstorm, Visual Studio, etc, but we&#39;ve been building Enterprise Systems in C# and Java for years in this way, and the wheels of progress eventually stop turning because iteration becomes expensive, maintenance becomes 90% of the job and every meeting boils down to a question of &quot;legacy&quot;, &quot;compromise&quot; and  &quot;we are where we are&quot;.</p>

<p>So, this is what I am doing, this is my current recipe, a collection of the rules of thumb I am using for building an open source game engine (PrimoJS) in JavaScript in a way that doesn&#39;t make my brain run out of my ears whenever I want to write a new feature. (Caveat: I haven&#39;t &quot;released&quot; this engine, I am merely pulling it together out of code already written to help me do Ludum Dares faster)</p>

<p>This is client side JavaScript only in this project, all of this is equally applicable to JS in ASP.NET MVC projects, in J2EE-whatevs projects and probably your Ruby on Rails projects too.</p>

<p>TLDR: Browserify + npm + github = success</p>

<h2>NodeJS</h2>

<p>I don&#39;t care if you&#39;re not writing NodeJS for whatever reason, the command line tooling being built up in this area to help with JS is fantastic, and trying to use the copy-cat tooling being built up in your favourite Enterprise environment is just setting yourself up for frustration and trouble in the future. It&#39;s just an exe, get it and integrate it with your toolchain, make your life better today.</p>

<h2>Browserify</h2>

<p>Okay, I&#39;m a convert - I&#39;ve been talking AMD for a while now, and the idea of having to run a build script had put me off Browserify for a while - it turns out the development experience is pretty good and by the time you get to the browser to hit refresh, this is generally done already anyway. AMD is now dead to me.</p>

<pre><code>npm install -g browserify</code></pre>

<p>Once you have it, if you write your JS with node-flavoured CommonJS style require calls, you can package JS up for the client by running Browserify as part of your build script.</p>

<p><strong>app.js</strong></p>

<pre><code>var windowing = require(&#39;./windowing&#39;)
  , messaging = require(&#39;./messaging&#39;)


messaging.on(&#39;foo&#39;, function(message) {
  windowing.showMessage(message)
})</code></pre>

<p><strong>Then build</strong></p>

<pre><code>browserify site/app.js &gt; site/app-built.js</code></pre>

<p>This might be alarming at first, because it seems like concatenating these files might make the debug experience a thing of nightmares, but that&#39;s what the --debug flag is for:</p>

<pre><code>browserify site/app.js -o site/app-built.js --debug</code></pre>

<p>This inserts special directives into the JS so the browser knows what the original files were and they can therefore be opened and debugged in their original state.</p>

<p>I have a Makefile I copied from VoxelJS - it looks like this</p>

<pre><code>all: concat

concat:
  browserify site/app.js &gt; site/app-built.js

watch:
  browserify site/app.js -o site/app-built.js --watch --debug</code></pre>

<p>During development of my application, I type</p>

<pre><code>make watch</code></pre>

<p>and I don&#39;t have to think about this ever again.</p>

<p>Now, the cool part. With RequireJS I was always having to set up elaborate configuration scripts, &quot;You can find underscore over here, you can find jQuery over here, you can find this other legacy JS over here, please do these things with them&quot;, this was, in short, a ball-ache.</p>

<p>Browserify eschues this way of thinking, and simply says &quot;if it&#39;s a relative path, I&#39;ll use it, if it&#39;s a global path I&#39;ll look in node_modules&quot;</p>

<h2>NPM</h2>

<p>Here comes and important learning: <em>it is not enough</em> to simply use a require system, split your JS across multiple files in a folder and say &quot;my files are small and therefore I am building small things&quot;, having all your code in a single project is not sufficient encouragement to think about the boundaries between those files and before long you will find yourself with 10,000 lines of spaghetti JS across 100 files in a folder with relative include paths and feel the pain it causes when trying to change anything at all inside of that.</p>

<p><strong>NPM has the answer</strong></p>

<p>By saying &quot;I am going to build independent modules, and require them from my application as needed&quot;, you are making a statement of intent that those modules will have some fairly important qualities.</p>

<ul><li>A module should be re-writeable in a day without affecting the rest of the system</li><li>A module should export a single function that has clearly described responsibilities</li><li>A module is independently versioned &amp; published to the registry as its own thing</li><li>A module should therefore not be coupled to any of the modules that consume it, relationships should be uni-directional</li><li>A module has its own git repository and history</li></ul>

<p>For example, the biggest module in the PrimoJS eco-system is the core engine, at 700LOC, and that is <em>too big</em>, I am still harvesting that original codebase into smaller modules - this takes time because it is hard to go from big to small, it is hard to go from coupled to uncoupled and it is harder still when you are trying to be always making changes that roll forward, rather than backwards in terms of progress.</p>

<p>Nevertheless, PrimoJS is currently split across 16 modules, all of which fit the above list of requirements, they could all be used independently of each other, or more likely brought into a project that has pulled in the core engine and wants the additional functionality that these modules bring.</p>

<p>What does this look like in reality? This is the package.json of one of my &#39;example&#39; projects, the actual application using PrimoJS</p>

<pre><code>{
  &quot;name&quot;: &quot;centipede2013&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;dependencies&quot;: {
    &quot;send&quot;: &quot;~0.1.0&quot;,
    &quot;express&quot;: &quot;~3.0.3&quot;,
    &quot;underscore&quot;: &quot;~1.4.3&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;primo&quot;: &quot;&quot;,
    &quot;primo-animation&quot;: &quot;&quot;,
    &quot;primo-text&quot;: &quot;&quot;,
    &quot;primo-boundary&quot;: &quot;&quot;,
    &quot;primo-rigidbody&quot;: &quot;&quot;,
    &quot;primo-events&quot;: &quot;&quot;,
    &quot;primo-audio&quot;: &quot;&quot;
  },
  &quot;engines&quot;: {
    &quot;node&quot;: &quot;0.8.x&quot;,
    &quot;npm&quot;: &quot;1.1.x&quot;
  }
}</code></pre>

<p>The core engine is brought in, and then other components are brought in for use with that project, it is important to note that none of these components have a dependency on that core primo module, or vice versa - they are independent and could be used independently. 
What does this look like? Well, I can use NPM list to show me the dependency graph, which goes something like this:</p>

<pre><code>├─┬ primo@0.1.1
│ ├── primo-camera@0.0.0
│ ├── primo-canvas@0.0.0
│ ├── primo-counter@0.0.0
│ ├── primo-events@1.0.2
│ ├── primo-spritemap@0.0.0
│ └── primo-timer@0.0.0
├─┬ primo-animation@0.0.1
│ └─┬ primo-spritemap@0.0.1
│   ├── primo-canvas@0.0.0
│   └── primo-events@1.0.2
├── primo-boundary@0.0.0
├── primo-audio@0.0.6
├── primo-events@1.0.2
├─┬ primo-rigidbody@0.0.2
│ └── primo-utils@0.0.0
├── primo-text@0.0.0</code></pre>

<p>We&#39;ll notice that the spritemap is used several times, as is primo-events and primo-canvas. If I was using relative paths, this would be pretty messy and hard to trace, but with a package manager the relationship is clear and it is obvious that those modules are independent.</p>

<p>Fine, so what now? I have a folder on my hard drive that has a pile of other folders in them, each has its own package.json, its own git repository and can be developed independently - but this is hardly ideal from a development point of view is it?</p>

<p>An obvious question to be asked now, is &quot;If you have a bug in primo-animation that impacts your centipede application, how do you fix, test, verify and iterate on that bug without copying JS around and making a mess of things. (How often have you downloaded the source of NHIbernate in .NET and had to debug an issue with it that happens in your code base? It&#39;s not fun is it)</p>

<p>That&#39;s where NPM really shines, we have NPM link - one of the finest commands in the history of package management.</p>

<pre><code>cd components/animation
  /usr/local/lib/node_modules/primo-animation -&gt; /home/robashton/src/primo/components/animation
cd ../../examples-centipede
npm link primo-animation
/home/robashton/src/primo/examples-centipede/node_modules/primo-animation -&gt; /usr/local/lib/node_modules/primo-animation -&gt; /home/robashton/src/primo/components/animation</code></pre>

<p>NPM can set up symlinks, so editing the files in primo animation <em>in place</em>, will result in the changes being visible in the application as you make these changes.</p>

<p>This tells you a few things</p>

<ul><li>This is an explicit step, you have to conciously choose to edit across module boundaries</li><li>You shouldn&#39;t be doing this often on a stable system</li><li>Ideally, you&#39;d have a test harness so you can iterate and develop fixes/etc independently of the usage of the module itself</li></ul>

<p>Now, as the ever-pragmatic developer, I know that Primo right now is open to a lot of churn and I&#39;m happy to be editing across these boundaries occasionally (especially with new modules), but as modules become mature I shouldn&#39;t be touching them any more - and later on I might choose to swap one out for another that does it better anyway.</p>

<p>What&#39;s even better about the use of NPM is that I can pretty much forgoe that whole thing where I have a folder called &#39;libs&#39; with all sorts of crazy JS in it. That&#39;s a pretty sweet deal and something I can whole-heartedly get behind on.</p>

<h2>The Caveats</h2>

<p><strong>NPM</strong></p>

<p>It is worth pointing out that for client-side JS package management, the whole ecosystem is very much in the air -  we have Bower, Volo, Yeoman, Jam, etc. Each come with their own idea of a manifest, linking, dev etc.</p>

<p>For now, I don&#39;t see the point - NPM works really well and has already solved most of the problems inherent to a pure world of JS (We&#39;re not talking other kinds of deps such as HTML/CSS/etc - and for that Bower might still hold the answer)</p>

<p>The problem with NPM is that you&#39;re never sure which modules are client-side or server-side, not everything works everywhere - for example, the jQuery package in NPM is the server-side jQuery which makes life pretty confusing for now.</p>

<p><strong>Folder hell</strong></p>

<p>I have lots of folders, each with their own git repository, their own package.json, their own published state etc. This shouldn&#39;t bother me, because they&#39;re indepdendent and work done on these things should be independent - but that&#39;s not really the case when adding new features to a game that requires new code in primo-pritemap that requires new code in primo-canvas.</p>

<p>This shouldn&#39;t happen very often (and it doesn&#39;t, because having things that do one thing and needing it to do two things means you probably want two things, that second thing being a new thing), but when it does, and you&#39;re offline, you end up with folders that are out of date with regards to the published state of the package and the only way I can see to manage this is to go through all these folder and check manually whether I need to push and/or publish. This could be solved by tooling - any takers?</p>

<p><strong>Package hell</strong></p>

<p>I have lots of packages, each with their own git repo - but the primary use case is for usage within the PrimoJS eco-system - when you pull down primo for use in a new game you only get the core, and a lot of the time you might want animations, audio, physics etc.</p>

<pre><code>&gt; npm install primo --save</code></pre>

<p>There is nothing here to tell the developer that they might also want to do</p>

<pre><code>&gt; npm install primo-animations primo-audio primo-rigidbody --save</code></pre>

<p>I think this can be solved with documentation and tooling, maybe a command line script ala RoR for generating a new game&#39;s folder structure</p>

<pre><code>&gt; primo-create mynewgame
do you want all the default components available? (y/n)
&gt; y
do you want a level editor (y/n)
&gt; n
do you want a browserify build script? (y/n)
&gt; y</code></pre>

<p><strong>Module discovery + documentation</strong></p>

<p>Again, lots of small modules - where does the documentation go? Where does the user go to find answers to his questions when he has them? where does the user go to work out which module is for what?</p>

<p>I think this varies across projects, are your modules all part of the same eco-system? Are they truly standalone and usable wherever? I think for each &#39;tree&#39; of modules, a single <em>source</em> of information is useful - even if the sub-categories are just links to the documentation for the specific modules. Making the user go searching for the right module and the right documentation is just asking for trouble down the line. (So, in my case, it would be primojs.com and links to the available modules.</p>

<h2>Summary</h2>

<p>This is just one way of tackling this, but it is real world and it does work quite nicely (apart from the solveable caveats above). It will be interesting to see which direction client side dependency management will go over time, but CommonJS is not going anywhere anytime soon and is a safe bet to be building your project on (regardless of whether it is Browserify or Stitch/etc doing the packaging for you)</p>

<p>The most important part of all of this is creating the the modules to be standalone so you don&#39;t <em>have</em> to traverse across them when building new features or fixing bugs. Replacing folders with modules is for nought if you don&#39;t actually make modules.</p>

<h2>Links</h2>

<ul><li>Browserify <a href="http://github.com/substack/node-browserify">http://github.com/substack/node-browserify</a></li><li>NodeJS <a href="http://nodejs.org">http://nodejs.org</a></li><li>NPM <a href="http://npmjs.org">http://npmjs.org</a></li><li>PrimoJS (not &quot;released&quot; yet) <a href="http://github.com/robashton/primojs">http://github.com/robashton/primojs</a></li><li>VoxelJS <a href="http://github.com/maxogden/voxel">http://github.com/magogden/voxel</a></li></ul>]]></description><link>http://codeofrob.com/entries/lots-of-small-things.html</link><guid isPermaLink="true">http://codeofrob.com/entries/lots-of-small-things.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 25 Jan 2013 12:34:00 GMT</pubDate></item><item><title><![CDATA[Why work for free]]></title><description><![CDATA[<p>I&#39;ve been asked this question a number of times since making my offer to <a href="http://codeofrob.com/entries/i-am-not-looking-for-a-job.html">travel around and do some free work</a> for those that were fast enough to get their offers into my inbox last week.</p>

<p><em>Why work for free?</em></p>

<p>Let&#39;s shorten this and ask </p>

<p><em>Why work?</em></p>

<p>Most people will respond to this question with an answer involving <em>money</em>, and those that don&#39;t are either lying or already rich because the world does not operate around good will and pixie dust.</p>

<p>You can follow this up with another question</p>

<p><em>Do you enjoy your job?</em></p>

<p>Sometimes you get a genuine yes for this question, mostly with founders, small start-ups and independent developers, sometimes you get a <em>yes</em> from full-time employees and on digging into this <em>yes</em> you can find something interesting out by asking the question</p>

<p><em>Why do you enjoy your job?</em></p>

<p>I very rarely hear &quot;We get to build great stuff&quot; or &quot;I learn a lot every day&quot;, it&#39;s usually &quot;Oh, it&#39;s not perfect but I do get all the free coffee I can drink at my workplace&quot;, or &quot;I have to sit in a lot of meetings but I find it fun to play the politics to get my preferred technological approach into the software&quot;, or &quot;I don&#39;t get to write much code any more, but it&#39;s fun trying to work at the high level instead of the coal face&quot;</p>

<p>Sometimes you&#39;ll find that they are genuinely saying the things above and meaning them, sometimes you&#39;ll find that they are merely rationalisations that we&#39;ve built up so we don&#39;t spend every day weeping silently into our (free) coffee.</p>

<p>It&#39;s fair enough, our job is to build software - not have a great time pontificating and learning about the newest and latest shinies and most people working in our industry have realised this. Incidentally this is why the phrase &quot;we need to be pragmatic&quot; has crept into our dialogue as a common weapon to be wielded against anybody insolent enough to suggest doing something differently.</p>

<p>Some of this isn&#39;t fun, but what generally ends up mattering to a developer is that the good things outweigh the bad - things like</p>

<ul><li>I get time to learn new things outside the day to day treadmill</li><li>We have weekly brown-bag sessions where we share what we have learned</li><li>We are building something that people are going to actually use and love</li><li>I love being part of a team so committed to delivery</li><li>We get to solve genuinely interesting problems</li><li>We get to drink free coffee</li></ul>

<p>Outweighing</p>

<ul><li>We have way too many meetings</li><li>We were doing waterfall, but we tried to do agile but that just means we have a wall full of post-it notes and no real requirements</li><li>I don&#39;t get to write much code any more</li><li>There is too much politics at the workspace</li><li>We don&#39;t have enough space to work in</li><li>There isn&#39;t a good training plan</li></ul>

<p>We&#39;ve already established that a lot of developers work because they find what they do interesting. There is an inherent challenge in building software, managing complexity, managing expectations, managing managers and balancing all that managing against the task of actually building software. Sad fact of life is that at most organisations with more than 12 people in them, the negatives mentioned above end up outweighing the positives and we fall back on the rationalisations I&#39;ve already mentioned.</p>

<p>So, back to the heart of it</p>

<p><em>Why do you enjoy software development</em></p>

<p>Personally? The main reasons I enjoy software development are mentioned above, but my personal bullet-point list is</p>

<ul><li>I love building things, I love seeing a product that people are going to use that I helped make</li><li>I love learning things, I love learning about how better to deal with the problem of &quot;code&quot;, how better to deal with issues of complexity (both real and imagined)</li><li>I love working with teams to better do the above, I love both spreading and changing my ideas via meaningful contact with those teams</li><li>I love sticking my headphones on, and bashing out code for a few hours in vim</li></ul>

<p>It is hard in a long-term contract to be able to do the above sometimes, a lot of products I&#39;m called to work on are never going to be seen by a real human being outside of the company, a lot of the products are being sold to people who want to spend money to manage their money that they made by moving money around and aren&#39;t making an impact on any real hhuman beings (It&#39;s where I get a lot of my money from so I shouldn&#39;t complain too much). </p>

<p>It&#39;s hard in a long-term contract to be learning constantly from the actual work at hand, it&#39;s hard to be constantly teaching. After a month of work with the same team, you&#39;ve had some massively accelerated information share, worked out how best to compromise with each other and you&#39;re lucky if you get any external input (this sort of siloed development is too common). This is okay, and it is something I have ended up being a part of many times and I&#39;ve been a part of many such teams where we have gone on to release good solid software to satisfied customers and this is not to be understated.</p>

<p>It is hard in a long term contract however to not become stale, and I don&#39;t want to be stale, I want to carry on being relevant, I want to continue being knowledgable, I want to keep on being told I&#39;m wrong and learning from that, I want to be a vector of external ideas - as a friend put it recently &quot;a cross-pollinator&quot;.</p>

<p>I want to do the bits I enjoy for a few months without too much of the stuff I don&#39;t enjoy.</p>

<p><em>Why do it for free then?</em></p>

<p>I want to cram a whole pile of experience into a few months, I want to be a better developer, I want to work with real teams on real things and I want to trade experience with those teams - <em>that</em> is my payment and this will also add to my long-term value. </p>

<p>With paid work, I might get a contract a month and be asked to come and deliver training on say, Javascript or NoSQL, I might get asked to do some external review and if I&#39;m lucky I&#39;ll be asked to pair with some developers - but the point is that money gets in the way of the relationship between me and the client, and more importantly between me and the developent team.</p>

<p>It is still not a one way trade if I am not being paid in currency, it is still a trade that sees both sides profit and when it comes to delivering value to paid clients later in the year it will carry on paying dividends even then. The relationship has changed though, and instead of being an external consultant who is being paid to be there and whose value must be extracted even if it means resentful developers, I am an external agent of knowledge <em>sharing</em> and I am there because <em>I want to be there</em>.</p>

<p>Not only that, but I can&#39;t actually make enough room in my calendar to make room for all the offers and I can therefore squeeze an great amount of experience into a small space of time. The new ideas, the knowledge and the new skills this will tender is worth a whole lot more to me than currency.</p>

<p>So why work for free? It changes the trust-relationship between me and the team, it makes my motivation obvious to those involved with me and I can learn a lot more in a smaller amount of time.  </p>

<p>If I was rich enough to retire, this is something I would <em>choose</em> to do - and that is something we should all be so lucky to say about our jobs.</p>]]></description><link>http://codeofrob.com/entries/why-work-for-free.html</link><guid isPermaLink="true">http://codeofrob.com/entries/why-work-for-free.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 11 Dec 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[I am not looking for a job]]></title><description><![CDATA[<p>After a productive weekend in Vilnius at the &quot;We Actually Build Stuff&quot; conference, I came back to the client I have been spending most of my time with in Belgium these past two years feeling a bit despondent.</p>

<p>Why was I still there? I had already made my intent clear a month ago - that after this contract expired I wasn&#39;t going to renew, I had saved enough money to survive for a year if need be, I was not exactly enjoying what I was doing (for many of the standard self-defeating enterprise issues) and as one of my friends put it &quot;Staying just to save some extra cash just seems like a stupid idea if you&#39;re not enjoying it&quot;</p>

<p>So I went in, found myself unable to function any more and decided to expediate the process of leaving, kindly they came to an agreement and I was able to head off providing I reply to a few e-mails :-).</p>

<p>Many folk have already offered that I come and take a job with them, and while their hearts are in the right place, I wish to make it known that this is not what I want to do for the next couple of years.</p>

<ul><li>I want to do something meaningful</li><li>I want to work with smart people</li><li>I want to focus on creating value</li><li>I want to build stuff</li><li>I want to help other people build stuff</li></ul>

<p>I actually have some semi-concrete plans next year that will make all of this happen, this will take a few months to put into place though and in the meanwhile I have an offer for YOU, if you are interested and feeling brave.</p>

<p>I am offering the following two things</p>

<p><strong>I will come and spend a few days (1-2 weeks) at your workplace (in Europe), building stuff for expenses and a roof over my head</strong></p>

<p>Seriously, I don&#39;t have much to do (I have a few paid commitments which will take priority, but other than that plenty of time) and I want to help you Build Stuff, for FREE. </p>

<p>Of course you are perfectly welcome to toss me a few euros for my time as well, but whatever, money is not important for the next few months at least.</p>

<p>I can help you with your Javascripts, your .NETs and your NoSqls, I am especially interested in helping teams who are <em>new</em> to JS get to grips with it quickly, I am very intersted in discussing difficult migration paths from legacy code (such as Silverlight for example).</p>

<p>If you are building games, then I am <em>especially</em> interested in coming to say hello, even if you&#39;re in somewhere boring like Guildford ;-)</p>

<p><strong>I will cook you a curry for a roof over my head</strong></p>

<p>Coupled with the first offer, if you&#39;re the developer putting me up then I&#39;ll cook you a curry, I&#39;m pretty practised at this and can tailor this to your tastes if asked - this is a serious offer, I love cooking and I love coding - what is better than combining the two.</p>

<p>Anyway, if either of these appeal to you, get in touch at <a href="mailto:robashton@codeofrob.com">robashton@codeofrob.com</a> or twitter <a href="http://twitter.com/robashton">@robashton</a></p>

<p>My availability can be seen publicly at <a href="https://www.google.com/calendar/embed?src=robashtondeveloper%40gmail.com&amp;ctz=Europe/Brussels">google calendars</a></p>]]></description><link>http://codeofrob.com/entries/i-am-not-looking-for-a-job.html</link><guid isPermaLink="true">http://codeofrob.com/entries/i-am-not-looking-for-a-job.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 11 Dec 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[Learn Functional Programming With Me - Attributes And Vectors]]></title><description><![CDATA[<p>So last time I left the program, I had a black square which moved across the page but left a delightful black smear across the window, it looked something like this:</p>

<p><img alt="Black smear" src="/img/blackline.png"/></p>

<p>I promised I&#39;d add keyboard input this time around, and I don&#39;t like to lie - so while I sit here at my client&#39;s rather amazing karting day I&#39;ve decided to give adding this a go as I don&#39;t really like karting that much ;-).</p>

<p>First things first, I need to clear my screen in between frames or I&#39;m going to keep on having an ugly black smear instead of a moving black square, in JS this would look like.</p>

<pre><code>context.clearRect(0, 0, width, height);</code></pre>

<p></p>

<p>Not rocket science, right?</p>

<p>Well, right now, I have the function for drawing a square, which gets the context and draws a square, this looks like</p>

<pre><code>(defn drawSquare [x y w h]</code></pre>

<p>
      (let [target (.getElementById js/document &quot;target&quot;)
            context (.getContext target &quot;2d&quot;)]
        (.fillRect context x y w h)
      )
    )</p>

<p>Great, but in order to have the moving square, I&#39;m going need that context more than once, and making multiple requests to get the context is a bad idea because it means lots of calls to the DOM (slow).</p>

<p>Clearly this means I&#39;m going to need three functions for my purposes:</p>

<pre><code>(defn clearScreen [ctx]</code></pre>

<p>
      (.clearRect ctx 0 0 WIDTH HEIGHT)
    )</p>

<pre><code>(defn drawRect [ctx x y w h]</code></pre>

<p>
      (.fillRect ctx x y w h)
    )</p>

<pre><code>(defn context []</code></pre>

<p>
      (let [target (.getElementById js/document &quot;target&quot;)]
      (.getContext target &quot;2d&quot;))
    )</p>

<p>Meaning I can do</p>

<pre><code>(defn drawScene [x]</code></pre>

<p>
      (let [ctx (context)]
        (clearScreen ctx)
        (drawRect x 0 100 100)
      )
    )</p>

<p>Now, you&#39;ll have noticed (if you&#39;re actually paying attention), that I have a &#39;Width&#39; and &#39;Height&#39; parameter for clearScreen that I haven&#39;t bothered trying to filter - that&#39;s because they&#39;re attributes of the Canvas Element and I need to get the darned things from that element and I haven&#39;t worked out a clean way of passing these things around (or retrieving them all from a function so I have the values present at that time. (Remember that I am trying to avoid global state, and as far as I know I haven&#39;t got &quot;Types&quot; for storing collections of data in.</p>

<p>Okay - so first things first, how do I get attributes from an HTML element? HTML elements? Attributes? These aren&#39;t Clojure concepts - I can do a quick Google and see that this is possible:</p>

<pre><code>(. target -width)</code></pre>

<p></p>

<p>According to the Wiki on Clojurescript, this is just part of the &quot;host interop&quot; featureset - I&#39;m not entirely sure how this maps to typical Clojure.</p>

<p>Now - this still means I have the problem of how to get these out of a function, in JS I&#39;d probably have something like</p>

<pre><code>var Rendering = function(element) {</code></pre>

<p>
      this.context = element.getContext(&#39;2d&#39;);
      this.width = element.width;
      this.height = element.height;
    }</p>

<p>Or something trite like that (see my other canvas codes in Github for what this actually looks like).</p>

<p>Can&#39;t do this here as far as I know, turns out I can return a vector, or a list or a set or something from a function (duh), so I can do something like</p>

<pre><code>(defn context []</code></pre>

<p>
      (let [target (.getElementById js/document &quot;target&quot;)
        [
          (.getContext target &quot;2d&quot;)
          (. target -width)
          (. target -height)
        ]
      )
    )</p>

<p>Which will return a vector containing</p>

<pre><code>[context width height]</code></pre>

<p></p>

<p>I can pass this into my clearRect function for example with</p>

<pre><code>(defn drawScene [x]</code></pre>

<p>
      (let [ctx (context)]
        (clearScreen ctx)
        (drawRect x 0 100 100)
      )
    )</p>

<p>So nothing different here, but I&#39;ll need to unpack that vector in order to use it</p>

<pre><code>(defn clearScreen [ctx]</code></pre>

<p>
      (let [[context width height] ctx
        (.clearRect context 0 0 width height)
      )
    )</p>

<p>Which is a bit verbose, or doing a bit of research it appears I can automatically unpack that vector when I call the function ala</p>

<pre><code>(defn clearScreen [[context width height]]</code></pre>

<p>
      (.clearRect context 0 0 width height)
    )</p>

<p>I&#39;m not entirely sure how I feel about this, I&#39;m just passing blobs of data around and assuming their structure in my functions - does Clojure have any inference over this stuff for verifiability (I&#39;m not sure) - seems I&#39;m losing a lot of the safety I&#39;d have with OO constructs (regardless of type safety or whatever).</p>

<p>Either way, my complete program currently looks like this:</p>

<pre><code>(ns game)</code></pre>

<p></p>

<pre><code>(defn context []</code></pre>

<p>
      (let [target (.getElementById js/document &quot;target&quot;)]
        [
          (.getContext target &quot;2d&quot;) 
          (. target -width)
          (. target -height)
        ]
      )
    )</p>

<pre><code>(defn clearScreen [[ctx width height]]</code></pre>

<p>
      (set! (. ctx -fillStyle) &quot;#FFF&quot;)
      (.clearRect ctx 0 0 width height) 
    )</p>

<pre><code>(defn drawSquare [[ctx width height] x y w h]</code></pre>

<p>
      (set! (. ctx -fillStyle) &quot;#000&quot;)
      (.fillRect ctx x y w h) 
    )</p>

<pre><code>(defn tick [x]</code></pre>

<p>
      (let [ctx (context)] 
        (clearScreen ctx) 
        (drawSquare ctx x 0 100 100)  
        (if (&lt;= x 1000) 
          (js/setTimeout (fn []
            (tick (inc x)) 
          ) 33  )
        )
      )
    )</p>

<pre><code>(defn ^:export init []</code></pre>

<p>
      (tick 0) 
    )</p>

<p>This has the effect of drawing a square, clearing the rect and drawing the square again, which means my square floats across the screen.</p>

<p>Seems I&#39;ve once again run out of room to talk about input to this program from the keyboard, hopefully I&#39;ll reach that next entry!</p>

<p>I still have some pending questions from these two entries:</p>

<ul><li>The recursive setTimeout with the anonymous closure?</li><li>Passing that vector around - is this a good idea?</li></ul>

<p>Anybody feel free to chip in at any time.</p>]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---attributes-and-vectors.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---attributes-and-vectors.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 15 Jun 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[Learn Functional Programming With Me - Moving The Square]]></title><description><![CDATA[<p>So, last session I managed to get a square being drawn, as if I haven&#39;t done that a thousand times in JS - now to do something a bit more dangerous (because it involves state), and more likely to get me in trouble - let&#39;s move the square around using the keyboard.</p>

<p><strong>Reminder</strong>: The source for all of this can be found at <a href="https://github.com/robashton/clojure-spaceinvaders">github.com/robashton/clojure-spaceinvaders</a></p>

<p>Parameterising the function
------------</p>

<p>This is a no-brainer, I&#39;m going to need to know where to draw this thing, I start off by passing in the state required to draw a rect to my function.</p>

<pre><code>(defn drawRect [x y w h]</code></pre>

<p>
      (let [target (.getElementById js/document &quot;target&quot;)
            context (.getContext target &quot;2d&quot;)]
         (.fillRect context x y w h)           
      )
    )</p>

<p>So far so good - but now I&#39;m going to need to not only pass in those variables, but - well they&#39;re going to have to be variable (somehow) because they&#39;re going to have to change each frame and it&#39;s stuff like this that makes me break out in a cold sweat because I haven&#39;t discovered the patterns to solve this type of problem yet.</p>

<p>Let&#39;s explain - you see that &#39;let&#39; statement, the values I&#39;ve defined there, those key value pairs are <em>immutable</em>, this means I cannot change them - for example, if I want to make this square move of its own voilition, the literal equivalent of</p>

<pre><code>for(var x = 0; x &lt; 1000; x++)</code></pre>

<p>
      drawRect(x, 0, 100, 100);</p>

<p>Doesn&#39;t exist.</p>

<p>Now, if I were to make my best guess at how to solve this, I&#39;d say that we need a function that takes in x, and then calls itself with x+1, for example at a conceptual level:</p>

<pre><code>function drawAndMove(x) {</code></pre>

<p>
      drawRect(x, 0, 100, 100)
      if(x &lt;= 1000)
        drawAndMove(x+1)
    }
    drawAndMove(0);</p>

<p>This actually maps across to a construct in our chosen world that looks something like the following:</p>

<pre><code>(loop [x 0]</code></pre>

<p>
      (drawRect x 0 100 100)     
      (if (&lt;= x 1000)
        (recur (inc x))
      )
    )</p>

<ul><li>I want to loop, I want the following values available in this loop (x = 0)</li><li>Please draw the rect at x,0,100,100</li><li>If x &lt;= 1000, recurse and increment x</li></ul>

<p>Okay, this is a bit crazy and verbose - perhaps there is a better more shorthand way of doing this (anybody care to chip in around now?), but Imma press ahead and say that actually, that is not the greatest loop of all time.</p>

<p>We actually have to yield to the UI thread each &#39;frame&#39; which blows this whole thing out of the water - that&#39;s not to say that this code isn&#39;t functional - because I love having a row of black drawn over my canvas on the UI thread with no user interaction whatsoever - but we actually need something like the following</p>

<pre><code>function tick() {</code></pre>

<p>
      logic();
      render();
      setTimeout(tick, 33);
    }</p>

<p>Again, cutting a corner here because I don&#39;t want to write a full on game loop in clojure just yet.</p>

<p>Figuring it out, I&#39;ve ended up with something like this</p>

<pre><code>(defn tick [x]</code></pre>

<p>
      (drawRect x 0 100 100)
      (if (&lt;= x 1000)
        (js/setTimeout (fn []
           (tick (inc x))
        ) 33  )
      )
    )</p>

<pre><code>(defn ^:export init []</code></pre>

<p>
       (tick 0)
    )</p>

<ul><li>Define a function called tick, which takes in the current position of our object</li><li>Draw a rect at that location</li><li>If x is still less than 1000, then</li><li>In 33 milliseconds, call tick again but with x+1</li></ul>

<p>I&#39;ve actually gone far enough for a single blog entry at this point so I&#39;ll leave keyboard input till another day - I have some thoughts about this work so far however:</p>

<ul><li>That setTimeout doo-hick is taking in an anonymous function, am I creating this function every frame? I wouldn&#39;t do that in most of my JS, it&#39;s effectively the same as creating a closure in a loop - not good?</li><li>I saw something like this that used global state and an atom, and then tick could be called with no parameters - is this a better solution? It seems somewhat against what functional programming is about</li><li>Thoughts?</li></ul>]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---moving-the-square.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---moving-the-square.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 13 Jun 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[Learn Functional Programming With Me - Drawing A Square]]></title><description><![CDATA[<p>So.. setting up in ClojureScript isn&#39;t the most exciting thing I&#39;ve ever done - however, following the instructions at the <a href="https://github.com/clojure/clojurescript/wiki/Quick-Start">project wiki</a> got me set up with a basic build pipeline which allows me to include ClojureScript into the browser.</p>

<p>You can find what I&#39;ve done and all the work so far here: <a href="http://github.com/robashton/clojure-spaceinvaders">github.com/robashton/clojure-spaceinvaders</a>.</p>

<p>Intro
----------</p>

<p>My mission today will be to draw a square on a canvas object, nothing more than that - as there will be quite a few concepts to learn just to get this far.</p>

<p>Moving on then, I&#39;m going to start off by doing most of my work in &#39;game.js&#39; and I don&#39;t think I need to export any variables to the outside world, so that keeps things tidy.</p>

<p>About that - as far as I see it, what I want to build is a simulation of Space Invaders, which is as stateless and as side effect free in nature (or as far as is practical - whatever that means). This simulation will be the core of everything - and the side effects will exist on the periphery, in so far as updating the canvas and interacting with the user goes.</p>

<p>Some basic syntax
---------------</p>

<p>So, how do I begin? Well, I guess I&#39;d better get the rest of you caught up with me in understanding Clojure Syntax.</p>

<p><em>this is a traditional function call</em></p>

<pre><code>foo(x, y)</code></pre>

<p></p>

<p><em>this is a Clojure function call</em></p>

<pre><code>(foo x y)</code></pre>

<p></p>

<p><em>this is a traditional function definition</em></p>

<pre><code>function foo(x, y) {</code></pre>

<p>
       console.log(x, y)
    }</p>

<p><em>this is a Clojure function definition</em></p>

<pre><code>(defn foo [x, y]</code></pre>

<p>
      (log x y)
    )</p>

<p>This should be enough to get us started at least. Apparently some of these things we put after the first paren are not only functions, but special forms or macros - but as I haven&#39;t learned anything about them yet, I&#39;m happy in my world of pretending they&#39;re all just functions.</p>

<p>So, how am I going to start off in my happy world of Clojurescript? I need to create an HTML5 Canvas Context so I can do  things with it, and in order to do that I need to need to wait for the DOM ready event and oh oh oh - oh dear, <em>all of this looks like it might be hard because these are all external systems to my happy ClojureScript world and will involve some initial pain - oh well I wanted to learn how to do something practical and nearly all things practical are going to involve talking to external systems so I&#39;d better get the pain over with <strong>OH IT HURTS IT HURTS.</strong></em></p>

<p>Ahem.</p>

<p>Getting a function called on start-up
-----------------</p>

<p>Ever the pragmatist, rather than re-implement the standard fuzz around this stuff in Clojure, or pull in jQuery or anything I&#39;d do in JS, we&#39;ll just go with the body onload event, and rely on it calling a global function that I export from my game.js.</p>

<pre><code>(ns game) </code></pre>

<p>
    (defn ^:export init [] </p>

<pre><code>) </code></pre>

<p></p>

<p>Given a body declaration of something like</p>

<pre><code>&lt;body onload=&quot;game.init();&quot;&gt;</code></pre>

<p></p>

<p>That funky export thing just tells the Google Closure compiler not to mangle the name of the function (the ClojureScript compiler runs output through Closure - yes, that is confusing when you read it out loud).</p>

<p>How do I test it works? Well inside my init function, let&#39;s access our first native object and see what the syntax is for that.</p>

<pre><code>(.log js/console &quot;Hello World&quot;)</code></pre>

<p></p>

<p>Actually not too bad, &quot;Please call .log - which exists on the object js/console, and pass in &quot;Hello World&quot; as parameters.</p>

<p>Great - so I&#39;m now printing hello world, how are we going to draw a square to our canvas? Well first we&#39;ll need a context object, and in order to get that context object, we&#39;ll have to get a canvas object and call a method on it - this will mean having a variable of some sort from which we can gain other functionality.</p>

<p>Introducing some more syntax.
----------------</p>

<p><em>Traditional variable declaration</em></p>

<pre><code>var x = 0;</code></pre>

<p></p>

<p><em>Clojurescript variable declaration</em></p>

<pre><code>(let [x 0] </code></pre>

<p>
      (doStuff x)
    )</p>

<p>So, two things here - we have this &#39;let&#39; thing, into which you pass in a vector of key-value pairs (x and 0 in this case, so x = 0), and then a body of code doing things with those values.</p>

<p>Ah yes, Clojure has vectors, which are square brackets which contain a bunch of things. (parens are just lists of things, hence &#39;LISP&#39; apparently). The difference between the two? Well, for my purposes right now, one has square brackets and the other has parentheses - I&#39;m sure it will become clearer in the future.</p>

<p>Drawing my square
--------------------</p>

<p>Anyway, expanding all of this we can get the following in order to do draw a square on our canvas</p>

<pre><code>  (ns game)</code></pre>

<p></p>

<pre><code>  (defn drawSquare []</code></pre>

<p>
        (let [target (.getElementById js/document &quot;target&quot;)
              context (.getContext target &quot;2d&quot;)]
           (.fillRect context 0 0 100 100)
        )
      )</p>

<pre><code>  (defn ^:export init []</code></pre>

<p>
         (drawSquare)
      )</p>

<ul><li>Create a function called drawSquare, taking in no parameters</li><li>Let target = the result of calling getElementById on the document with a parameter of &#39;target&#39;</li><li>Let context = the result of calling getContext on target with a parameter of &#39;2d&#39;</li><li>Call fillRect on context, with parameters of 0,0,100,00</li><li>When init is called, call drawSquare with no parameters</li></ul>

<p>I guess we learn something else here, which is you can make a nice little chain of lets that all feed into each other, as you&#39;d kinda hope.</p>

<p>Next, we&#39;ll see about drawing a basic representation of our &#39;defender&#39; and move it around using the keyboard (probably)</p>]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---drawing-a-square.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---drawing-a-square.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 12 Jun 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[Learn Functional Programming With Me - A Mission Statement]]></title><description><![CDATA[<p>I was at NDC2012 last week and ended up hanging around the tongue-in-cheek &quot;Hipster stand&quot; along with a fine bunch of people who sat around coding and chatting most of the week on various interesting projects.</p>

<p>One of those fine people was <a href="https://twitter.com/bodiltv">@bodiltv</a> who proclaimed their love for Lisp, Emacs and various other things that I thought (like most people) I&#39;d left behind after university never to touch again.</p>

<p>However, functional programming is something that is seeing somewhat of a re-emergence in the crowds of people who I tend to lump into a bucket of &quot;Smarter than Rob&quot;, and I was looking for an excuse to give it a go - having to build something with somebody sat next to me to show me the ropes was an excellent motivator.</p>

<p>Over the course of a couple of hours on Thursday, <a href="https://twitter.com/bodiltv">@bodiltv</a> and I sat down and wrote a simple little script that looks something like this:</p>

<pre><code>(ns foo.core </code></pre>

<p>
    (:use [net.cgrand.enlive-html :as html])  
    )</p>

<pre><code>(def BASEURL &quot;https://en.wikipedia.org/wiki/&quot;)</code></pre>

<p></p>

<pre><code>(defn fetch-url [url]</code></pre>

<p>
      (html/html-resource (java.net.URL. url)))</p>

<pre><code>(defn define</code></pre>

<p>
      &quot;Fetches a page from wikipedia and prints the first paragraph&quot;
        [q]
          (let [url (str BASEURL q)
               content (fetch-url url)]
               ((comp html/text
                      first
                      html/select) content [:#mw-content-text :p])
          )
    )</p>

<p>We also then looked at futures and how such things like that could help us, and with the knowledge of state being immutable know that we were safe when doing so. I then asked the question that most people ask when encountering this stuff for the (first/second) time, &quot;How on earth do you build something <em>real</em> with this stuff&quot;.</p>

<p>So here goes, a mission statement - <em>I am going to build space invaders on top of HTML5 Canvas with Clojurescript</em>.</p>

<p>Yes, I am breaking out the blog again and relying on YOU, the reader who knows more about these things than I do to guide me on my way as I inevitably make lots of mistakes.</p>

<p>It&#39;s hard to do this, because on the surface of things it seems so far away from the style of development I am used to, but by learning out in the open I am hoping we&#39;ll accelerate the process of getting to the point where I can be productive in a functional environment.</p>

<p>Next entry: Let&#39;s see what my environment is going to look like, how I am going to interact with the Canvas and structure myself during this experiment.</p>]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---a-mission-statement.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---a-mission-statement.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 11 Jun 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[Github Live]]></title><description><![CDATA[<h5>Visualize git 'pushes' live as they happen across Github.</h5>

<p>I visited <a href="https://twitter.com/#!/cranialstrain">@cranialstrain</a> in England this weekend, and he suggested we hack something together around the Github APIs in response to the <a href="https://github.com/blog/1118-the-github-data-challenge">Github data challenge </a>.</p>

<p>Looking at the Event stream, I thought it would be interesting to visualise what was going on in live, in a web browser, and given all the toys I've written over the past year or so in NodeJS, it was fairly clear that a simple web server processing the events and broadcasting them to clients wouldn't take a lot of work to complete.</p>

<p>So, we ended up with <a href="http://githublive.codeofrob.com">Github Live</a>, which looks something like this once you've left it running for five minutes (during the morning, so it's a bit quiet)</p>

<a href="/img/githublive.png"><img src="/img/githublive.png" width="640px"></img></a>

<p><strong>The server side</strong></p>

<p>The server is using Node, which is operating as a basic static file server, and as a point of call for incoming sockets with socket.io.</p>

<p>It starts off every 10 seconds polling the Events API, storing the most recent timestamp so to avoid publishing duplicates (the events API doesn't have a "last retrieved id").</p>

<p>It attempts to throttle requests to the events API to avoid the amount of duplicate events being retrieved from the API (if it finds an overlap, it increases the time until next request by a second, and if it doesn't, it decreases by a second).</p>

<p>In hindsight, the hideous inline callbacks would be best replaced with a stream that did all this work, and just published events transparently to the consuming code.</p>

<p>The next job, once this has taken place is that a request is made to Github for each pull, asking for information about the repository (for the language), so the events being streamed to the clients can be augmented with this information.</p>

<p>This is another thing that should be dealt with by a stream rather than inline callback soup.</p>

<p>Oh well, it's only 200 lines of throwaway code, perhaps something to tidy up on a rainy day.</p>

<p><strong>The client side</strong></p>

<p>Because it's quick and easy, we're using HTML and CSS3 to do display and transformations.</p>

<p>As the events stream in from the server, some HTML is created for the event and it is put in an appropriate bucket (for the language being used).</p>

<p>The outside container has a CSS transition applied to it, and the transform 'scale' is set to fit all buckets into the same window periodically.</p>

<p>From this I have ascertained that</p>

<ul>
<li>I dislike vendor prefixes</li>
<li>these are not as fast as I'd like</li>
<li>Webkit has some unusual glitches if you're not careful</li>
</ul>

<p>I guess with some more work, these things could be worked around, there are some definite performance improvements that could be made client side here.</p>

<p>I'd quite like to give an SVG implementation a go, and see about the performance of that. Another project for a rainy weekend.</p>

<p><strong>The code</strong></p>

<p>The code in all its (raw) form can be found at<a href="https://github.com/robashton/githubfall"> https://github.com/robashton/githubfall</a></p>

<p>I'd be interested to see any obvious improvements made and pull requested in.</p>
]]></description><link>http://codeofrob.com/entries/github-live.html</link><guid isPermaLink="true">http://codeofrob.com/entries/github-live.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 07 May 2012 12:28:00 GMT</pubDate></item></channel></rss>