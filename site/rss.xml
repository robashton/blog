<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><generator>NodeJS RSS Module</generator><lastBuildDate>Fri, 03 Feb 2012 19:29:31 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><item><title><![CDATA[Your container is not wanted here]]></title><description><![CDATA[<p>Finding myself embroiled in yet another debate about IOC containers on Twitter I've decided to place my current thoughts here for posterity.</p>

<p><em>I don't really like using IOC containers</em></p>

<p>There, I said it. I really don't. I used to, I did - I thought they were an excellent way to manage those dependencies, to push the effort of lifetime and scope management into something that would automatically handle those things for me so I wouldn't have to think about them.</p>

<p>I thought they were an excellent way to bootstrap of my entire application from a single place, and have all the interfaces matched with their single implementations and pushed into the relevant consumers without having to think about it.</p>

<p>But you know what? Having your entire application sucked out of a black box and then writing rules for the exceptions to those wonderful conventions and then writing new conventions and interceptors and using all the "wonderful features" of the modern IOC container started to lead to developers spending more time debugging mysterious container issues and fighting odd/conflicting lifetime issues than writing code of real value.</p>

<p>Oh, you could easily dismiss this with "Oh, Rob doesn't know how to use a container properly", but you'd be missing the point, because even if I didn't (<em>and I do by the way</em>), it's irrelevant whether I do or not.</p>

<p><em>Missing the point</em>? Missing the point because nearly every team using an IOC container <strong>IS</strong> doing it wrong, and they're doing it wrong because they <em>are</em> complicated and they give you a lot of "extensibility points" to make it <em>easy</em> to do things like interception, they make it <em>easy</em> to do things like per-request items, they make it <em>easy</em> to create singletons that aren't really singletons. and they make it <em>easy</em> to create lots of interfaces that get sucked into lots of classes (in the name of low coupling, and usually with the result of a total lack of any cohesiveness).</p>

<p><strong>It's putting the cart before the horse</strong></p>

<p>Learn to walk before you run, cart before horse, etc. The fundamental issue here, is that people are spending their times learning about IOC containers, gaining some level of test-ability because everything is an interface that talks to other interfaces via interfaces to interfaces. This is not to say that IOC containers cause this explicitly, because if you've already got a grasp of OO concepts then you aren't going to do too much damage here (except for hiding simple concepts like lifetime management up behind infrastructure that's a bit more future-career-proof).</p>

<p>My fundamental issue is that not enough time is being spent by developers learning how to just grow a testable and maintainable code-base. Throwing your lot in with a container with a centralized bootstrap process and claiming that's an advantage is missing out on a fundamental aspect of clean software development - that is, neat little packages that know how to bootstrap themselves and expose a sensible API for doing so - allowing them to be used across the code-base in an understandable and idiomatically crafted way.</p>

<p>Allowing your junior developers to "not worry about these things", because the almighty and all-knowing container will look after them and ensure that the code is testable, and that dependencies will just work automatically is simply shirking the responsibility of actually teaching those developers the useful and transferable skills that will help them deliver products across a multitude of languages and platforms. (EG. not just the two that come with a million IOC containers to choose from).</p>

<blockquote>
  <p><em>In GOOS we are extremely explicit about scope!  Java is a block</em>
<em>structured language with lexical scoping, closures and objects.</em>
<em>Blocks and objects are scopes. Variables declared in a block and</em>
<em>instance variables declared in an object are in a scope. There is no</em>
<em>need to re-implement (badly) what the language (compiler and VM)</em>
<em>already provide.</em></p>

<p>Nat Pryce</p>
</blockquote>

<p>And this, is what I believe that it all boils down to.</p>

<ul>
<li>You want per-request scoping? That's a "using statement" around the entry point to that request. </li>
<li>You want application-lifetime scoping? Just create the object on start-up and let it get cleaned up on application-close</li>
<li>You want something more fine-grained? That's just another using statement around the code concerned.</li>
</ul>

<p>Objects still don't need to know about their own scoping, of course not, and we realized that with containers early on with the removal of attributes from most frameworks. But why make all the effort of pushing scoping into a framework when it is such an intrinsic part of your application and it's relatively trivial to manage anyway? Lifetime management is not an implementation detail to be pushed away into central infrastructure code, and nothing but trouble will be had from trying to work that way <em>(nested sub-containers anyone? No - I thought not).</em></p>

<p>You want to talk about writing masses of boilerplate code? I have very little in the applications I'm actively developing now - each abstraction developed is responsible for its own set-up, and only exposes to the outside world any configuration needs that it might require and the public interfaces required to do its job. That code is written and tested <em>as part of the code-base</em>, is compile safe and is fast to bootstrap because "it's just code". Abstractions are built on top of other abstractions and are tested against other abstractions with appropriate levels of isolation depending on the test concerned and there are no problems here at all.</p>

<p>This approach does not preclude the injection of dependencies into say, the subsystem which might be created as a consequence of its construction, it merely hides that detail behind an appropriate API because the consumers of this package don't typically care about that construction.</p>

<p>You want to talk about managing deep or complex object graphs? That's not a problem - each package is only ever going to have a shallow object graph, because that's sensible software design - I don't have complicated object graphs because complicated object graphs tend to show themselves during testing and are very quickly turned into simple object graphs.</p>

<p>It's just software, and we should be spending more time learning how to deliver software and less time learning how to manipulate favourite container X.</p>


]]></description><link>http://codeofrob.com/entries/your-container-is-not-wanted-here.html</link><guid isPermaLink="true">http://codeofrob.com/entries/your-container-is-not-wanted-here.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 02 Feb 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[What does it look like when I code?]]></title><description><![CDATA[
		<p>Something like this</p>

<object width="1280" height="720"><param name="movie" value="http://www.youtube.com/v/mp_nxjhx6yY?version=3&amp;hl=en_US&amp;rel=0&amp;hd=1"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/mp_nxjhx6yY?version=3&amp;hl=en_US&amp;rel=0&amp;hd=1" type="application/x-shockwave-flash" width="1280" height="720" allowscriptaccess="always" allowfullscreen="true"></object>

<p>This is a time-lapse of me creating a game over 48 hours (a weekend), overall there is about 30 hours of screen-time packed into 3 minutes of video - it's cool to see how the game and code progress over those 30 hours.</p>

<p>What is interesting is how I always have the social elements open in a browser window on my left hand side, I'd never noticed it before - I don't think it slowed me down any - the pauses where I wasn't coding I was up making coffee or thinking about a problem</p>

<p>Still, it would be interesting to see how I'd get on without it if I was doing another of these - the next rendition of the competition is next March and I think I'll be doubling my efforts to create something cool - I might even go as far as to do a 3D effort in WebGL</p>
	]]></description><link>http://codeofrob.com/entries/what-does-it-look-like-when-i-code.html</link><guid isPermaLink="true">http://codeofrob.com/entries/what-does-it-look-like-when-i-code.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 20 Dec 2011 17:47:00 GMT</pubDate></item><item><title><![CDATA[Hoverbattles Released (and more)]]></title><description><![CDATA[
		<p>I've gone off on a tangent recently and been playing around with games development as if I was 15 again</p>
<p>I think I'm going to make a game that I actually want people to play next, but first up - three things I've released recently</p>
<h4>Hoverbattles</h4>
<p>My flagship 'game', something I've learned a <strong>lot</strong> from these past couple of months - written with a NodeJS back-end, with WebGL front-end, the code is awful in places and I think I have a few memory leaks (or third party libs do!) but I'm pretty much done with this now.</p>
<p><span style="font-weight: bold;">Note: The server this is on is not brill, so there will be lag</span><br>
</p>
<p>This can be found at <a href="http://hoverbattles.com">http://hoverbattles.com</a> - fill your boots.</p>
<p>Source can be found at <a href="https://github.com/robashton/HoverBattles">https://github.com/robashton/HoverBattles</a></p>
<p> </p>
<h4><img width="800" height="479" alt="" src="/images/codeofrob_com/hoverbattles.png"></h4>
<h4>Plane Thinking</h4>
<p>I coded this over a few days as warm-up for LD22, the 48 hour games development challenge, this is plain old Canvas (although I was playing with using WebGL to do progressive enhancement it turns out that copying buffers between the two gets expensive quickly and I didn't take it much further</p>
<p>This should work in most browsers, I really should make the effort to get it working with touch controls as it would work well on iPad</p>
<p>This can be played at <a href="http://planethinking.heroku.com/">http://planethinking.heroku.com/</a></p>
<p>Source can be found at <a href="https://github.com/robashton/plane-thinking">https://github.com/robashton/plane-thinking</a></p>
<p><a href="https://github.com/robashton/plane-thinking"><img width="800" height="650" alt="" src="/images/codeofrob_com/plane-thinking2.png"><br>
</a>  </p>
<h4>You don't have to be alone</h4>
<p>This is my entry to the 48 hour game development competition Ludum Dare - I don't really think of this as competing with anybody else, trying to build a game from scratch over 48 hours is <strong>mega hard</strong> and I'm really proud that I was able to pull it off with plot, sound, music and alternative ending galore</p>
<p>The code for this is ... suboptimal, if you play it on anything other than a really high end desktop computer in any other browser than Chrome then do so at your peril. I'll be learning from that in my next game and making an effort to keep those render calls down</p>
<p>The game can be found at: <a href="http://ld22-ashton.heroku.com/">http://ld22-ashton.heroku.com/</a></p>
<p>The source can be found at: <a href="https://github.com/robashton/ld48_22">https://github.com/robashton/ld48_22</a></p>
<p><a href="https://github.com/robashton/ld48_22"><img width="1082" height="949" alt="" src="/images/codeofrob_com/update-10.png"><br>
</a></p>
<h4>The point of all this</h4>
<p>Games development is complicated, the code in Hoverbattles is probably the most complex domain I've ever worked on, and finding ways to keep the accidental complexity low whilst keeping the technical complexity low at the same time was a big challenge</p>
<p>I've learned a lot by stepping away from ordinary business app development, and I'll be taking that back to the workplace with me, as well as carrying on in this space - never before has there been a better time for aspiring games development to noodle on in their spare time.</p>
<p>This site? Yeah I've messed this up a bit - I need to rip all these posts out and deploy them as static content and set up some re-directs, a project for a rainy weekend when I don't want to play with games :-)</p>
<p>Merry Xmas</p>
<p>Rob</p>
	]]></description><link>http://codeofrob.com/entries/hoverbattles-released-and-more.html</link><guid isPermaLink="true">http://codeofrob.com/entries/hoverbattles-released-and-more.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 20 Dec 2011 15:28:00 GMT</pubDate></item><item><title><![CDATA[A relaxed attitude towards the pragmatic delivery of 'okay' software]]></title><description><![CDATA[
		<strong>A brief middle-of-project retrospective</strong>
<p>I've not been coding in my spare time much the past few months, being seriously busy for a client - but the past couple of weeks has seen me pick up a project of mine that I started a few months ago (HoverBattles) and start pushing to some level of completion.</p>
<img width="800" height="451" alt="" src="/images/internal_codeofrob_com/currentproject.png">
<p>This has been an interesting project for me, not least of all because it's written entirely in Javascript (WebGL + JS, NodeJS and CouchDB) but because this time I made a real effort to drop any up-front <em>'zomg my code must be perfect'</em> aspirations from the get go.</p>
<p>What does this mean? Well I pretty much decided that technical debt should not be something to be overly avoided, overly organised code-bases stifle creativity and I really just wanted to <strong>deliver something.</strong></p>
<p>I also knew that as I learned more about effective JavaScript that my opinions on the 'best way to achieve things' would be changing about 20x more rapidly than it does when working in an environment I'm heavily used to, and trying to constantly maintain code at some mythical standard would prevent me from actually delivering</p>
<p>A couple of months later how does that leave me? Is the code-base a huge unmaintainable mess? I would say no - it is not. </p>
<p>There are messy bits in there but they're largely on the periphery. An avoidance of up-front framework/empire building has allowed me to be morally flexible with regards to where I put new code to Get Cool Stuff Done, and a healthy concern when going over pre-existing code to add something new has led to some easy wins when re-factoring around the pain points that naturally emerge.</p>
<p>I don't think that I've taken a cavalier approach to the project - at a macro level it's quite well structured, and for the most part there is a clean separation between the different sub-components that drive the system. In a code review there are bits I'd have to apologise for but even in projects with the greatest amount of technical debt avoidance this has been true.</p>
<p>There are some problems with the messaging/multi-player side of things, complex work-flows have emerged as a consequence of the individual components receiving some input, doing something and raising some output in orders that I did not pre-plan.</p>
<p>This has been made more complicated by the fact that some of these components only exist on the server, and yet the events they raise are still sent to the client because the client needs to react even if it is not the one doing the critical thinking.</p>
<p>This is an example of what I have come to classify as a <em>real problem</em> - that is, it is a problem that is naturally occurring and isn't one I have constructed to satisfy the whims of my inner Powerpoint Architect.</p>
<p>When I think of all the things that we work on in our line of business applications, the efforts we go to de-couple everything so it can be easily tested and maintained, the efforts we go to make sure we have the extensibility points and have our "what ifs" covered, I'm seeing a lot of that in a new light as this project goes on. </p>
<p>I don't think a lot of our 'units' in our LOB world are really units at all, they're fractions of 'units', and it's only as part of a more complex interaction that things get interesting and worth spending time fussing over.</p>
<p>Even those seeking to do more vertical testing of a unit within their system (across several internal components) aren't really testing anything meaningful, they're not really spending their time on anything really meaningful either - I wonder if we do a lot of this stuff just to make our jobs more interesting because LOB apps are at a micro-level... quite boring</p>
<p>Anyway I digress, a response could be that some of that rigidity and forward thinking is needed because we have more than one soul working on these projects and if everybody took the cavalier 'get it done' attitude we'd end up with a big mess right?</p>
<p>I'm not convinced - I think that if you have a team that can actually communicate and react to problems as they arise that a good momentum would still be possible, a lot of the technical solutions delivered in these LOB apps seem to exist as a way of avoiding the need for communication and I'm beginning to think of that as less okay than I did</p>

<p>I'm also beginning to think that a concentration on these things causes bigger balls to be dropped. There is little point in arguing over patterns if you're going to forget to apply sanitisation to user-provided input for example - or suitable defensive mechanisms against things that might go wrong (as dirty as that might make some of your code).</p>

<p>Going back to the whole CQRS thing as that was the topic of the last post, this ties in well - those things exist as solutions to complexity that already exists - not as ways of creating complexity that wasn't there before. Technical solutions should be avoided unless they're actually delivering the necessary value.</p>
<p>Random blathering I know, I'll actually start talking about the tech in the game soon I think, it's getting interesting and I think there are some things to say about it</p>
	]]></description><link>http://codeofrob.com/entries/a-relaxed-attitude-towards-the-pragmatic-delivery-of-okay-software.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-relaxed-attitude-towards-the-pragmatic-delivery-of-okay-software.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 01 Nov 2011 11:37:00 GMT</pubDate></item><item><title><![CDATA[CQRS is too complicated]]></title><description><![CDATA[
		<p>Is something I hear all too often at conferences and on Twitter, and more often or not it is said because of either a basic misunderstanding of what CQRS is or is not - or perhaps because they've dipped their toes into the hyperactive DDDCQRS mailing list and been scared away by all the white coat discussion that goes on in there a lot of the time.</p>
<p>The other day, the sentiment was yet again voiced by somebody of whose opinion I respect on Twitter and I ended up in about five minutes writing a gist explaining why I didn't think this was the case (Writing 4000 word essays is an hour's work if I'm feeling ranty), I've tidied it up a bit and decided to throw it below as it works well in a blog entry.</p>
<p><strong>A basic summary</strong></p>
<p>At the highest level CQRS just means maintaining a happy division between the reads and writes across your system - that is, having the reads in your system executed in a thin clean manner appropriate to the views you want to retrieve (one model), and your writes going through all the crazy logic you need such as validation, updating queues, third party systems, processing business rules (another model)</p>
<p>Consider the traditional and very-tongue-in-cheek N-Tier architecture I have created here in powerpoint, seen in a million "architecture" presentations in ASP.NET webforms shops across the world:</p>
<p>&nbsp;<img alt="" width="400" height="326" src="/images/internal_codeofrob_com/1.png"></p>
<p>Now modify it a little bit so that our reads haven't got to go through all that cruft, haven't got to somehow amene themselves to a bunch of "DAL objects" that are created with the very&nbsp;best intention of standardising our access to some form of database (and normally optimised for the write actions anyway).</p>
<p><img alt="" width="400" height="310" src="/images/internal_codeofrob_com/2.png"></p>
<p>We can&nbsp;instantly make our lives a lot easier by creating a pile of code optimised for creating views for our presentation layer,&nbsp;perhaps doing a bit of raw SQL or calling a sproc to generate the view for us. We can helpfully formalise this arrangement and for the most part set down a rule that the direction of travel down those two paths is one way (towards the DB for writes and away from the DB for reads).&nbsp; Funnily enough - most systems that do that <strong>BOL</strong>/BLL/DAL<strong>/OCKS</strong> stuff end up with something that looks like this anyway because it's too hard to do everything through a single model.</p>
<p>This is now a form of CQRS - at the highest level we've effectively split our system into two models&nbsp;and done something that's very similar to what we'd call CQS if we were&nbsp;doing it at the method level.&nbsp; This in itself should surely be enough to convince you&nbsp; that CQRS itself is not complicated and it might be a useful thing to look further into.</p>
<p>Of course, as you go further down the rabbit hole...</p>
<p><strong>Some examples</strong></p>
<p>CQRS can be achieved by using a document database like Raven or Couch - using your documents as a write store, using your indexes as a query store. </p>
<p>&nbsp;<img alt="" width="400" height="299" src="/images/internal_codeofrob_com/32.png"></p>
<p>It can be achieved with your favourite ORM (Even better if you can actually use that O and that M and get some good old OO going) - if you want to use your objects for encapsulating business logic and go directly to the the queries to project the data you need for views (HQL, SQL directly, SPROCS, whatever) - from the same database even, providing this remains efficient enough for your needs. <em>(Funnily enough, "our" collective weak attempts at creating domain models with NHibernate are what led to us re-discovering the need for two models in the first place in my opinion).</em></p>
<p>&nbsp;<img alt="" width="400" height="312" src="/images/internal_codeofrob_com/4.png"></p>
<p>Of course you may well end up with two databases anyway, as trying to query a database comprised of tables that represent state in your "objects" can be pretty inefficient, with the read store updated from the write store using hooks in your write system to generate pre-calculated views or data that's more applicable to generating views - this is not a bad model and can work too, it's still CQRS.</p>
<p>&nbsp;<img alt="" width="400" height="319" src="/images/internal_codeofrob_com/5.png"></p>
<p>CQRS gets the "complicated" label because people often associate it directly with event sourcing, which requires that little bit more of up-front development in order to get the level of elegance you won't find in the above scenarios. However, even event sourcing is really simple once you look at it - and is a natural progression from some of the other ways of "doing" CQRS - which can be a bit muddy (not that there is anything wrong with systems that are a bit muddy). <em>Note that I'm not mentioning DDD here At All - which is where a lot of heavy&nbsp;learning lies, and nearly none of us do anyway.</em></p>
<p>Consider hooking those events in your system to manually flatten/re-arrange data into other stores as outlined above? Does that work for that one other store? How about a reporting store? How about full text search? What about integration with third party systems and the data they want to see from you? How about the boardroom reports your CEO now wants on his desk each morning before he starts his day?</p>
<p><img alt="" width="400" height="351" src="/images/internal_codeofrob_com/6.png"></p>
<p>Youch. Deciding your single source of truth is the already written state gives you an amount of inflexibility, which you may or may not be happy with&nbsp;up to a point.</p>
<p>Updating other views of this truth after small changes can be inefficient&nbsp;and awkward. Recovering after introducing any write bugs to the system can be expensive also. Hell - even changing your model can also be expensive as database migrations are hardly the easiest things if you're trying to work with multiple stores and layers all over the place. When your powerpoint presentations start looking like this you have&nbsp;complexity issues- and these complexity issues aren't caused by CQRS, they're caused by having complex powerpont presentations.</p>
<p>Moving to events and jumping through a few hoops to make this possible <em>can</em> open up a world of simplicity, and if it's not for you there are other options open to you. CQRS is not complicated - trying to shoehorn the responsibilities of read and write through a single model is complicated. Most of us realise that going through a standard "BLL, DAL, BOL, TLA, CRA, P) layer for both reads/writes is dumb, and CQRS is a good way of formalising this decision.</p>
<p><strong>Another tdlr;</strong></p>
<p>You can see that clearly there is a natural progression from the very basics to having the need to go for a full blown event sourcing system with publishers/subscribers/servers/eventual consistency once the complexity of trying to manage a more "simple" solution starts to overwhelm.</p>
<p>Unless you have that complexity and&nbsp;that need&nbsp;then of course trying to thrust an ivory tower designed architecture onto a system that doesn't need it is going to seem complicated. Hint: If your technical solution is more complicated than your original problem you're probably doing it wrong.</p>
<p><a href="http://cre8ivethought.com/blog/index"><img alt="" width="500" height="405" src="/images/internal_codeofrob_com/DDDOverview_big.jpg"></a></p>
	]]></description><link>http://codeofrob.com/entries/cqrs-is-too-complicated.html</link><guid isPermaLink="true">http://codeofrob.com/entries/cqrs-is-too-complicated.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 28 Sep 2011 19:45:00 GMT</pubDate></item><item><title><![CDATA[RavenDB Consultancy]]></title><description><![CDATA[
		<p>I've been contacted quite a bit this past month with requests for workshops and short term consultancy on RavenDB - I'm thrilled to bits that the database seems to be taking off in this way and I'm all about helping this happen.</p>

<p>The short answer is yes, I am happy to come and do private workshops tailored around your company's needs with RavenDB, I am also happy to offer remote or on-site consultancy where appropriate/desired.</p>

<p>If you've too been wondering about this but not known where to look, just e-mail me at <a href="mailto:robashton@codeofrob.com">robashton@codeofrob.com</a>, I don't bite.</p>

<p>That's about it really, I'll use this space to say that I'm now nearly settled in Belgium on a long term project for a client and I'm ready to commence blogging again, I've a few things I want to cover with RavenDB in particular but I'll most likely be doing that over at <a href="http://codebetter.com">codebetter.com</a></p>
	]]></description><link>http://codeofrob.com/entries/ravendb-consultancy.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb-consultancy.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 05 Aug 2011 11:48:00 GMT</pubDate></item><item><title><![CDATA[SLJS.org - a Silverlight - Html/JS converter]]></title><description><![CDATA[
		<p>At NDC2011 I was chatting to some folk who work on various OSS projects about cool things we could potentially work on in the future, and the topic of a Silverlight -&gt; Web converter came up</p>

<p>TLDR: Click <a href="http://sljs.org">here</a> to see the demos, click <a href="http://github.com/robashton/sljs">here</a> to see the code, click <a href="http://groups.google.com/group/sljs">here</a> to view the Google Group.</p>

<p>I had thought about this before, but it is only recently that an IL converter appeared up that I deemed fit for this purpose (<a href="http://jsil.org">JSIL</a>), and it is after this conversation I decided to put words into action</p>

<p>To this end, I have spent the past few weeks diving into the various concepts in Silverlight and spiking out implementations for converting them to make sure that the vast majority of what I wanted was actually possible</p>

<p>And that leads us to this, <a href="http://sljs.org">SLJS.org</a>, home to where I've gotten so far, with a couple of demos showing off what it can do. More to be added as we go along.</p>

<ul>
<li>Here is a basic example of an application in action: Hello World (<a href="http://sljs.org/output/HelloWorld/HelloWorldTestPage.html">Silverlight</a>, <a href="http://sljs.org/output/HelloWorld/index.html">HTML</a>)</li>
<li>And here is something demonstrating some more SL concepts: Calculator (<a href="http://sljs.org/output/Calculator/CalculatorTestPage.html">Silverlight</a>, <a href="http://sljs.org/output/Calculator/index.html">HTML</a>)</li>
</ul>
<p>Truth be told I'm largely doing this for fun and education at the minute, although I know a few people who actually want to use it - not to convert legacy projects, but to write new code in their familiar Silverlight world and have it work in a browser without requiring a plug-in.</p>

<p>I'm happy to support that, but it should be a community effort, rather than me blindly just working on features for the sake of it (although I have a little more of that left in me before I start taking on feature requests!)</p>

<p>So far the following has been implemented</p>

<ul>
    <li>Bootstrapping a converted Silverlight application in JavaScript
    </li><li>Responding to changes of the root UI element</li>
    <li>Rendering a control hierarchy from the root UI element</li>
    <li>Rudimentary Dependency Object and Dependency Property support</li>
    <li>Listening for changes on Dependency Properties to update styling</li>
    <li>Listening for changes on Dependency Properties to update content</li>
    <li>A templating system for customizing the output from each control</li>
</ul>

<p>On my immediate road-map (so in the coming week), I'll be working on:</p>

<ul>
   <li>Rudimentary data-binding support (A spot of MVVM coming up)</li>
   <li>Converting styles to CSS</li>
   <li>Going through System.Windows.Controls and creating the outline for them in JS</li>
   <li>Forcing some layout concepts into HTML from Silverlight</li>
   <li>A preliminary investigation into attached dependency properties</li>
</ul>

<p>I would totally appreciate some help/feedback/pointers for the direction of the project/cheering from the sidelines etc</p>

<p>The last one is important actually, if y'all tell me you find this interesting then I'll carry on working on it, if nobody gives a crap then when I get bored I'll stop :-)</p>

<p>But yeah, just joining the <a href="http://groups.google.com/group/sljs">Google Group</a> and helping me build a road-map would be a good start</p>
	]]></description><link>http://codeofrob.com/entries/sljs.org---a-silverlight---html-js-converter.html</link><guid isPermaLink="true">http://codeofrob.com/entries/sljs.org---a-silverlight---html-js-converter.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 30 Jun 2011 08:29:00 GMT</pubDate></item><item><title><![CDATA[5 reasons to give node.js some love]]></title><description><![CDATA[
		<p>In response to a question from a friend on Twitter (Private account so no linky), but with the text: </p>

<p>"Been reading up a little bit on node.js @robashton @domgreen. What makes it stand out from alternatives or is it just a JS 'me too' play?"</p>

<p>My initial response was, hey - you know what? I can't think of any (popular) alternatives that provide the unique combination that node.js does, and then started writing a torrent of tweets describing why I personally am so excited about node.</p>

<p>Then I decided that rather than spam Twitter, I should write a blog post to link to when asked the same question in the future.</p>

<p>Every bugger has already done one of these, but I want to answer the question in my own personal way</p>

<b>1) You get to write Javascript on the server and the client</b>

<p>Think about this for a second - it's really not just a gimmick (although some people seem to think it is). Even in a simple web application you're going to have validation logic that you're going to want to execute on the client AND on the server, and usually this can't be shared without going through some sort of rules engine or crazy framework to spit out some rough client-side equivalents. </p>

<p>No need with node, you can write your model (complete with business rules, etc), and write a nice task-based user interface around that model, running it all locally in the browser, and then dispatching and validating the commands on the server - because hey, everything is just JSON at the end of the day, and everything you're writing works against that.</p>

<p>Take this a step further, and consider that we have some pretty awesome document databases on the scene at the moment whose primary communication and storage mechanism is - guess what? JSON (well BSON) - at no point during any of this do you need to sit there dealing with mapping frameworks or hand-written mapping code, because you're just flinging JSON around.</p>

<p>With efforts on <a href="http://www.commonjs.org/">CommonJS</a> and <a href="https://github.com/sstephenson/stitch">Stitch</a> ongoing, there is really no excuse for not writing all your JavaScript in a state where it can be executed on both the client and the server.</p>

<b>2) Event-based asynchronous stuff is just How Things Work in JavaScript </b>

<p>Yeah okay, I have no idea what I'm talking about here, but what I do understand and what most people who have been writing JavaScript for the past decade understand is that <i>your</i> JavaScript tends to execute on a single thread and long-running processes get dealt with by the host, using callbacks to notify you (back on that single thread) as and when those things are done.</p>

<p>Now, in the browser these long-running requests are limited to... well HTTP calls to the server to get/post data, but on the server we do nearly <i>everything</i> like this; requests to other machines, requests to the file system etc.</p>

<p>We don't need any crazy language keywords (looking at you C#), we don't need any crazy Task of X/Y and Z objects (Looking at you C#), we just need: </p>

<script src="https://gist.github.com/949550.js?file=gistfile1.js"></script>

<p>This gives us some brilliant performance benefits, dealing with potentially gazillions of connected clients an <a href="http://www.theregister.co.uk/2011/03/01/the_rise_and_rise_of_node_dot_js/">easy possibility</a> <i>Sorry for a "the register" link this early in the morning, it's a bit indecent of me.</i></p>

<p>This also makes dealing with concurrency (at least within a single process) really easy too, all your variables are safe to be accessed at any time as you haven't got any potential race conditions, you can mutate state all you want and not worry that somebody else is going to come along and take away your cheese.</p>

<p>Hell, even the plans for future-node seem to be keeping this philosophy intact, with multiple node processes being given a way to communicate safely (or at least as far as I understand the slides that I've read from conferences I wasn't at).</p>

<b>3) Awesome package management!</b>

<p>Just like Ruby, and just like Linux-land in general, if you want to do something there is probably a library/package waiting for you to pull down and consume, and you can do this via the wonderful magic of <a href="http://npmjs.org/">NPM</a></p>

<p>npm install socket.io</p>

<p>It's that easy to get the libraries you need, and there are libraries available for most of the things you can think of, the primary ones I am using myself are: </p>

<ul>
     <li><a href="https://github.com/felixge/node-paperboy">Paperboy</a> - for simply serving static files from a directory (index.html, style.css, etc</li>
     <li><a href="https://github.com/donnerjack13589/node.gzip">gzip</a> - for um, gzipping content that I send down to the client</li>
     <li><a href="http://socket.io/">socket.io</a> - for magically doing websockets, or at the very least emulating websockets</li>
     <li><a href="https://github.com/tmpvar/jsdom">jsdom</a> + jquery - manipulating the DOM server-side? Oh say it ain't so?</li>
     <li><a href="https://github.com/sstephenson/stitch">Stitch</a> for allowing me to write code in CommonJS format and still use it in the browser.</li>
</ul>

<p>This isn't anything particularly unique to node, but in this day and age it's a bit hard to be taken seriously without a good package manager in your ecosystem and it's good to see something of quality here.</p>

<b>4) Community community community</b>

<p>The community around node.js is brilliantly active, passionate and y'know - generally quite bright - and willing to try new things out (Kinda goes with the territory really)</p>

<p>This, just like Ruby, is a really big draw for those of us from ecosystems which... lack anything of this scale</p>

<p>This enthusiasm does make it a bit difficult to separate actual innovation occurring from the old "Look at JavaScript doing what everything else has been able to do forever", but I'll take raw enthusiasm over rigid nay-say mentality any day - enthusiasm is contagious and gives me the ability to Get Things Done</p>

<b>5) It's easy, really easy, like super easy, We can all do it!</b>

<p>JavaScript aside (And if you don't like JavaScript you can always use CoffeeScript), the process of writing code that does exciting stuff is ludicrously simple.</p>

<p>Having direct access to the HTTP pipeline, and not hiding it behind crazy levels of abstracted framework cruft is a big, big win - and once you start writing code like this you start to wonder where this kind of thing has been all your life.</p>

<p>"I want to do this: " has not once resulted in me banging my head against the constraints and limitations that somebody else has put in my way (supposedly to help me).</p>

<p>My personal website currently runs on pixie dust and grated unicorn horns - I'm pulling in content from my old subtext blog and spitting it out on the front page (with plans to pull in content from <a href="http://codebetter.com/robashton/">CodeBetter</a> and <a href="http://altdevblogaday.org/author/rob-ashton/">Altdevblogaday</a> too), whilst acting as a reverse proxy for the old site (in very few lines of code). </p> 

<p>That's utterly crazy, and I drafted it up in just a few hours of hackity hack hack hacking, with those goals in mind.</p>

<b>Anyway...</b>

<p>The beauty of node comes in the combination of these attributes, not just one thing (because none of those things bar point #1 are by themselves particularly new or ground breaking</p>

<p>If you've previously dismissed node as something pointless because you think it brings nothing new to the table compared to your X, Y or Z then I urge you to have another look at it, as The Creators prepare to bring it natively to Windows it's only going to get more popular and you'll want to be involved.</p>

	]]></description><link>http://codeofrob.com/entries/5-reasons-to-give-node.js-some-love.html</link><guid isPermaLink="true">http://codeofrob.com/entries/5-reasons-to-give-node.js-some-love.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sat, 30 Apr 2011 07:39:00 GMT</pubDate></item><item><title><![CDATA[Static analysis of Simple.Data code to generate databases]]></title><description><![CDATA[
		<p>The dynamic keyword in C#4 has been put to some good use already - and has attracted a few detractors (probably because dynamic is to C# as generic is to Java), but the fact that the dynamic keyword compiles down to simple reflection over System.Object does present some interesting possibilities over its more pure counterparts.</p>

<p>I had this thought at the weekend whilst doing something completely unrelated, and a brief Google suggested nobody else has bothered doing it with Mark Rendle's <a href="https://github.com/markrendle/Simple.Data">Simple.Data</a> yet, so here I am with a proof of concept scribbled down after a couple of hours work this evening.</p>

<p>Given the following code:</p>

<script src="https://gist.github.com/902388.js?file=Model.cs"></script>

<p>I want to end up with a database table that looks like:</p>

<script src="https://gist.github.com/902388.js?file=database.sql"></script>

<p>Looking at it, this is actually quite a simple problem, and we have two possible solutions to follow if a as a user, we are to do this without writing any further code on top of this.</p>

<ul>
<li>Create/modify the database as the code is executed</li>
<li>Analyse the compiled IL and figure it out from there</li>
</ul>

<p>Both have their merits and cons (and some cons are definitely shared hah), but from an accessibility point of view being able to do either of these would be pretty "cool"</p>

<p>I'm going for option 2, because I haven't done any IL in a while and want to remind folks that I'm not just a JS monkey, but still care about those .NET leanings too ;-)</p>

<p>Looking at the above code, as a user we can work out that the various columns and tables exist, and their types, so this should mean we can do the same programnatically against the compiled IL.</p>

<p>Let's look at the compiled IL for the first method as dumped out with Mono.Cecil in my immediate Window:</p>

<script src="https://gist.github.com/902388.js?file=gistfile10.cs"></script>

<p>Okay, that's quite daunting, but breaking it down we can easily understand what is going on (I haven't read any docs, I just read the IL and figured it out, so I could be wrong :)</p>

<ul>
<li>First up, we look at a compiled generated static field and if it's present we skip forward by about 30 instructions</li>
<li>If it's not present, we load up the name of our method call (FindByUsername) and do some reflection to get information about that method call</li>
<li>We then do the same with the property access (Users)</li>
<li>Arriving at the point we would have skipped ahead to if those values had been present, we realise they are cached information about the calls to the "Object", only loaded once (sensible as Reflection is expensive yeah?</li>
<li>At this point, we can safely load up the arguments into the stack and make a call via the Callvirt to the cached reflection information on the DB object</li>
</ul>

<p>This is nice and simple, the only information we haven't got for sure is that those dynamic calls are actually being made to a SimpleData object because it's just a System.Object once compiled. I figure it might be possible to trace through the code to find at what point that object was actually created via the Open call, but that's way beyond the scope of this blog post.</p>

<p>As for analysing this, we have Mono.Cecil so may as well write a feature test to try our initial play out.</p>

<script src="https://gist.github.com/902388.js?file=FeatureTest.cs"></script>

<p>I'm not going to be clever about this, as it's just a play-about, so let's dive in and see what information we can find in the assembly - to do this we enumerate the types and pass them into some type of scanner.</p>

<script src="https://gist.github.com/902388.js?file=ModelScanner.cs"></script>

<p>We then have a look at all the methods on that type (duh)</p>

<script src="https://gist.github.com/902388.js?file=MethodScanning.cs"></script>

<p>The important information is found in the method call, and the important stuff we want to look for in a method is (for now):</p>

<ul>
<li>Are there any dynamic method calls made?</li>
<li>Are there any references to cached fields (Callsites)</li>
</ul>

<p>With this in mind, I can think about how to identify these things</p>

<p>Looking at whether we have any method calls (returning references to those instructions - we just look for any call virts to an Invoke method (This is hardly fail-safe, but it'll easily do for that test)</p>

<script src="https://gist.github.com/902388.js?file=ExtractDynamicMethodCallInstructions.cs"></script>

<p>Looking at any cached references to reflected data, again we just look for a loading of a field, the subsequent "goto", and check the type of the field (Callsite)</p>

<script src="https://gist.github.com/902388.js?file=ExtractInitialReflectedCachedFieldReferenceInstructions.cs"></script>

<p>I can use these methods to get me information about what is going on here, and just check we're in a method that actually does something similar to what we're interested in.</p>

<script src="https://gist.github.com/902388.js?file=Check.cs"></script>

<p>The references to those fields will yield in interesting information about the table/column we are dealing with in Simple.Data, that is - the names of those objects.</p>

<p>I find this by going to that instruction and looking for the inevitable call to Ldstr, loading the name of the method call/property access onto the stack before making the reflection call.</p>

<script src="https://gist.github.com/902388.js?file=FieldNames.cs"></script>

<p>So far so good, now I just need the type of the argument passed into the call, and I achieve that by looking at the arguments being loaded into the actual method call</p>

<p>Can you say hacky? I just look at the previous instruction and if it's a ldstr I know the argument is a string :)</p>

<script src="https://gist.github.com/902392.js?file=methodssearch.cs"></script>

<p>All that is left is the putting together of this information into the model we're building.</p>

<script src="https://gist.github.com/902392.js?file=parsing%20the%20data.cs"></script>

<p>This gives me an in memory model of the database, with the name of the table and the column we've found - creating a DB creation script from this is a trivial task left to the imagination by the reader (My Sql is awful man!)</p>

<p>This is where I stopped as I don't have much time to go further tonight, if anybody wants to fork the repository and carry on where I left off, it can be found here: <a href="https://github.com/robashton/Simple.Data.Generation">https://github.com/robashton/Simple.Data.Generation</a></p>

<p>Clearly the rest of the work takes the following path if it was to be continued:</p>

<ul>
<li>Check for all the other types of 'const' to be passed into Simple.Data method calls</li>
<li>Check for arguments/local variables being passed into the Simple.Data method calls</li>
<li>Allow for multiple arguments to Simple.Data method calls</li>
<li>Deal with other types of Simple.Data method call other than FindBy</li>
<li>Deal with dynamic operations being passed to other dynamic operations (Simple.Data does this)</li>
</ul>

<p>Is this actually a good idea? Possibly? Possibly not? I haven't read about the implementation of dynamic behind the scenes by the compiler (literally, not at all) - and don't know how much is left up the compiler when choosing how to do it (Looking at those cached fields...), and this particular script makes quite a lot of assumptions about this.</p>

<p>As an example of what implementing the dynamic key word on top of a statically typed language and runtime brings to us though, it's quite powerful - and it would be interesting to see it pushed further.</p>

<p>Thoughts?</p>


	]]></description><link>http://codeofrob.com/entries/static-analysis-of-simple.data-code-to-generate-databases.html</link><guid isPermaLink="true">http://codeofrob.com/entries/static-analysis-of-simple.data-code-to-generate-databases.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 04 Apr 2011 19:57:00 GMT</pubDate></item><item><title><![CDATA[Cloud9 on Cygwin with Node and Npm]]></title><description><![CDATA[
		<p>If for one reason or another you haven't got a Linux box available and you're using Cygwin to run Node and such, then you probably want a good editor/debugger to go along with this and provide a tolerable experience comparable with that on a more native platform.</p>
<p>Cloud9 is pretty darned cool, and although the hosted version lacks stability with the git integration and various other things, the downloadable and hostable version is pretty much The Thing to use when dealing with large numbers of files in a fully fledged javascript client/server app.</p>
<p>At the moment however, if you want to use the latest node with the latest cloud9, there are a few issues, and getting this scenario working under Windows takes a tiny bit of manual effort.</p>
<ul>
    <li>Install Cygwin.</li>
    <li>Install Git (using Cygwin setup)</li>
    <li>Install Curl (using Cygwin setup)</li>
    <li>Then run Cygwin.</li>
</ul>
<p>That leaves us in a place to install the latest version of Node:</p>
<pre>git clone git://github.com/joyent/node.git<br>cd node<br>./configure<br>make &amp;&amp; make install<br></pre>
<p>If during the configuration step you're told that you're missing a component, run the Cygwin setup and install that component. Some of the names are a bit different, but googling suffices for everything here - you basically want openssl-dev and a c++ compiler - it didn't ask me for much more than that.</p>
<p>Next up, you want NPM, this is nice and easy</p>
<pre>curl http://npmjs.org/install.sh | sh</pre>
<p>When this has finished chugging, you should be sat in Cygwin wondering what to do next, and the answer is - install Cloud9!</p>
<pre>npm install cloud9</pre>
<p>Now, in an ideal world this would work (and in the future, if you're reading this in the future, hi!) it probably will work at this point - but at the moment you're going to have to re-build one of the components for cloud9 and copy that over to the correct location.</p>
<p>Pop into the Cygwin setup tool and install libxml2-devel</p>
<p>Then from Cygwin perform the following:</p>
<pre>git clone https://github.com/ajaxorg/o3.git<br>cd o3<br>./tools/node_modules_build<br>cp build/default/o3.node /usr/local/lib/node/cloud9/support/jsdav/support/node-o3-xml/lib/o3-xml/<br></pre>
<p>Now if you go to a folder with a pile of javascript files, you can run cloud9 by typing.</p>
<pre>cloud9</pre>
<p>The fruits of this labour should look something like this:</p>
<p><a href="/images/internal_codeofrob_com/cloud9.png"><img height="392" width="600" src="/images/internal_codeofrob_com/cloud9.png" alt=""></a></p>
<p>Now you can run/debug/manage all your writings inside your browser - ace stuff.</p>
<p>&nbsp;</p>
<p>Credits go to a chap called <a href="http://gratdevel.blogspot.com/2011/03/easier-way-of-setting-up-cloud9-on.html">Neil Kerkin</a> who I stole this from and ported it into Cygwin so I could do JS if caught short offline on my windows laptop. (I've done likewise on my main Ubuntu machine).</p>
<p><br>
</p>
	]]></description><link>http://codeofrob.com/entries/cloud9-on-cygwin-with-node-and-npm.html</link><guid isPermaLink="true">http://codeofrob.com/entries/cloud9-on-cygwin-with-node-and-npm.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 25 Mar 2011 13:16:00 GMT</pubDate></item></channel></rss>