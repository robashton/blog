<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><image><url>http://codeofrob.com/img/cover.jpg</url><title>Rob Ashton&apos;s blog</title><link>http://codeofrob.com</link></image><generator>RSS for Node</generator><lastBuildDate>Thu, 15 May 2014 08:12:07 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><author><![CDATA[Rob Ashton]]></author><item><title><![CDATA[The client API for my clojure document database]]></title><description><![CDATA[<p>Let&#39;s start our little foray into seeing what code I cooked up by looking at how I did the Client API for CravenDB as it&#39;ll give us a good indication as to the sort of features I wanted to support.</p>
<ul>
<li><a href="/entries/i-wrote-a-document-database-in-clojure.html">I wrote a document database in Clojure</a></li>
</ul>
<p>Just like RavenDB I decided that I wanted the same interface for talking to the database regardless of whether I was using a remote database over HTTP, an embedded database, or an in-memory database for testing.</p>
<p>For this, it seems that protocols are the best option we have in Clojure as it&#39;s essentially what they&#39;re for. This also gives me a convenient place to shove documentation and surface the Official Public API.</p>
<p>So I ended up with <a href="https://github.com/robashton/cravendb/blob/80314f64f25ff4af8906e7d3117cec9566d80ed0/src/cravendb/database.clj">this</a>, also listed below without the documentation for brevity.</p>
<pre><code><span class="list">(<span class="title">ns</span><span class="body"> cravendb.database)</span></span>

<span class="list">(<span class="title">defprotocol</span><span class="body"> DocumentDatabase
  <span class="list">(<span class="title">close</span><span class="body"> [this])</span></span>
  <span class="list">(<span class="title">load-document-metadata</span><span class="body"> [this id])</span></span>
  <span class="list">(<span class="title">query</span><span class="body"> [this opts])</span></span>
  <span class="list">(<span class="title">clear-conflicts</span><span class="body"> [this id])</span></span>
  <span class="list">(<span class="title">conflicts</span><span class="body"> [this])</span></span>
  <span class="list">(<span class="title">put-document</span><span class="body"> [this id document metadata])</span></span>
  <span class="list">(<span class="title">load-document</span><span class="body"> [this id])</span></span>
  <span class="list">(<span class="title">delete-document</span><span class="body"> [this id metadata])</span></span>
  <span class="list">(<span class="title">bulk</span><span class="body"> [this operations])</span></span>
  <span class="list">(<span class="title">put-index</span><span class="body"> [this index])</span></span>
  <span class="list">(<span class="title">load-index-metadata</span><span class="body"> [this id])</span></span>
  <span class="list">(<span class="title">delete-index</span><span class="body"> [this id])</span></span>
  <span class="list">(<span class="title">load-index</span><span class="body"> [this id])</span></span>)</span></span></code></pre>
<p>This is a low level interface obviously, the key operations being</p>
<ul>
<li>put-document</li>
<li>load-document</li>
<li>delete-document</li>
<li>query</li>
</ul>
<p>The great thing about this low level interface is that I can make various implementations of it, and then pass a &quot;database&quot; around without worrying what it is actually behind that.</p>
<p>So we have the ability to do</p>
<pre><code><span class="comment">; In-memory</span>
<span class="list">(<span class="title">def</span><span class="body"> instance <span class="list">(<span class="title">embedded/create</span><span class="body">)</span></span>)</span></span>
<span class="comment">; Embedded on disk</span>
<span class="list">(<span class="title">def</span><span class="body"> instance <span class="list">(<span class="title">embedded/create</span><span class="body"> <span class="string">"var/db"</span>)</span></span>)</span></span>
<span class="comment">; Remote via HTTP</span>
<span class="list">(<span class="title">def</span><span class="body"> instance <span class="list">(<span class="title">remote/create</span><span class="body"> <span class="string">"http://example.host:8000"</span>)</span></span>)</span></span></code></pre>
<p>And then each of those implementations supports the above operations transparently.</p>
<p>I wanted to support transactions with this database too, so a <em>bulk</em> operation is supported which is just a combination of the above operations.</p>
<pre><code><span class="list">(<span class="title">-&gt;</span><span class="body"> <span class="list">(<span class="title">t/open</span><span class="body"> instance)</span></span>
    <span class="list">(<span class="title">t/store</span><span class="body"> <span class="string">"doc-1"</span> { <span class="keyword">:message</span> <span class="string">"hello world"</span> })</span></span>
    <span class="list">(<span class="title">t/store</span><span class="body"> <span class="string">"doc-2"</span> { <span class="keyword">:message</span> <span class="string">"hello alice"</span> })</span></span>
    <span class="list">(<span class="title">t/store</span><span class="body"> <span class="string">"doc-3"</span> { <span class="keyword">:message</span> <span class="string">"hello bob"</span> })</span></span>
    <span class="list">(<span class="title">t/delete</span><span class="body"> <span class="string">"doc-4"</span>)</span></span>
    <span class="list">(<span class="title">t/commit</span><span class="body">!)</span></span></code></pre>
<p>I only have two implementations of this and they&#39;re actually pretty empty because they merely farm out into the code that really does something.</p>
<h3>The remote implementation</h3>
<p>I ended up using a couple of packages from Clojars to do the hard work for me here</p>
<ul>
<li><em><a href="https://github.com/neotyk/http.async.client">http.async.client</a></em>: This was an arbitrary choice, I just wanted a HTTP client that worked and supported async</li>
<li><em><a href="https://github.com/cemerick/url">cemerick.url</a></em>: I&#39;m only using this for url encoding, but it seemed more sensible than trying to use the Java ones</li>
</ul>
<p>I have some pretty hideous functions for building URLs, I wrote these before I brought the URL library in, I could/should/would have changed them to use it.</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> url-for-doc-id [url id]
  <span class="list">(<span class="title">str</span><span class="body"> url <span class="string">"/document/"</span> id)</span></span>)</span></span>
<span class="list">(<span class="title">defn</span><span class="body"> url-for-index-id [url id]
  <span class="list">(<span class="title">str</span><span class="body"> url <span class="string">"/index/"</span> id)</span></span>)</span></span>
<span class="list">(<span class="title">defn</span><span class="body"> url-for-bulk-ops [url]
  <span class="list">(<span class="title">str</span><span class="body"> url <span class="string">"/bulk"</span>)</span></span>)</span></span>
<span class="list">(<span class="title">defn</span><span class="body"> url-for-conflicts [url]
  <span class="list">(<span class="title">str</span><span class="body"> url <span class="string">"/conflicts"</span>)</span></span>)</span></span>
<span class="list">(<span class="title">defn</span><span class="body"> url-for-conflict-id [url id]
  <span class="list">(<span class="title">str</span><span class="body"> url <span class="string">"/conflict/"</span> id)</span></span>)</span></span>
<span class="list">(<span class="title">defn</span><span class="body"> url-for-stream [url synctag]
  <span class="list">(<span class="title">str</span><span class="body"> url <span class="string">"/stream?synctag="</span> <span class="list">(<span class="title">or</span><span class="body"> synctag <span class="string">""</span>)</span></span>)</span></span>)</span></span></code></pre>
<p>An actual operation in the record (others removed for brevity)</p>
<pre><code><span class="list">(<span class="title">defrecord</span><span class="body"> RemoteDatabase [url]
  DocumentDatabase
  <span class="list">(<span class="title">close</span><span class="body"> [this])</span></span>

  <span class="list">(<span class="title">query</span><span class="body"> [this opts]
    <span class="list">(<span class="title">with-open</span><span class="body"> [client <span class="list">(<span class="title">http/create-client</span><span class="body">)</span></span>]
      <span class="list">(<span class="title">force-into-list</span><span class="body">
        <span class="list">(<span class="title">process-response</span><span class="body">
          <span class="list">(<span class="title">http/GET</span><span class="body"> client <span class="list">(<span class="title">url-for-query</span><span class="body"> url opts)</span></span>
                    <span class="keyword">:headers</span> default-headers
                    <span class="keyword">:query</span> <span class="list">(<span class="title">dissoc</span><span class="body"> opts <span class="keyword">:filter</span> <span class="keyword">:index</span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<p>I really like the brevity of Clojure for this. The &quot;close&quot; isn&#39;t really needed for this implementation so it&#39;s an empty function that returns nothing. The rest of the operations look the same, a http request and the processing of that http request. Lovely.</p>
<h3>The embedded implementation</h3>
<p>The embedded implementation is obviously the heart and soul of the whole database, everything comes through this (it sits behind the HTTP interface we&#39;ll see in the next post).</p>
<pre><code><span class="list">(<span class="title">defrecord</span><span class="body"> EmbeddedDatabase [storage index-engine ifh counters]</code></pre>
<p>The constructor for this record takes in the underlying storage engine, index engine, the in-flight transaction system and some performance counters. This wasn&#39;t really what I had in mind when I through it together, but the <a href="https://github.com/robashton/cravendb/blob/master/src/cravendb/embedded.clj#L24">code itself</a> is quite concise as it mostly just farms out the work to modules responsible for managing document operations, indexing operations and etc.</p>
<p>For example</p>
<pre><code><span class="list">(<span class="title">put-index</span><span class="body"> [this index]
  <span class="list">(<span class="title">with-open</span><span class="body"> [tx <span class="list">(<span class="title">s/ensure-transaction</span><span class="body"> storage)</span></span>]
    <span class="list">(<span class="title">s/commit</span><span class="body">! <span class="list">(<span class="title">indexes/put-index</span><span class="body"> tx index {<span class="keyword">:synctag</span> <span class="list">(<span class="title">s/next-synctag</span><span class="body"> tx)</span></span>})</span></span>)</span></span>)</span></span>
  <span class="list">(<span class="title">ie/notify-of-new-index</span><span class="body"> index-engine index)</span></span>)</span></span></code></pre>
<p>In this case (and most of the other cases), the code sitting in the record is just coordinating the actions between a few different modules.</p>
<h3>Lessons learned about Protocols and Records</h3>
<p>It seems from this (and it carries across into other places I&#39;ve used protocols too). I tend to end up using a protocol for the polymorphism and the records to hold some handles/state and then delegate the work out into pure functions.</p>
<p>I could probably have used multi-methods for this (based on some property in the state), but I found them to be a bit messy because it meant bundling several implementations in the same file. I quickly moved away from the attempts where I did this when it got hard to follow.</p>
<p>Apparently protocols are also faster, but given performance was not really one of my goals I doubt that is a bottleneck in the database.</p>
]]></description><link>http://codeofrob.com/entries/the-client-api-for-my-clojure-document-database.html</link><guid isPermaLink="true">http://codeofrob.com/entries/the-client-api-for-my-clojure-document-database.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 01 May 2014 09:30:00 GMT</pubDate></item><item><title><![CDATA[Professionalism and TDD in the future]]></title><description><![CDATA[<p>Another response to another <a href="http://blog.8thlight.com/uncle-bob/2014/05/02/ProfessionalismAndTDD.html">Uncle Bob Blog Entry</a></p>
<p>On the side of the fence where we value correctness - writing code that tests other code in languages that require lots of code is going out of fashion.</p>
<p>Instead, we&#39;re seeing an (re-)emergence of languages that encourage thinking, design, proofs, working out, correctness.</p>
<p>In these languages, we are assured that once we&#39;ve put the up-front effort in to get to grips with them (<em>I&#39;m working on it</em>) that our code will largely be bug free, easy to reason about, concise. They offer us rapid feedback after changes are made and encourage the thought/discussion about intent without a massive expenditure of keyboard strokes.</p>
<p>That&#39;s the way we&#39;re going. In the future professionalism might be associated with TDD, but more likely we&#39;ll look on TDD as a phase that got us past the dark years of languages that needed it. If you are relying on TDD to keep you relevant in the coming years then you are going to be disappointed.</p>
]]></description><link>http://codeofrob.com/entries/professionalism-and-tdd-in-the-future.html</link><guid isPermaLink="true">http://codeofrob.com/entries/professionalism-and-tdd-in-the-future.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 01 May 2014 09:30:00 GMT</pubDate></item><item><title><![CDATA[I wrote a document database in Clojure]]></title><description><![CDATA[<p>A couple of years ago I met <a href="http://twitter.com/bodil">@bodil</a> at a conference and asked her to teach me the functional programming so I could function better with my programming. She told me all about <a href="http://clojure.org/">Clojure</a> which was on the JVM and totally hip.</p>
<p>I then tried writing Space Invaders a bunch of times in a variety of different ways to varying degrees of success but in the end I decided it was a bit of a reach for a first project and that writing something in a domain that was more familiar to me would be a good idea.</p>
<p><a href="http://robashton.github.io/cravendb/">So I wrote a document database in Clojure</a>.</p>
<p>The goal was <em>not</em> to write something that people would use, which is good because I stopped working on it months ago and nobody is using it.</p>
<ul>
<li>The goal was to pretty much do what <a href="http://ravendb.net/">RavenDB</a> does by using some sort of trusted persistence, and indexing into Lucene for query purposes using map/reduce/etc.</li>
<li>The goal was to make a tidy client API in Clojure that would be really easy to understand and use</li>
<li>The goal was to learn how to write Clojure by writing a lot of Clojure</li>
</ul>
<h3>What I ended up with</h3>
<p>I ended up with a few thousand lines of Clojure across a total of 34 files, half of those lines were just code testing the other code, and the other half is written in a variety of styles as I wrote more Clojure and realised how everything I&#39;d done in the past few weeks was wrong over and over again. During the development of this database I also ended up in the top 100 OSS committers across Github  - presumably becuase I spent so long committing fixes to those mistakes.</p>
<p>It took me on a journey through interop with legacy Java, interop with native code, adventures in core.async, building a RESTful API in Clojure, building a HTTP client in Clojure and a ton more stuff that is probably good to know if you want to be a Clojure developer.</p>
<p>I am not a Clojure developer, although I have done some work in Clojure. I consider this work to have been a key moment in turning me at least into a borderline reasonable functional programmer and netted me my current job of writing code in Erlang from coffee shops over Europe. Yay indeed.</p>
<h3>I am going to go through this stuff</h3>
<p>I&#39;m going to do a few talks this year on my experiences with Clojure and on learning via writing this database in particular. For those lucky enough to avoid these events I am going to write about some of the areas of this codebase, some of the decisions I made when writing them and some of the obvious mistakes that perhaps I shouldn&#39;t have made.</p>
<p>This will be a very practical and possibly/probably even wrong information sharing exercise but hopefully it means the hours I put into building that database can be used to help others too.</p>
<p>Ready? Well you&#39;ll have to wait, the posts are queud up :-)</p>
]]></description><link>http://codeofrob.com/entries/i-wrote-a-document-database-in-clojure.html</link><guid isPermaLink="true">http://codeofrob.com/entries/i-wrote-a-document-database-in-clojure.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 29 Apr 2014 09:30:00 GMT</pubDate></item><item><title><![CDATA[you have ruined javascript]]></title><description><![CDATA[<h2>In the old days</h2>
<p>In the old days we had some really awful JS being written on pages in a pretty ad-hoc fashion and it caused us huge problems. Presumably most people still do this but they&#39;re the same people who aren&#39;t reading this blog post so we can pretend they don&#39;t exist unless we end up consulting at their companies and oh god oh god please no not that.</p>
<p>The great/awesome/amazing thing about JS is that nobody wanted to go near it and in enterprise organisations they just wanted to stay in their safe little world of well organised layers of abstraction ordered by factory and XML super injection frameworks.</p>
<p>That was great for people like me who wanted to get paid enterprise rates but didn&#39;t want to have to put up with layers of awful &quot;best practises&quot; and performance problems that came from the irrational fear of letting anybody who wasn&#39;t a DBA touch the database.</p>
<p>Even better, when those performance problems arose, we could save the day by writing a front-end in JS that pretended they didn&#39;t exist and gave the users a great experience despite the shoddy workmanship on the backend.</p>
<h2>We&#39;ve hit peak JS</h2>
<p>It was even better when jQuery came along as the world we inhabited could be bolted together out of small re-usable jQuery plug-ins. We finally hit peak JS when NPM turned up and we started using a half-decent module system for managing these self contained widgets.</p>
<p>I envisaged a future where I could work with great teams on great UIs with great codebases organised out of these little modules and organised around self-contained features/widgets. Perhaps we could slowly take back control of codebases from those enterprise-bound fiends with their beans, their orms and their patterns and practise based proxy factory factories.</p>
<p>We had some reasonable things going on, we were building great things out of great code and we had freed ourselves from the shackles of the burdensome enterprise frameworks.</p>
<h2>You ruined it</h2>
<p>Now - I still do JS, but I&#39;m mostly working in Erlang these days, building video streaming/encoding systems and <em>blah blah blah</em>, that&#39;s why I&#39;m not really blogging at the moment but basically my backend is pretty sexy and my frontend is pretty sexy too (Facebook&#39;s React + NPM to fill the gaps). I came across this post on Stackoverflow that brought back all the flashbacks of those enterprise days and to my horror it has spread like a java-borne venereal disease to the front-end of the body of my internets.</p>
<h3><a href="http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory/">Angular.js: service vs provider vs factory?</a></h3>
<p>Okay, that&#39;s not so bad, but let&#39;s go and look at the <a href="http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory/20613879?stw=2#20613879">top-voted answer</a> (okay, it&#39;s not anymore since I wrote this post) and take stock of this because apparently there are some very satisfied customers:</p>
  <blockquote>Wow! Thanks for the detailed explanation. You made it easy and crystal clear mate. Well done!!</blockquote>

<p>If I was being kind, I&#39;d say that this comment is ironic and the whole thing is just a really good example of Poe&#39;s law, but on reading the whole thing I don&#39;t think this is the case and my frown has not turned upside down.</p>
<p>So... the first thing we see is a quote from the freaking Angular docs which looks like this</p>
  <blockquote>An Angular &quot;service&quot; is a singleton object created by a &quot;service factory&quot;.  These service factories are functions which, in turn, are created by a &quot;service provider&quot;. &quot;The service providers are constructor functions&quot;.  When instantiated they must contain a property called $get, which holds the service factory function.</blockquote>

<p>What the actual fuck <em>is</em> this? I read this as <em>&quot;in order to do a hello world, you must first create a hello world service to create the hello world factory to create the hello world sercice so you can print hello world on the screen.&quot;</em></p>
  <blockquote>Whaaaaaaat? Am I reading a thesis? It is very confusing.</blockquote>

<p>No, you are not reading a thesis, you <em>are</em> reading the angular docs apparently.</p>
<p>If it were a thesis it would probably be trying to explain a solution to some sort of problem instead of describing a made up solution to a made up problem. (Actually, that&#39;s not strictly true because academics are in a world of their own too but close enough).</p>
  <blockquote>The following is a real world example made up for this question.</blockquote>

<p>Presumably most of the scenarios used for creating Angular are made up because it&#39;s the only reason we would ever need all these factories, proxies, services in the front-end. The kind of code and explanation we&#39;re about to go through comes straight from la la land and it&#39;s hard to believe that it&#39;s not a joke.</p>
  <blockquote>Service, Factory, and Provider can be the same.</blockquote>

<p>What? No of course they can be, they&#39;re all just functions that return a value but okay, let&#39;s carry on with this madness to see where it leads...</p>
<p>We get an example of &quot;car instantiation&quot;, with the premise</p>
  <blockquote>With service(a singleton), you cannot achieve this because service cannot be instantiated.</blockquote>

<p>To justify the existance of providers, because</p>
  <blockquote>To instantiate, you need Factory or Provider</blockquote>

<p>No. Oh God. WHAT. <em>WHAT THE FUCK</em>.</p>
<pre><code><span class="keyword">var</span> car = <span class="keyword">new</span> Car({ cylinders: <span class="number">4</span> })</code></pre>
<p>The freaking &#39;new&#39; keyword.  We had these arguments in the enteprise back-end world so many times and to see the same bullshit repeated for JS galls me right to the fucking core. This is the same old shit in what used to be my go-to escape hatch from that hideous crap.</p>
  <blockquote>Provider can be configured for your application</blockquote>

<p>Of course we we can configure providers if we need to configure our applications. How else could we configure our applications and make them configurable for our enterprise scale configurable applications.</p>
<p>I love the code that comes next, it&#39;s almost a parody in itself. It doesn&#39;t even need a commentary to be fucking hilarious.</p>
<pre><code>app.service(<span class="string">'CarService'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">this</span>.dealer = <span class="string">"Bad"</span>;
    <span class="keyword">this</span>.numCylinder = <span class="number">4</span>;
});

app.factory(<span class="string">'CarFactory'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(numCylinder)</span> {</span>
        <span class="keyword">this</span>.dealer = <span class="string">"Bad"</span>;
        <span class="keyword">this</span>.numCylinder = numCylinder
    };
});

app.provider(<span class="string">'CarProvider'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">this</span>.dealerName = <span class="string">'Bad'</span>;
    <span class="keyword">this</span>.<span class="variable">$get</span> = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(numCylinder)</span> {</span>
            <span class="keyword">this</span>.numCylinder = numCylinder;
            <span class="keyword">this</span>.dealer = <span class="keyword">this</span>.dealerName;
        }
    };
    <span class="keyword">this</span>.setDealerName = <span class="function"><span class="keyword">function</span> <span class="params">(str)</span> {</span>
        <span class="keyword">this</span>.dealerName = str;
    }
});</code></pre>
<p>To configure the dealer, all we have to do is</p>
<pre><code><span class="transposed_variable">app.</span>config(<span class="function"><span class="keyword">function</span> <span class="params">(CarProviderProvider)</span> {</span>
    <span class="transposed_variable">CarProviderProvider.</span>setDealerName(<span class="string">'Good'</span>);
});</code></pre>
<p>Hey, it&#39;s just config - no need to change any of the real code!!</p>
<p>I&#39;d write a plain old JS equivalent but trying to wrap my head around all of the indirection in the above example is making me want to crawl under a desk and bang my head on the floor until the brainmeats come out so I don&#39;t have to subject myself to this madness any further.</p>
  <blockquote>But, why CarProviderProviderinstead of CarProvider</blockquote>

<p>Here&#39;s a tip. If you find yourself asking a question like this. If you find yourself asking a question which requires this sort of answer and then this sort of question to be asked <em>YOU&#39;VE DONE IT WRONG</em>.</p>
<p>There is no inherent shame in doing it wrong, it&#39;s okay - we all make mistakes, but given the current trajectory of this bullshit we&#39;re far from realising what is being done and we&#39;ll be hiring Angular Consultants and sending our students on expensive Angular Training Courses for many years to come. Well done - you fell for it.</p>
<h2>What the fuck is wrong with you people?</h2>
<p>We had a good thing, you ruined it. We had an escape route from that ridiculous enterprise hand-holding bullshit and instead of learning how to fucking code you&#39;ve just brought your factory provider providers with you into what was once an okay place to get stuff done.</p>
<h3>Screw you guys, I&#39;m going home</h3>
<p>It&#39;s okay, I don&#39;t really do enterprise any more. I showed this question and answer to my colleagues and we all had a good laugh at your expense because this stupidity is fucking hilarious. But you know what? When you&#39;ve all stopped digging this hole and you&#39;ve realised what a bottomless pit really looks like, I&#39;ll be stood outside laughing at you because it&#39;s still your own fucking fault.</p>
<p>Start thinking for yourselves, ditch this shit before it&#39;s too late and learn how to write some actual fucking code. The information is out there, you can do it. If you need handholding with factories and providers and service provider factories then consider that the world doesn&#39;t need your bullshit code and go and get a job you&#39;re actually good at. Stop ruining it for the rest of us.</p>
]]></description><link>http://codeofrob.com/entries/you-have-ruined-javascript.html</link><guid isPermaLink="true">http://codeofrob.com/entries/you-have-ruined-javascript.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 23 Apr 2014 09:30:00 GMT</pubDate></item><item><title><![CDATA[Clojure dojo-ing at NDC London]]></title><description><![CDATA[<p>I&#39;m sat at NDC London working on my presentation on a completely re-paved laptop and that&#39;s my entire day sorted for Wednesday.</p>
<p>However, there is <em>Thursday</em> and <em>Friday</em> and while there are a couple of sessions I&#39;ll probably attend, I think I&#39;m going to sit/stand around near the Twilio coffee machine and give Clojure 101s to anybody who fancies doing something a bit different.</p>
<p>The format? Bring your laptop and let&#39;s get you set up with a working Clojure environment. Let&#39;s pull down something fun to work on and let&#39;s build something. </p>
<p>Just come and find me, tweet me <a href="@robashton"><a href="http://twitter.com/robashton">http://twitter.com/robashton</a></a> to find out where I am or otherwise holla.</p>
<p>If you don&#39;t have a laptop I&#39;m happy to do some informal lessons on my own machine but obviously there is a limit to the number of people we can crowd around my laptop and how much we can engage on that.</p>
<p>Let&#39;s create some more Clojure devs!</p>
]]></description><link>http://codeofrob.com/entries/clojure-dojo-ing-at-ndc-london.html</link><guid isPermaLink="true">http://codeofrob.com/entries/clojure-dojo-ing-at-ndc-london.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 28 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - A module per widget]]></title><description><![CDATA[<p>So we&#39;ve learned from jQuery that we can hide the details of interaction with the dom behind a single function and it <em>does</em> work and <em>has</em> worked for many years so...</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
<li><a href="/entries/starting-the-frameworkless-js-project.html">Getting started</a></li>
<li><a href="/entries/frameworkless-js---rendering-templates.html">Templating stuff</a></li>
<li><a href="/entries/frameworkless-js---but-we-*really*-want-to-use-knockout-for-that-bit.html">Demanding Knockout</a></li>
<li><a href="/entries/frameworkless-js---encapsulation-of-views.html">Encapsulation of views</a></li>
<li><a href="/entries/frameworkless-js---what-jquery-did-right.html">A lesson from jQuery</a></li>
</ul>
<p>Let&#39;s do it ourselves.</p>
<h3>Creating our customer list as a module</h3>
<p>I&#39;m going to do things a bit differently in this blog series to the example on Github to make the point that it&#39;s entirely up to us to do things how feel like. In the example on Github the modules are exposed as an instantiable object in a presenter-ish pattern.</p>
<p>Instead, this module is going to be exposed as a single function like so</p>
<p><em>customerlist/index.js</em></p>
<pre><code class="lang-javascript">module.exports = <span class="keyword">function</span>(element) {

}</code></pre>
<p>In this, we need to render the customers, so our whole module will look something like this</p>
<p><em>customerlist/index.js</em></p>
<pre><code class="lang-javascript">
<span class="keyword">var</span> mustache = require(<span class="string">'mustache'</span>)
  , testdata = require(<span class="string">'../testdata'</span>)
  , fs = require(<span class="string">'fs'</span>)

<span class="keyword">var</span> template = fs.readFileSync(__dirname + <span class="string">"/template.html"</span>)

<span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">(element, customers)</span> {</span>
  element.innerHTML = mustache.render(template, { customers:  customers })
}

module.exports = <span class="keyword">function</span>(element) {
  render(element, testdata.customers)
}</code></pre>
<p><em>customerlist/template.html</em></p>
<pre><code>  <span class="tag">&lt;<span class="title">table</span>&gt;</span>
    <span class="variable">{{#customers}}</span>
      <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{name}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{bank}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="variable">{{/customers}}</span>
  <span class="tag">&lt;/<span class="title">table</span>&gt;</span></code></pre>
<p>One thing that is immediately apparent is that I&#39;ve bundled both the presentation logic and the template together in a single folder and exposed only a single function to represent that.</p>
<h3>Creating our bank dropdown as a module</h3>
<p>We can do the same for the bank dropdown and have that in its own little folder too.</p>
<p><em>bankdropdown/index.js</em></p>
<pre><code class="lang-javascript"><span class="keyword">var</span> ko = require(<span class="string">'knockout'</span>)
  , mustache = require(<span class="string">'mustache'</span>)
  , testdata = require(<span class="string">'../testdata'</span>)
  , fs = require(<span class="string">'fs'</span>)
  , html = fs.readfileSync(__dirname + <span class="string">"/template.html"</span>)

module.exports = <span class="keyword">function</span>(element) {
  <span class="keyword">var</span> model = {
    banks: ko.observableArray(testdata.banks),
    selectedBank = ko.observable()
  }
  element.innerHTML = html
  ko.applyBindings(model, element)
  model.selectedBank.subscribe(<span class="keyword">function</span>(bank) {

  })
}</code></pre>
<p><em>bankdropdown/template.html</em></p>
<pre><code><span class="tag">&lt;<span class="title">select</span> <span class="attribute">name</span>=<span class="value">"banks"</span> <span class="attribute">data-bind</span>=<span class="value">"options: banks, value: selectedBank"</span>&gt;</span><span class="tag">&lt;/<span class="title">select</span>&gt;</span></code></pre>
<h3>Using these modules</h3>
<p>Ignoring that I&#39;m not handling the above events yet, our <em>app.js</em> now looks a bit like this</p>
<pre><code>var customerlist = require(<span class="comment">'./customerlist')</span>
  , bankselection = require(./bankselection<span class="comment">')</span>
  , domReady = require(<span class="comment">'domready')</span>

domReady(<span class="keyword">function</span>() {
  customerlist(document.getElementById(<span class="comment">'customer-list'))</span>
  bankselection(document.getElementById(<span class="comment">'bank-selection'))</span>
})</code></pre>
<p>Assuming in this case that those elements exist in our document somewhere on start-up. Of course, they could equally be rendered from a template, or I could be using a document fragment for this and doing it detached... well yes - options, we have options.</p>
<h3>Communication between modules</h3>
<p>One thing we&#39;ve not done yet is re-enabled that dropdown to re-render that customer list. One guideline I tend to follow (although not strictly) is that these little self contained widgets shouldn&#39;t  generally be nested too deeply or be too coupled to each other.</p>
<p>For the customer list, there is no reason why it should know about the bank selection dropdown, as there are number of reasons why you might choose to filter the data being displayed there. </p>
<p>For the bank selection, there is no reason why it should know about the customer list, as we might have a bank selection widget anywhere else in our app.</p>
<p>So for now we&#39;ll write the code for this in our <em>app.js</em></p>
<pre><code class="lang-javascript">
var customerlist = require(&#39;./customerlist&#39;)
  , bankselection = require(./bankselection&#39;)
  , domReady = require(&#39;domready&#39;)

domReady(function() {
  var customers = customerlist(document.getElementById(&#39;customer-list&#39;))
    , banks = bankselection(document.getElementById(&#39;bank-selection&#39;))

  banks.on(&#39;bank-selected&#39;, function(bank) {
    customers.filterByBank(bank)
  })
})</code></pre>
<p>I&#39;ve not written the code to support this yet, but this acts as a statement of intent, that my bank selection widget is going to raise domain specific events and I&#39;m going to issue commands to the customer list based on those events. This is pleasantly explicit and from app.js easy to navigate into the approprate widgets to see what they do and how they work.</p>
<p>To support that, I need to issue events from the bank widget</p>
<pre><code class="lang-javascript"><span class="keyword">var</span> EventEmitter = require(<span class="string">'events'</span>).EventEmitter

module.exports = <span class="keyword">function</span>(element) {
  <span class="comment">// Other stuff</span>

  <span class="keyword">var</span> events = <span class="keyword">new</span> EventEmitter()
  model.selectedBank.subscribe(<span class="keyword">function</span>(bank) {
    events.emit(<span class="string">'bank-selected'</span>, bank)
  })
  <span class="keyword">return</span> events
}</code></pre>
<p>EventEmitter is just a built-in node thing which I don&#39;t like all that much but it&#39;ll do in this example. I could have gone and found an alternative module in NPM for doing events but I don&#39;t have a strong opinion on how this is supposed to work.</p>
<p>The filtering code in customerlist is pretty obvious and just re-renders the HTML inside the element</p>
<h3>We could go further</h3>
<p>In the real world we might decide to package these up as their own modules and stick them in our own private NPM repository (or a git repository).  This would mean they&#39;d come with their own package.json and their own README. We might leave them in their little folder and stick a README inside there instead - that works too, although more discipline might be required to keep things isolated from each other.</p>
<p>The documentation on what these widgets returned and the small surface area they expose could fit in a single markdown file in that repository and each widget would be easily re-writeable if we decided to do things differently. Consistency doesn&#39;t necessarily have to be enforced and each widget can be done in its own style quite happily. </p>
<p>Next up let&#39;s see what we can do about perhaps supporting some client-side navigation, as that&#39;s all the rage these days apparently.</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---a-module-per-widget.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---a-module-per-widget.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 26 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - What jQuery did right]]></title><description><![CDATA[<p>We are in a bit of a pickle. We have a little bit of code which does things to the dom and has interactivity, but how do we organise that so we don&#39;t just have a pile of code in a file?</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
<li><a href="/entries/starting-the-frameworkless-js-project.html">Getting started</a></li>
<li><a href="/entries/frameworkless-js---rendering-templates.html">Templating stuff</a></li>
<li><a href="/entries/frameworkless-js---but-we-*really*-want-to-use-knockout-for-that-bit.html">Demanding Knockout</a></li>
<li><a href="/entries/frameworkless-js---encapsulation-of-views.html">Encapsulation of views</a></li>
</ul>
<p>Well, a few of you are wanting me to <em>get to the point already</em> and I&#39;mma let you finish but first I&#39;mma tell you that jQuery is the greatest library of all time, ALL TIME.</p>
<h3>jQuery</h3>
<p>In the beginning there were a pile of JS files included into a pile of html files and executed in whatever order we felt like including them. If we were lucky there might be a common.js or a utils.js to wrap up various inconsistencies between browsers and then everything else just used those to hijack bits of the dom and do all manners of wicked things in our application.</p>
<pre><code class="lang-javascript">my.org.has.a.bigger.namespace.than.you.utils.getElementById(<span class="string">"foo"</span>)</code></pre>
<p>Then jQuery was born and we suddenly had a magical dollar symbol which gave us a way to use the dom without going through all those headaches. We saw that it was good and there were joyous celebrations across the land as the word spread and jQuery allowed us to write more spaghetti code and even faster than ever before.</p>
<pre><code class="lang-javascript">$(<span class="string">'#foo'</span>)</code></pre>
<p>And lo, for the jQuery team did see that perhaps not everything should be part of jQuery itself and they created a plug-in system whereby you could attach functions to the almighty dollar symbol and a sprawling ecosystem was born whereby everybody and their dogs were writing jQuery plugins to perform magic on web pages across the intarwebs.</p>
<pre><code class="lang-javascript">$(<span class="string">'#foo'</span>).magic()</code></pre>
<p>There was no standard. There was no dependency management. There were very few rules. We had jQuery plug-ins to handle touch events on a dom element, to convert a list into a tabbed UI, to create image sliders on your marketing homepage, to create and track various animations. The only commonality was that </p>
<ul>
<li>You included jQuery</li>
<li>You then included jQuery plug-ins</li>
<li>You then included your app which then used those plug-ins</li>
</ul>
<p>Some jQuery plugins would let you hook events through their configuration set-up</p>
<pre><code class="lang-javascript">$(<span class="string">'#foo'</span>).setupWidget({
  onActivated: <span class="keyword">function</span>() {
  },
  onDeactivated: <span class="keyword">function</span>() {

  },
  onMagic: <span class="keyword">function</span>() {

  }
})</code></pre>
<p>Some jQuery plug-ins would simply raise their events through the element itself once activated:</p>
<pre><code class="lang-javascript">$(<span class="string">'#foo'</span>).widget().on(<span class="string">'activated'</span>, <span class="keyword">function</span>() {})</code></pre>
<p>As a bonus to that lack of dependency management, jQuery plug-ins tended to be very standalone (in as much as they could be given their dependency on jQuery itself!), and they&#39;d commonly be pretty single purpose (do one thing and do it well...). </p>
<p>These plug-ins could</p>
<ul>
<li>Render a whole tree of HTML under the element(s) you selected</li>
<li>Attach CSS to that HTML</li>
<li>Expose semantic events over the top of that element</li>
</ul>
<pre><code class="lang-javascript">$(<span class="string">'ul.tabs'</span>).tabs() <span class="comment">// my favourite</span></code></pre>
<p>This sounds a lot like the desired encapsulation I&#39;ve been talking about in the last couple of entries.</p>
<h3>Pushing it to its limit</h3>
<p>And indeed, on a couple of projects I saw this pushed as far as it possibly could. The guidance being <em>If you like it then stick it in a plug-in</em>. The entire app therefore became a collection of jQuery plug-ins whose use was orchestrated by the entry point (app.js). Each widget would be responsible for managing the element it was given, all of the HTML below it and for pushing events back up which meant something in the app.</p>
<p>Each plug-in would have its own repository, its own documentation which was usually a single page, as more than that would mean the plug-in probably did too much. Using them meant you&#39;d RTFM for that plug-in to see how to make it work its magic. This experience was to a lesser extent mirrored in the general ecosystem outside too - for a couple of years an approach to client-side web development would mean reaching automatically to see <em>is there a jQuery plug-in that does that?</em></p>
<h3>This was pretty neat</h3>
<p>Does it sound familiar? We managed to build some pretty big apps this way, the downsides being</p>
<ul>
<li>No dependency management meant either documenting <em>spit</em> dependencies or not having any at all</li>
<li>No explicit path for knowing &quot;where code came from&quot;</li>
<li>Callstacks would often involve jQuery which was just fubarred</li>
</ul>
<p><em>What&#39;s this got to do with view encapsulation in js using npm modules?</em></p>
<p>I probably don&#39;t need to answer this question, but in essence I&#39;d say quite a lot.  If instead of jQuery plug-ins we think about modules in commonjs (where a module is either a package in NPM or just a single file included via &quot;require&quot;), and for documentation we think readme files on Github then we&#39;re almost there.</p>
<p>If we want a bit of functionality and our approach is to <em>add more code to our application&#39;s main file</em> then we&#39;ve already lost. If our approach is to write a standalone module which exposes a single documented function and use those to compose our application with then we&#39;ve probably got more legs.</p>
<p>As a bonus over those jQuery times (which looking back actually weren&#39;t <em>that</em> great), we get</p>
<ul>
<li>dependency management meaning we can potentially create even smaller modules(!)</li>
<li>an explicit dependency resolution path, code doesn&#39;t get invoked unless you invoke it</li>
<li>Sensible callstacks that exist entirely in &quot;ordinary&quot; code</li>
</ul>
<h3>Next steps</h3>
<p>Now that we&#39;ve had a brief history lesson, we&#39;ll look at emulating this inside an npm/browserify style application (for better or for worse).</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---what-jquery-did-right.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---what-jquery-did-right.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 21 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - encapsulation of views]]></title><description><![CDATA[<p>So we have a mess. What to do so we can end up with <a href="https://github.com/robashton/look-ma-no-frameworks/">not a mess.</a>?</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
<li><a href="/entries/starting-the-frameworkless-js-project.html">Getting started</a></li>
<li><a href="/entries/frameworkless-js---rendering-templates.html">Templating stuff</a></li>
<li><a href="/entries/frameworkless-js---but-we-*really*-want-to-use-knockout-for-that-bit.html">Demanding Knockout</a></li>
</ul>
<p><em>The state of play</em></p>
<ul>
<li>We have a single file, <em>app.js</em>, with a pile of code in it.</li>
<li>We have a single template, <em>customers.html</em> with some mustache and bindings in it</li>
<li>Everytime we change an option, the entire view gets re-rendered</li>
<li>Everytime we change an option, we have to re-hook all the events</li>
</ul>
<p>Not so brilliant, something we can all probably agree on.</p>
<p><em>What to do about it</em></p>
<p>Well in a nutshell this is about ownership. If a bit of code wants to render something to an element, then it should be responsible for binding anything to that element or anything underneath that element. Touching anything outside of that should be strongly discouraged.</p>
<p>This is one of the ideas that a lot of frameworks tend to push for good reason - and there are a million and one ways to do it. In this entry, we&#39;ll just take the most straight forward route of keeping the code in this single file and demonstrating the principle of ownership.</p>
<p>This is the code we currently have:</p>
<pre><code><span class="keyword">var</span> mustache = <span class="keyword">require</span>(<span class="string">'mustache'</span>)
  , domReady = <span class="keyword">require</span>(<span class="string">'domready'</span>)
  , ko = <span class="keyword">require</span>(<span class="string">'knockout'</span>)
  , testdata = <span class="keyword">require</span>(<span class="string">'./testdata'</span>)
  , fs = <span class="keyword">require</span>(<span class="string">'fs'</span>)

<span class="keyword">var</span> template = fs.readFileSync(__dirname + <span class="string">"/customers.html"</span>)
  , container = <span class="keyword">null</span>

domReady(function() {
  container = document.getElementById(<span class="string">'container'</span>)
  renderCustomers(customers)
})

<span class="function"><span class="keyword">function</span> <span class="title">renderCustomers</span><span class="params">(customers)</span> {</span>
  container.innerHTML = mustache.render(template, { customers:  customers })
  bindBankSelection()
}

<span class="function"><span class="keyword">function</span> <span class="title">bindBankSelection</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> model = {
    banks: ko.observableArray(testdata.banks),
    selectedBank = ko.observable()
  }
  ko.applyBindings(model, container)
  model.selectedBank.subscribe(onBankSelected)
}

<span class="function"><span class="keyword">function</span> <span class="title">onBankSelected</span><span class="params">(bank)</span> {</span>
  ko.cleanNode(container)
  renderCustomers(filterCustomersByBank(bank))
}</code></pre>
<p>The problem at the root of all this, is that both the customer list and the bank selection are hammering on the top level element (container) and it&#39;s not clear who owns what.</p>
<p>How about instead of this, we say that our top-level function takes in the top level container, and then gives a sub-element to both the customer list and the bank selection code?</p>
<pre><code>var model = <span class="cell">{
  customers: testdata.customers,
  banks: testdata.customers
  selectedBank = ko.observable()
}</span>

domReady(<span class="keyword">function</span>() <span class="cell">{
  banks(container.getElementsByClassName(<span class="string">'banks'</span>)[<span class="number">0</span>])
  customers(container.getElementsByClassName(<span class="string">'customers'</span>)[<span class="number">0</span>])
}</span>)

<span class="function"><span class="keyword">function</span> <span class="title">banks</span><span class="params">(el)</span> {</span>
  <span class="transposed_variable">el.</span>innerHTML = <span class="transposed_variable">mustache.</span>render(bankstemplate, model)
  <span class="transposed_variable">ko.</span>applyBindings(model, el)
  <span class="transposed_variable">model.</span><span class="transposed_variable">selectedBank.</span>subscribe(onBankSelected)
}

<span class="function"><span class="keyword">function</span> <span class="title">onBankSelected</span><span class="params">(bank)</span> {</span>
  <span class="transposed_variable">model.</span>customers = filterByBank(<span class="transposed_variable">testdata.</span>customers)
  customers(<span class="transposed_variable">container.</span>getElementsByClassName(<span class="string">'customers'</span>)<span class="matrix">[<span class="number">0</span>]</span>)
}

<span class="function"><span class="keyword">function</span> <span class="title">customers</span><span class="params">(el)</span> {</span>
  <span class="transposed_variable">el.</span>innerHTML = <span class="transposed_variable">mustache.</span>render(customerstemplate, model)
}</code></pre>
<p>Something like that.</p>
<p><em>Yuck, still a mess</em></p>
<p>Yep, we solved the main problem which was the ownership of elements but we&#39;re using a weird shared model and not really encapsulating anything else.</p>
<p>I want to approach the topic of encapsulation slowly and with the demonstration of the actual problems we&#39;re trying to solve. It&#39;s very easy to run into a &quot;let&#39;s use this pattern everywhere&quot; and I want to put across the notion of shared modules that don&#39;t have to have a homogeneous setup.</p>
<p>Next up, we&#39;ll take the next steps towards that by looking at the heady days of &quot;<em>what jquery did right</em>&quot;.</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---encapsulation-of-views.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---encapsulation-of-views.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 19 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - but we *really* want to use Knockout for that bit]]></title><description><![CDATA[<p>Continuing then with the <a href="https://github.com/robashton/look-ma-no-frameworks/">&quot;look no ma no frameworks&quot;</a> series...</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
<li><a href="/entries/starting-the-frameworkless-js-project.html">Getting started</a></li>
<li><a href="/entries/frameworkless-js---rendering-templates.html">Templating stuff</a></li>
</ul>
<p>What about when we really want to use something like Knockout in our application...</p>
<p>In actual fact, the issue I was being specifically asked to address at this client was that they had chosen to use Knockout on their projects and were generally being quite successful with it until they ran into a situation where getting it to fit was causing issues.</p>
<p><em>How can we build an application which uses Knockout except when it doesn&#39;t</em></p>
<p>A slightly different question and on the surface really obvious but the temptation is there to treat KO as a framework rather than a library and let it rule our application.</p>
<p><em>The difference between a framework and a library is that you use a library, whereas a framework uses you</em></p>
<p>So okay then, let&#39;s pull in Knockout</p>
<pre><code><span class="comment">npm</span> <span class="comment">install</span> <span class="comment">knockout</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</code></pre>
<p><em>gasp</em>, yes indeed - it is shipped as a self-contained NPM module which is pretty pleasing if you&#39;re wanting to develop applications in this way.</p>
<pre><code><span class="keyword">var</span> ko = <span class="keyword">require</span>(<span class="string">'ko'</span>)</code></pre>
<p>Being that we only had a couple of hours to complete this programming exercise we needed something simple to apply this to and went for the overly simplistic example of &quot;binding to a select list&quot;. This is a bit unrealistic and I apologise for this - binding to the events of a single element isn&#39;t really the best excuse for importing a large library like KO into your application(!!).</p>
<h1>Building the customer list</h1>
<p>First we can shove some test data into a file <em>testdata.js</em>. </p>
<pre><code>module.exports = {
  <span class="method">banks:</span> [ <span class="comment">"spv"</span>, <span class="comment">"fana"</span>, <span class="comment">"lloyds"</span> ],
  <span class="method">customers:</span> [
    { <span class="method">bank:</span> <span class="comment">"spv"</span>, <span class="method">name:</span> <span class="comment">"bob"</span> , <span class="method">desc:</span> <span class="comment">"bob is a late payer"</span>},
    { <span class="method">bank:</span> <span class="comment">"fana"</span>, <span class="method">name:</span> <span class="comment">"alice"</span>, <span class="method">desc:</span> <span class="comment">"alice always pays on time"</span>},
    { <span class="method">bank:</span> <span class="comment">"lloyds"</span>, <span class="method">name:</span> <span class="comment">"craig"</span>, <span class="method">desc:</span> <span class="comment">"craig is chillin on sunday"</span>  },
    // etc
  ]
}</code></pre>
<p>And we can bind this to a template that looks like this</p>
<pre><code><span class="tag">&lt;<span class="title">table</span>&gt;</span>
  <span class="variable">{{#customers}}</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{name}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{bank}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
  <span class="variable">{{/customers}}</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span></code></pre>
<p>With the following application code in <em>app.js</em></p>
<pre><code><span class="keyword">var</span> mustache = <span class="keyword">require</span>(<span class="string">'mustache'</span>)
  , domReady = <span class="keyword">require</span>(<span class="string">'domready'</span>)
  , testdata = <span class="keyword">require</span>(<span class="string">'./testdata'</span>)
  , fs = <span class="keyword">require</span>(<span class="string">'fs'</span>)

<span class="keyword">var</span> template = fs.readFileSync(__dirname + <span class="string">"/customers.html"</span>)

domReady(function() {
  <span class="keyword">var</span> container = document.getElementById(<span class="string">'container'</span>)
  container.innerHtml = mustache.render(template, testdata)
})</code></pre>
<p>Notice that we use a relative path in our require statement to bring in whatever code was exported via <em>module.exports</em> in the testdata.js file. Other than that, there is nothing new here so moving on.</p>
<p><em>Filtering the list of customers</em></p>
<p>I want a dropdown to do this with and for now I&#39;m going to add that to the customers template - we&#39;ll see shortly why that might be a bad idea but right now I&#39;m going for the prize and don&#39;t know anything about future problems.</p>
<pre><code><span class="tag">&lt;<span class="title">select</span> <span class="attribute">name</span>=<span class="value">"bank"</span> <span class="attribute">data-bind</span>=<span class="value">"options: banks, value: selectedBank"</span>&gt;</span>
<span class="tag">&lt;<span class="title">table</span>&gt;</span>
  <span class="variable">{{#customers}}</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{name}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{bank}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
  <span class="variable">{{/customers}}</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span></code></pre>
<p>Hooking this up in our <em>app.js</em> is just the standard Knockout code that we&#39;ve all seen before, and that I <em>always</em> have to go onto the documentation website to remember how to do ;-)</p>
<pre><code><span class="keyword">var</span> mustache = <span class="keyword">require</span>(<span class="string">'mustache'</span>)
  , domReady = <span class="keyword">require</span>(<span class="string">'domready'</span>)
  , ko = <span class="keyword">require</span>(<span class="string">'knockout'</span>)
  , testdata = <span class="keyword">require</span>(<span class="string">'./testdata'</span>)
  , fs = <span class="keyword">require</span>(<span class="string">'fs'</span>)

<span class="keyword">var</span> template = fs.readFileSync(__dirname + <span class="string">"/customers.html"</span>)
  , container = <span class="keyword">null</span>

domReady(function() {
  container = document.getElementById(<span class="string">'container'</span>)
  renderCustomers(customers)
})</code></pre>
<p>So I&#39;ve broken this up a bit and I&#39;m passing in a custom model</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">renderCustomers</span><span class="params">(customers)</span> {</span>
  <span class="transposed_variable">container.</span>innerHtml = <span class="transposed_variable">mustache.</span>render(template, <span class="cell">{ customers:  customers }</span>)
  bindBankSelection()
}</code></pre>
<p>And we bind to the bank selection in a standard way</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">bindBankSelection</span><span class="params">()</span> <span class="comment">{
  var model = {
    banks: ko.observableArray(testdata.banks),
    selectedBank = ko.observable()
  }</span>
  <span class="title">ko</span>.<span class="title">applyBindings</span><span class="params">(model, container)</span>
  <span class="title">model</span>.<span class="title">selectedBank</span>.<span class="title">subscribe</span><span class="params">(onBankSelected)</span>
}

<span class="title">function</span> <span class="title">onBankSelected</span><span class="params">(bank)</span> <span class="comment">{
  ko.cleanNode(container)
  renderCustomers(filterCustomersByBank(bank))
}</span></code></pre>
<p><em>this is a bit crap</em></p>
<p>Yeah - so this is the spaghetti code we&#39;re talking about occuring if you&#39;re not using a framework. Re-rendering the whole page just to update a list of customers? Why re-render the select control at all? Why have we got two rendering systems slamming into what is effectively a global dom element with global data?</p>
<p>Clearly there has to be a better way to have our cake <em>and</em> eat it and we&#39;ll talk about that in the next blog entry about building composable widgets.</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---but-we-*really*-want-to-use-knockout-for-that-bit.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---but-we-*really*-want-to-use-knockout-for-that-bit.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 14 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - rendering templates]]></title><description><![CDATA[<p>Continuing then with the <a href="https://github.com/robashton/look-ma-no-frameworks/">&quot;look no ma no frameworks&quot;</a> series...</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
<li><a href="/entries/starting-the-frameworkless-js-project.html">Getting started</a></li>
</ul>
<p>Now, I&#39;m <a href="/entries/anti-templating-languages.html">no real fan of pull-based templating systems</a>, but I lost the war on this a while ago and I&#39;m not going to impose this one on this system today. (Remember, this was a walkthrough for a client with specific questions and not about me trying to impose my own opinions on a team I wasn&#39;t going to stay with)</p>
<p>So we picked a templating engine at random, and went with Mustache.. because no reason.</p>
<pre><code><span class="comment">npm</span> <span class="comment">install</span> <span class="comment">mustache</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</code></pre>
<p>Great! There were celebrations in the street as we wrote the following code...</p>
<pre><code>var mustache = require('mustache')
  , domReady = require('domready')

var template = "<span class="tag">&lt;<span class="title">p</span>&gt;</span>Hello <span class="variable">{{name}}</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>"

domReady(function() {
  var container = document.getElementById('container')
  container.innerHtml = mustache.render(template, { name: "Bob" })
})</code></pre>
<p><em>Waaait a minute, what is going on here - why have you just stuck stuff in a string that is cheating Rob Ashton how dare you.</em></p>
<p>Guilty as charged, clearly this isn&#39;t going to scale well over time (although it&#39;s probably going to be better than building up strings of html using the &quot;+&quot; operator).</p>
<p>What we need here clearly is something that can give us a template from an external source and allow us to use it from there now if only such a thing existed.</p>
<p>The temptation is there to download these things as needed from the server - and in some cases this is certainly an option (although in those cases a server-side rendering approach might not be a bad idea either).</p>
<p>Instead, how about writing code like this?</p>
<pre><code><span class="keyword">var</span> mustache = <span class="keyword">require</span>(<span class="string">'mustache'</span>)
  , domReady = <span class="keyword">require</span>(<span class="string">'domready'</span>)
  , fs = <span class="keyword">require</span>(<span class="string">'fs'</span>)

<span class="keyword">var</span> template = fs.readFileSync(__dirname + <span class="string">"/myfunkytemplate.html"</span>)

domReady(function() {
  <span class="keyword">var</span> container = document.getElementById(<span class="string">'container'</span>)
  container.innerHtml = mustache.render(template, { name: <span class="string">"Bob"</span> })
})</code></pre>
<p>What on earth? What is this even? Magic? <em>fs</em> is a module you didn&#39;t see me install because normally this is a server-side module in node.js - and right now the example above does absolutely nothing.</p>
<p>You will recall our process for building the output file looked like this:</p>
<pre><code>browserify app<span class="variable">.js</span> -o <span class="keyword">public</span>/app<span class="variable">.js</span></code></pre>
<p>Now, if only there was something smart enough to see that <em>readFileSync</em> call and replace that with inline content from our template file...</p>
<pre><code><span class="comment">npm</span> <span class="comment">install</span> <span class="comment">brfs</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</code></pre>
<p>Boom, headshot. This is a transformer for browserify, something that can take the output of browserify and do something with it. If we use it like so</p>
<pre><code>browserify -t brfs app<span class="variable">.js</span> -o <span class="keyword">public</span>/app<span class="variable">.js</span></code></pre>
<p>Then just like magic, the un-optimised output will look like this</p>
<pre><code>var mustache = require('mustache')
  , domReady = require('domready')

var template = "<span class="tag">&lt;<span class="title">p</span>&gt;</span>Hello <span class="variable">{{name}}</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>"

domReady(function() {
  var container = document.getElementById('container')
  container.innerHtml = mustache.render(template, { name: "Bob" })
})</code></pre>
<p>Which was just like the initial example where we started. Neat huh?</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---rendering-templates.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---rendering-templates.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 12 Nov 2013 09:30:00 GMT</pubDate></item></channel></rss>