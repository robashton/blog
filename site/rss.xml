<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><image><url>http://codeofrob.com/img/cover.jpg</url><title>Rob Ashton&apos;s blog</title><link>http://codeofrob.com</link></image><generator>NodeJS RSS Module</generator><lastBuildDate>Tue, 23 Jul 2013 12:53:12 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><item><title><![CDATA[jQuery is not a framework but I avoid using it too]]></title><description><![CDATA[<p>The very first thing I usually want to do with a project, is to do something with the dom.</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma, no frameworks</a></li>
<li><a href="/entries/grunt+browserify+npm+application=success.html">Grunt+browserify+npm+application=success</a></li>
</ul>
<p><em>What is jQuery?</em></p>
<p>jQuery isn&#39;t a framework, it doesn&#39;t take over your entry point, doesn&#39;t force any sort of structure on you and doesn&#39;t have any of the other smells associated with frameworks in general; it is a general purpose glue library.</p>
<p>Most people will by default pull it down and start using it on their page without giving it a second thought, most people shove the majority their code into the jQuery &quot;Dom ready&quot; callback, use the selectors to find their elements and start doing things without worrying about what is going on under the hood. </p>
<p>A lot of projects will also do this <em>all over the place</em> without thinking about it because it&#39;s so easy, and that&#39;s part of my problem <em>with</em> jQuery, it makes it too easy for developers to just zombie along without thinking about what we&#39;re doing.</p>
<p><em>jQuery - it&#39;s not you, it&#39;s me</em></p>
<p>It&#39;s not that I don&#39;t like jQuery, it solved many problems back in the day before JS was cool, and probably contributed in part to the rise of JS as the weapon of choice for most dev work.</p>
<p>It&#39;s just, it solves <em>many</em> problems and has gotten quite confused over the years, <a href="http://api.jquery.com/category/events/event-handler-attachment/">look at how many ways we&#39;ve ended up with to listen to events</a> for example. </p>
<p>A lot of these complaints are being dealt with as the project moves forward slowly but that&#39;s half of my conflict with it. The size and scope of the project and the number of people using it means that any change or improvement has to come gradually. The speed at which with small libraries I can either fork/patch/modify is pretty cool.</p>
<p><em>Every line of code should be justified</em></p>
<p>When you pull in a large library like jQuery, you&#39;re pulling in hundreds of methods to do <em>stuff</em>, and for me personally that&#39;s a bad way of working. In my perfect world, every method should have a reason to exist in my application.</p>
<p>In short, jQuery is a 100kb swiss army knife and it&#39;s not my personal preference to work with such tools.</p>
<p><em>A tangible example</em></p>
<p>Okay, so first things first - how do I wait for the dom to be ready so I can do stuff with it?</p>
<pre><code><span class="tag">&lt;<span class="title">html</span>&gt;</span>
  <span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"content"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"type="</span><span class="attribute">text</span>/<span class="attribute">javascript</span>"&gt;</span><span class="javascript">
      <span class="comment">// Do stuff with "content"</span>
    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></code></pre>
<p><em>Trololol</em>, actually, you could read/write about this subject until the cows come home and enough people have, but I just wanted to make the point that sometimes you don&#39;t have to write any code and thinking about stuff before doing:</p>
<pre><code><span class="variable">$(</span>function() {
  <span class="regexp">//</span> <span class="constant">My</span> <span class="constant">Application</span>
})</code></pre>
<p>might hold some benefits.</p>
<h1>Avoiding jQuery</h1>
<p>Anyway, waiting for the DOM to be ready is still <a href="http://stackoverflow.com/questions/6902280/cross-browser-dom-ready">potentially complicated </a> and managing this stuff ourselves doesn&#39;t seem very worthwhile.</p>
<h1>NPM to the rescue</h1>
<pre><code class="lang-bash">npm install domready --save-dev
vim client/app.js</code></pre>
<pre><code class="lang-javascript"><span class="keyword">var</span> domready = require(<span class="string">'domready'</span>)

domready(<span class="keyword">function</span>() {
  <span class="comment">// Application code goes here</span>
})</code></pre>
<p>What happened here, is I decided for the entry point to my application I needed a cross browser dom ready function, so I pulled one down from NPM and used it.</p>
<p>This is the preferred mode of working in this frameworkless environment.</p>
<ul>
<li>Start writing a feature</li>
<li>Realise we need code that isn&#39;t directly related to that feature</li>
<li>Find a library that does that specific thing</li>
<li>Install it</li>
<li>Carry on</li>
</ul>
<h1>It&#39;s not re-inventing the wheel</h1>
<p>In the last blog entry, I was accused of <a href="/entries/look-ma,-no-frameworks.html">&quot;re-inventing the wheel&quot;</a>. This is as about as far from the truth as it could be - the best thing we can ever do when writing a feature, is to avoid writing code.</p>
<p>However, building our feature on top of something that doesn&#39;t directly solve a problem we&#39;re facing is where the conflict lies. By limiting ourselves to single shot libraries such as domReady we should be able to avoid a lot of the disconnect we face when pulling in larger libraries or frameworks.</p>
<h1>Discovering these small libraries in the first place</h1>
<p><em>First, try searching on <a href="https://search.npmjs.org/">npmjs.org</a></em></p>
<p>If we have a specific keyword to look for, this is usually good enough.  Searching for <em>domready</em> on this page will give us a collection of libraries to choose from.</p>
<p><em>Next, try <a href="http://google.com">google.com</a></em></p>
<p>Google is great at fuzzy searches - and generally if you include &quot;NPM&quot; in the search we&#39;ll get better results than using the NPM search itself if we&#39;re not too sure what we&#39;re looking for.</p>
<h1>Choosing the library</h1>
<p>There are a dozen domready libraries (and for most simple problems this is the case) - this is <em>great</em>, we just need to be able to pick which one to use. I like to ask the following questions</p>
<ul>
<li>How many libraries are using this one? (More is mostly better)</li>
<li>How many libraries does it consume? (Less is mostly better)</li>
<li>Does the documentation fit in a single README?</li>
<li>Is there a link to Github?</li>
<li>How many people watch  the project on Github?</li>
<li>Is there a lot of code churn? (I don&#39;t want to see a lot of activity on the Github repo)</li>
<li>Are there many outstanding issues?</li>
</ul>
<p>This might seem like a lot of work, but making that third party code justify itself in this way means that it&#39;ll be right for the project and not just some ad-hoc file in a directory somewhere.</p>
<h1>Next steps</h1>
<p>Next up, we&#39;ll have a look at some of the patterns I use when building a dom-intensive JS application.</p>
]]></description><link>http://codeofrob.com/entries/jquery-is-not-a-framework-but-i-avoid-using-it-too.html</link><guid isPermaLink="true">http://codeofrob.com/entries/jquery-is-not-a-framework-but-i-avoid-using-it-too.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 23 Jul 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Grunt+browserify+npm+application=success]]></title><description><![CDATA[<p>Previous entries in this series:</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma, no frameworks</a></li>
</ul>
<p>How do I start a project if I have no framework? What are the first things I do and how do I organise it? Let&#39;s have a look shall we?</p>
<h1>Create the repo</h1>
<p>I use git, no brainer.</p>
<pre><code class="lang-bash">git init
touch README.md
git add README.md 
git commit -m <span class="string">"Readme"</span>
git remote add origin githubetc
git push -u origin master</code></pre>
<h1>Create a manifest</h1>
<p>I use npm to manage my dependencies, makes sense</p>
<pre><code class="lang-bash">npm init
git add package.json 
git commit -m <span class="string">"package.json"</span></code></pre>
<h1>Install grunt</h1>
<p>I use grunt to run my various build/test/deploy scripts, I could just use all the tools I use stand-alone but having a single build system with tasks is documentation we then haven&#39;t got to write. It&#39;s no fun if new joiners have to install and run crap.
Grunt comes in two parts. the package itself (&quot;grunt&quot;) and the command line package for running it (&quot;grunt-cli&quot;)</p>
<pre><code class="lang-bash">npm install grunt --save-dev
npm install -g grunt-cli</code></pre>
<p>Client/script/dev dependencies I usually stick in as dev dependencies ala above, we build and then we deploy the compiled assets so we don&#39;t need them in production.</p>
<p>What I often do is put global dependencies like this as a pre-install script for the package.json so people haven&#39;t got to remember to install them (note, not in OSS stuff as that might annoy folk):</p>
<pre><code class="lang-bash">vim package.json
`</code></pre>
<pre><code class="lang-json">{
  &quot;name&quot;: &quot;awesome-app&quot;,
  &quot;version&quot;: &quot;etc&quot;,
  &quot;scripts&quot;: {
    &quot;preinstall&quot;: &quot;npm install -g grunt-cli&quot;
  },
  &quot;etc&quot;
}</code></pre>
<p>Grunt needs a Gruntfile, this looks like this:</p>
<pre><code class="lang-bash">vim Gruntfile.js</code></pre>
<pre><code class="lang-javascript">module.exports = <span class="keyword">function</span>(grunt) {
  grunt.initConfig({
    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>)
  })
}</code></pre>
<pre><code class="lang-bash">git add Gruntfile.js 
git commit -am <span class="string">"Grunt setup"</span></code></pre>
<h1>Create the app</h1>
<p>I&#39;ll usually have a folder called &quot;client&quot;, which contains all the HTMl/CSS/JS in it. The build script will take these assets and build them into a &quot;public&quot; directory which is empty by default. I say HTML/CSS, but I actually mean Jade/Stylus.</p>
<p>I&#39;m not going to write about the server code for any of this, because I don&#39;t care if we&#39;re using ASP.NET/Ruby/Node - this is a client application and the server is irrelevant.</p>
<p>What matters is that somehow these jade/stylus files can be rendered by the server or pre-built somehow.</p>
<p>Then </p>
<pre><code class="lang-bash">touch client/index.jade
touch client/theme.styl
touch client/app.js</code></pre>
<p>I don&#39;t bother with elaborate folder hierarchies to begin with, lumping everything in a single folder to begin with makes perfect sense and when/if it gets too big it&#39;ll probably be split up by feature rather than by whether it&#39;s CSS or not.</p>
<h1>Build script for my app.js</h1>
<p>app.js is the entry point to my client application, it&#39;ll be imported in my HTML like so</p>
<pre><code class="lang-xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"/app.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></code></pre>
<p>I don&#39;t bother with <a href="/entries/why-i-stopped-using-amd.html">any of that AMD stuff</a> for the obvious reasons, but obviously I&#39;m not going to have everythingin the same file. I like to use Browserify cos that&#39;s kinda neat and encourages us to push code into modules and install them via npm.</p>
<p>Now, we can get our web server to do this stuff on request, but I like to run a build script and get errors immediately when changing my files. I now have grunt, so I&#39;ll use the &quot;grunt-browserify&quot; package to make this part of my build.</p>
<pre><code class="lang-bash">npm install grunt-browserify --save-dev
vim Gruntfile.js</code></pre>
<pre><code class="lang-javascript">module.exports = <span class="keyword">function</span>(grunt) {
  grunt.initConfig({
    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),
    browserify: {
      <span class="string">'/public/app.js'</span>: [<span class="string">'/client/app.js'</span>]
    }
  })
  grunt.loadNpmTasks(<span class="string">'grunt-browserify'</span>)
}</code></pre>
<p>This now means I can run</p>
<pre><code class="lang-bash">grunt browserify</code></pre>
<p>And the application will be built from &quot;client/app&quot; to &quot;public/app&quot;</p>
<p>This actually gets tedious after a while, so I often end up with another grunt module &quot;grunt-contrib-watch&quot;, to watch for changes and automatically r-erun this file.</p>
<pre><code class="lang-bash">npm install grunt-contrib-watch --save-dev
vim Gruntfile.js</code></pre>
<pre><code class="lang-javascript">module.exports = <span class="keyword">function</span>(grunt) {
  grunt.initConfig({
    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),
    browserify: {
      <span class="string">'public/app.js'</span>: [<span class="string">'client/app.js'</span>]
    }
    watch: {
      files: [ <span class="string">"client/**/*.js"</span>],
      tasks: [ <span class="string">'browserify'</span> ]
    }
  })
  grunt.loadNpmTasks(<span class="string">'grunt-browserify'</span>)
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>)
}</code></pre>
<p>This means I can now run</p>
<pre><code class="lang-bash">grunt watch</code></pre>
<p>And not think about this again.</p>
<h1>Automate all the things</h1>
<p>I actually go much further than the above, and use grunt to</p>
<ul>
<li>Run the web server</li>
<li>Run the tests automatically (using grunt-contrib-watch again)</li>
<li>Run any other servers needed (redis/phantomjs/etc)</li>
</ul>
<p>Modules I find useful for this</p>
<ul>
<li>grunt-nodemon</li>
<li>grunt-concurrent</li>
<li>grunt-exec</li>
<li>grunt-env</li>
</ul>
<p>I&#39;ll register a custom task called &#39;develop&#39; which means all any developer needs to do in order to start any work on my project is type</p>
<pre><code class="lang-bash">grunt develop</code></pre>
<p>And they can get to work immediately.</p>
<h1>This is quite a lot of set-up</h1>
<p>I don&#39;t do this very often, this is a collection of tools/libraries that I really like and have come to appreciate very much. Anything is interchangeable for other things and I&#39;m not afraid to change any part of it at some point if something better comes up.</p>
<p>I do have a repo which I clone which has these things already set up for a blank project - but this is personal to me and the way I want to work. In a team this might be different (compromise) and for you it&#39;ll be different too.</p>
<p>So I won&#39;t be sharing it. Sorry :)</p>
]]></description><link>http://codeofrob.com/entries/grunt+browserify+npm+application=success.html</link><guid isPermaLink="true">http://codeofrob.com/entries/grunt+browserify+npm+application=success.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 18 Jul 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Look ma, no frameworks]]></title><description><![CDATA[<p>Having a break from the FP series, I&#39;ve made a few statements in the past and had more than a few discussions with people about how I build JS applications and the most common question I get asked is</p>
  <blockquote>How on earth can you build JS applications without a framework?</blockquote>

<p>My favourite quote on this subject so far is...</p>
  <blockquote>Typical cowboy bullshit</blockquote>

<p>Which came from the <a href="http://www.reddit.com/r/programming/comments/1hqmyj/working_for_free_and_what_it_taught_me/cawyy87">Reddit thread</a> about <a href="/entries/working-for-free-and-what-it-taught-me.html">Working for free</a>, and is a a typical reaction when I&#39;m waving my arms around about how awesome not using frameworks is without really backing it up with info.</p>
<p>So, here&#39;s the deal, I&#39;m going to go through a few of the libraries, patterns and techniques that I use over the next few entries to show my workflow/thinking/etc around this to supplement some of this arm waving with useful information.</p>
<h1>First up, the arm-waving - why?</h1>
<p><em>I don&#39;t like being told what to do</em></p>
<p>I admit it, I&#39;m a bit of an anti-authority type. If I&#39;m told to do something by somebody and they&#39;ve not yet earned my respect, I&#39;m probably going to be having words. Admittedly this has gotten me into trouble in the past but hey ho... </p>
<p>The same goes for frameworks, I hate being told what to do and where to put things from the get-go. Without discovering reasons for those decisions in the applications I&#39;m building. I&#39;m not saying I don&#39;t re-use patterns and ways of doing things that have served me well in previous applications (this is what this series is going to be about after all). </p>
<p>The thing is that over time I&#39;ve come to the conclusion that a lot of the ways we do things in frameworks are <em>wrong</em> anyway.</p>
<p>That brings me onto...</p>
<p><em>I don&#39;t like forced abstractions</em></p>
<p>Data binding? Logicless Templating? MVVM? MVC? Not my cup of tea most of the time, forcing your application into layers either on the server or the client before we even know what our requirements are takes away too much control and leaves little room for the more natural abstractions that a more vanilla approach will provide.</p>
<p>It&#39;s hubris for a framework to suggest that it will somehow magically enable us to write &quot;Application Scale JavaScript&quot; (whatever this means). It is dangerous to think that by separating our application up in horizontal slices somehow yields in better, more manageable code.</p>
<p>Abstractions should be used because there is a pain that needs solving, whether that be because you&#39;re talking to third party code, or slow remote calls that need hiding during testing or because there is complexity that needs hiding. Putting abstractions in before we feel any of this pain just means more code to wade through when trying to get stuff done - no thanks.</p>
<p><em>I like power</em></p>
<p>If I want to bulldoze my way through a feature, then I want to bulldoze my way through a feature. If this means taking a shotgun to the DOM then that&#39;s what I want to do. If it means abusing cookies/local storage for nefarious purposes then that&#39;s what I want to do.  If there is a module/library around that can help me I want to pull it in and <em>use</em> it.</p>
<p>The power is mine to do these things. As soon as a framework starts imposing its will on me, this power often goes away and more importantly...</p>
<p><em>I hate fighting</em></p>
<p>I keep saying this - that Frameworks basically mean having to fight edge cases instead of actually writing feature code. </p>
<p>I&#39;m not saying that you can&#39;t be faster if all you do is glue things together, but spending hours reading StackOverflow to find out how to insert Knob A into Hole B is not my idea of fun at all. As much as I value getting things done - I start getting pretty miserable when that tiny little feature I wanted to develop turns into hours of trying to fit incompatible abstractions together.</p>
<p><em>Focus</em></p>
<p>The problem with frameworks is not that they don&#39;t solve problems beacuse for some people they do. My problem with them is generally that they try to solve more than one problem and because of this there is often a conflict between what I want to get done application development vs what is provided in the framework. </p>
<p>Focus is the key here, when I&#39;m pulling in a library that does something, I want to know that I can use it without its implementation getting in the way of the other things I want to do.</p>
<p><em>I want control over my entry points</em></p>
<p>I want an app.js which contains the code that sets up my application. (Frameworks don&#39;t necessarily prevent you doing this, Backbone is a good example). I want to be responsible for creating new objects/services and control their lifetimes from the outside in.</p>
<p>Doing so means that isolating code I want to test is trivial, that everything remains explicit and readable from that point in, and at any point it&#39;s possible to change how the application works without fighting configuration or convention. I long the days when either we&#39;re not writing code because we&#39;ve hit the singularity or we&#39;ve moved past this notion of &quot;Drop some files in these arbitrary folders and honest we&#39;ll wire everything up for you&quot;</p>
<h1>Onwards then...</h1>
<p>I don&#39;t know where I&#39;m going with this, but I&#39;ll try to start from the beginning and take it from there.</p>
]]></description><link>http://codeofrob.com/entries/look-ma,-no-frameworks.html</link><guid isPermaLink="true">http://codeofrob.com/entries/look-ma,-no-frameworks.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 16 Jul 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Learn functional programming with me - but rob, it needs to be more composable]]></title><description><![CDATA[<p>As I write my Clojure and the related blog posts, I&#39;ve been having them reviewed by <a href="http://twitter/bodil">@bodil</a> who is a proper functional programming neckbeard emacs type.</p>
<ul>
<li><a href="/entries/learn-functional-programming-with-me---a-mission-statement.html">Mission statement</a></li>
<li><a href="/entries/learn-functional-programming-with-me---drawing-a-square.html">Drawing a square</a></li>
<li><a href="/entries/learn-functional-programming-with-me---moving-the-square.html">Moving the square</a></li>
<li><a href="/entries/learn-functional-programming-with-me---attributes-and-vectors.html">Attributes and vectors</a></li>
<li><a href="/entries/learn-functional-programming-with-me---improving-my-workflow.html">Improving my workflow</a></li>
<li><a href="/entries/learn-functional-programming-with-me---adding-lots-more-state.html">Creating lots of state</a></li>
<li><a href="/entries/learn-functional-programming-with-me---mutating-lots-of-state.html">Mutating lots of state</a></li>
<li><a href="/entries/learn-functional-programming-with-me---improving-our-data-structure-with-maps.html">Improving our data structure with maps</a></li>
<li><a href="/entries/learn-functional-programming-with-me---keyboard-input-for-our-red-square.html">Moving our red square with keyboard input</a></li>
<li><a href="/entries/learn-functional-programming-with-me---adding-items-to-a-sequence.html">Adding items to a sequence and firing bullets</a></li>
<li><a href="/entries/learn-functional-programming-with-me---refactoring-my-state-transitions.html">Refactoring my state transitions</a></li>
<li><a href="/learn-functional-programming-with-me---more-idiomatic-clojure.html">More idiomatic clojure</a></li>
<li><a href="/entries/learn-functional-programming-with-me---adding-collision-detection-to-the-game.html">Adding collision detection</a></li>
<li><a href="/entries/learn-functional-programming-with-me---functional-difficulty-levels.html">Functional difficulty levels</a></li>
</ul>
<p>Her most recent piece of feedback was</p>
  <blockquote>
    What strikes me about your code right now is that it&#39;s not very composable
  </blockquote>

<p>Well I have to admit I had no idea what she meant by this, although it was in reference to a problem I was highlighting myself of <em>I&#39;m passing too much data around</em></p>
<p>It turns out that this is pretty much what the FP guys mean when they say that code isn&#39;t composable.</p>
<p>Obeerne of the beautiful things about the way languages like Clojure make you build up code, is that the functions you write are supposed to be re-usable across very basic and well-known data structures.</p>
<h3>Composability and Types</h3>
<p><a href="http://clojure.org/sequences">Sequences</a> are probably the best structures to be operating on top of, maybe with some primitives as directives of how to operate on them. </p>
<p>User defined structures such as a &quot;vector&quot; probably come in next and then my big chunk of state as a hash... well that&#39;s the worst - especially if I&#39;m passing it around as one big thing all the time.</p>
<p>With that in mind, suddenly we have a use for defined data structures like records (something I have been putting off for a while), and perhaps I can begin to solve my awkward relationship with that big ball of state. Something I have been muttering about for the past few blog entries.</p>
<p>So, I&#39;ve read the <a href="http://clojure.org/datatypes">page on types</a> in Clojure and from what I understand it seems that deftype is for structures with no behaviour, and defrecord is for more OOP scenarios but there is also <a href="http://clojure.org/protocols">defprotocol</a> which is somehow related to both and will probably help me with my current data-ball-of-mud problem.</p>
<p>To further confound me, the docs have snippets like this in them</p>
  <blockquote>
  Protocols are fully reified
  </blockquote>

<p>I&#39;ll need a dictionary and a copy of SICP to understand this and my brain is melting a bit so I go to find wine. Nice cool wine on a terrace overlooking St Pauls Cathedral and try to make sense of these docs a bit more.</p>
<h3>Composability and Space Invaders</h3>
<p>Starting at the other end of the problem - away from wordy confusion, it&#39;s very easy to see that there are some basic data types in my Space Invaders game and I have some basic operations over the top of them.</p>
<p>First up, I&#39;m passing &#39;rects&#39; all over the place, and a rect is defined as </p>
<pre><code><span class="title">x</span> : <span class="type">LHS</span> <span class="keyword">of</span> the rect
<span class="title">y</span> : <span class="type">TOP</span> <span class="keyword">of</span> the rect
<span class="title">w</span> : <span class="type">Width</span> <span class="keyword">of</span> the rect
<span class="title">h</span> : <span class="type">Height</span> <span class="keyword">of</span> the rect</code></pre>
<p>That&#39;s the state, and there are some basic operations over the top of this - some which involve mutation and some which do not</p>
<ul>
<li>Draw it (no mutation of internal state) </li>
<li>bottom of the rect (no mutation)</li>
<li>RHS of the rect (no mutation)</li>
<li>move left/right/up/down (mutation - perhaps just &#39;move&#39;)</li>
</ul>
<p>From what I understand of the docs, I could probably get a lot done by defining a rect as a record, and exposing these as methods on that record, this might make some of the code easier to follow.</p>
<p>I could also use a protocol to describe two things as being &#39;collideable&#39; (a suggestion from my tutor), which is the Clojure equivalent to an interface if I understand correctly.</p>
<h3>No code here</h3>
<p>I&#39;ll leave the implementation of this to the next post, as this is quite a lot of data to digest and I highly recommend reading the above docs if you&#39;re following along with my learning.</p>
]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---but-rob,-it-needs-to-be-more-composable.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---but-rob,-it-needs-to-be-more-composable.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 11 Jul 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Learn functional programming with me - functional difficulty levels]]></title><description><![CDATA[<p>It&#39;s time to accelerate my efforts in getting the space invaders game have some sort of end-to-end story. Part of this is having the space invaders dropping down and firing back at our hero.</p>
<ul>
<li><a href="/entries/learn-functional-programming-with-me---a-mission-statement.html">Mission statement</a></li>
<li><a href="/entries/learn-functional-programming-with-me---drawing-a-square.html">Drawing a square</a></li>
<li><a href="/entries/learn-functional-programming-with-me---moving-the-square.html">Moving the square</a></li>
<li><a href="/entries/learn-functional-programming-with-me---attributes-and-vectors.html">Attributes and vectors</a></li>
<li><a href="/entries/learn-functional-programming-with-me---improving-my-workflow.html">Improving my workflow</a></li>
<li><a href="/entries/learn-functional-programming-with-me---adding-lots-more-state.html">Creating lots of state</a></li>
<li><a href="/entries/learn-functional-programming-with-me---mutating-lots-of-state.html">Mutating lots of state</a></li>
<li><a href="/entries/learn-functional-programming-with-me---improving-our-data-structure-with-maps.html">Improving our data structure with maps</a></li>
<li><a href="/entries/learn-functional-programming-with-me---keyboard-input-for-our-red-square.html">Moving our red square with keyboard input</a></li>
<li><a href="/entries/learn-functional-programming-with-me---adding-items-to-a-sequence.html">Adding items to a sequence and firing bullets</a></li>
<li><a href="/entries/learn-functional-programming-with-me---refactoring-my-state-transitions.html">Refactoring my state transitions</a></li>
<li><a href="/learn-functional-programming-with-me---more-idiomatic-clojure.html">More idiomatic clojure</a></li>
<li><a href="/entries/learn-functional-programming-with-me---adding-collision-detection-to-the-game.html">Adding collision detection</a></li>
</ul>
<p><strong>I did a tidy up</strong></p>
<p>I got rid of my stupid nested structures, and put the data for bullets into the top-level map, instead of</p>
<pre><code>[<span class="symbol">:bullets</span> <span class="symbol">:active</span>]
[<span class="symbol">:bullets</span> <span class="symbol">:lastFiringTicks</span>]</code></pre>
<p>I now have</p>
<pre><code>[<span class="symbol">:bullets</span>]
[<span class="symbol">:last-firing-ticks</span>]</code></pre>
<p>It makes things much simpler, the code at the start of this entry can be found <a href="https://github.com/robashton/clojure-spaceinvaders/blob/085c0249e54c19d189dfba6e006205c90914fc56/game.cljs">here</a>.</p>
<p><strong>The space invaders need to invade some space</strong></p>
<p>When the invaders reach the end of the row, their direction changes - they also need to drop down by a certain amount of space and thus attack the earth.</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> update-direction [state]
  <span class="list">(<span class="title">let</span><span class="body"> [{<span class="keyword">:keys</span> [direction enemies]} state]
    <span class="list">(<span class="title">if</span><span class="body"> <span class="list">(<span class="title">=</span><span class="body"> direction <span class="number">1</span>)</span></span>
      <span class="list">(<span class="title">let</span><span class="body"> [right <span class="list">(<span class="title">apply</span><span class="body"> max <span class="list">(<span class="title">map</span><span class="body"> <span class="keyword">:x</span> enemies)</span></span>)</span></span>]
        <span class="list">(<span class="title">if</span><span class="body"><span class="list">(<span class="title">&gt;</span><span class="body"> right <span class="number">600</span>)</span></span> <span class="list">(<span class="title">assoc</span><span class="body"> state <span class="keyword">:direction</span> <span class="number">-1</span>)</span></span> state)</span></span>)</span></span>
      <span class="list">(<span class="title">let</span><span class="body"> [left <span class="list">(<span class="title">apply</span><span class="body"> min <span class="list">(<span class="title">map</span><span class="body"> <span class="keyword">:x</span> enemies)</span></span>)</span></span>]
        <span class="list">(<span class="title">if</span><span class="body"><span class="list">(<span class="title">&lt;</span><span class="body"> left <span class="number">0</span>)</span></span> <span class="list">(<span class="title">assoc</span><span class="body"> state <span class="keyword">:direction</span> <span class="number">1</span>)</span></span> state)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<p>I guess what I&#39;ll do here is break this up a bit (which I&#39;m okay with anyway because the above is quite hard to read)</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> rects-max-x [rects]
  <span class="list">(<span class="title">apply</span><span class="body"> max <span class="list">(<span class="title">map</span><span class="body"> <span class="keyword">:x</span> rects)</span></span>)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> rects-min-x [rects]
  <span class="list">(<span class="title">apply</span><span class="body"> min <span class="list">(<span class="title">map</span><span class="body"> <span class="keyword">:x</span> rects)</span></span>)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> enemies-reached-edge [enemies direction]
  <span class="list">(<span class="title">cond</span><span class="body"> <span class="list">(<span class="title">and</span><span class="body"> <span class="list">(<span class="title">=</span><span class="body"> direction <span class="number">1</span>)</span></span> <span class="list">(<span class="title">&gt;</span><span class="body"> <span class="list">(<span class="title">rects-max-x</span><span class="body"> enemies)</span></span> <span class="number">600</span>)</span></span>)</span></span> true
        <span class="list">(<span class="title">and</span><span class="body"> <span class="list">(<span class="title">=</span><span class="body"> direction <span class="number">-1</span>)</span></span> <span class="list">(<span class="title">&gt;</span><span class="body"> <span class="list">(<span class="title">rects-min-x</span><span class="body"> enemies)</span></span> <span class="number">0</span>)</span></span>)</span></span> true
        <span class="keyword">:else</span> false)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> invert-enemies-direction [state]
  <span class="list">(<span class="title">assoc</span><span class="body"> state <span class="keyword">:direction</span> <span class="list">(<span class="title">*</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:direction</span> state)</span></span> <span class="number">-1</span>)</span></span>)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> update-direction [state]
  <span class="list">(<span class="title">if</span><span class="body"> <span class="list">(<span class="title">enemies-reached-edge</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span> <span class="list">(<span class="body"><span class="keyword">:direction</span> state)</span></span>)</span></span>
    <span class="list">(<span class="title">invert-enemies-direction</span><span class="body"> state)</span></span> state)</span></span>)</span></span></code></pre>
<p>Now I&#39;ve done this, it should be fairly easy to update their y positions as part of that invert direction call.</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> invert-enemies-direction [state]
  <span class="list">(<span class="title">assoc</span><span class="body"> state 
         <span class="keyword">:direction</span> <span class="list">(<span class="title">*</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:direction</span> state)</span></span> <span class="number">-1</span>)</span></span>
         <span class="keyword">:enemies</span> <span class="list">(<span class="title">map</span><span class="body"> 
                    <span class="list">(<span class="title">fn</span><span class="body"> [enemy] <span class="list">(<span class="title">assoc</span><span class="body"> enemy <span class="keyword">:y</span> <span class="list">(<span class="title">+</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:y</span> enemy)</span></span> <span class="number">50</span>)</span></span>)</span></span>)</span></span>
                      <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<p>Fairly sure there are some tricks I&#39;m missing here for making that sort of thing prettier, but it does the job pretty well and my invaders come to say hello. </p>
<ul>
<li>Associate this expression with the enemies field in the map</li>
<li>The expression is a map of the current enemies field</li>
<li>The map associates a modified &#39;y&#39; with each enemy</li>
</ul>
<p><strong>Ending conditions</strong></p>
<p>Two basic conditions now present themselves for victory or defeat</p>
<ul>
<li>Enemies reach the bottom of the screen</li>
<li>Enemies are all destroyed</li>
</ul>
<p>Taking the easiest approach here, I&#39;ll just perform a page re-direct on failure, and start the next level on success.</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> update-state [state]
  <span class="list">(<span class="title">validate-end-conditions</span><span class="body">
    <span class="list">(<span class="title">update-bullets</span><span class="body">
      <span class="list">(<span class="title">update-player</span><span class="body">
        <span class="list">(<span class="title">update-enemies</span><span class="body">
          <span class="list">(<span class="title">update-direction</span><span class="body"> state)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<p>and</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> validate-end-conditions [state]
  <span class="list">(<span class="title">cond</span><span class="body"> <span class="list">(<span class="title">enemies-are-all-dead</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span>)</span></span> <span class="list">(<span class="title">start-next-level</span><span class="body">)</span></span>
        <span class="list">(<span class="title">enemies-are-at-the-gate</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span>)</span></span> <span class="list">(<span class="title">show-game-over</span><span class="body">)</span></span>
        <span class="keyword">:else</span> state)</span></span>)</span></span></code></pre>
<p>Now obviously <em>show-game-over</em> isn&#39;t going to actually return any state, but we&#39;ll be on a different page then so that&#39;s no big deal. <em>start-next-level</em> will have an opportunity to create completely new state for our next level so that works out nicely too.</p>
<p><strong>Game over dude</strong></p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> enemies-are-at-the-gate [enemies]
  <span class="list">(<span class="title">&gt;</span><span class="body"> <span class="list">(<span class="title">apply</span><span class="body"> max <span class="list">(<span class="title">map</span><span class="body"> <span class="keyword">:y</span> enemies)</span></span>)</span></span> <span class="number">400</span>)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> show-game-over []
  <span class="list">(<span class="title">set</span><span class="body">! <span class="list">(<span class="body">. js/document -location)</span></span> <span class="string">"gameover.html"</span>)</span></span>)</span></span></code></pre>
<p>This is another example of how delightfully terse Clojure can be at times :)</p>
<p><strong>The enemies are dead, long live the enemies</strong></p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> enemies-are-all-dead [enemies]
  <span class="list">(<span class="title">not</span><span class="body"> <span class="list">(<span class="title">first</span><span class="body"> enemies)</span></span>)</span></span>)</span></span></code></pre>
<p>Apparently nil and false in Clojure are our only falsy values, so the above will work (first returns nil if the sequence is empty).</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> start-next-level []
  <span class="list">(<span class="title">create-state</span><span class="body">)</span></span>)</span></span></code></pre>
<p>For now, let&#39;s just go with a re-start of the whole thing when we&#39;ve killed all the enemies so everything starts from the beginning once more.</p>
<p><strong>Difficulty levels</strong></p>
<p>Now we have game over and next level, let&#39;s look at next level and what it means.</p>
<p>Currently I have a few hard-coded values lying around</p>
<ul>
<li>How far do enemies drop down each pass</li>
<li>How fast do enemies move from left to right?</li>
<li>How frequently do our bullets fire?</li>
<li>How fast are our bullets?</li>
<li>How fast does our defender move?</li>
</ul>
<p>A lot of the time in my JS games, this is all modelled as state local to my entities and this is quite awkward. I can probably do better here.</p>
<p>The only piece of state I need for any of this is &quot;current level&quot;, so I&#39;mma go ahead and stick that around</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> create-state [level]
{ <span class="keyword">:direction</span> <span class="number">1</span>
 <span class="keyword">:level</span> level
 <span class="keyword">:enemies</span> <span class="list">(<span class="title">for</span><span class="body"> [x <span class="list">(<span class="title">range</span><span class="body"> <span class="number">0</span> <span class="number">480</span> <span class="number">60</span>)</span></span>
                y <span class="list">(<span class="title">range</span><span class="body"> <span class="number">0</span> <span class="number">240</span> <span class="number">60</span>)</span></span>]
            <span class="list">(<span class="title">create-rect</span><span class="body"> x y <span class="number">20</span> <span class="number">20</span>)</span></span>)</span></span>
 <span class="keyword">:player</span> <span class="list">(<span class="title">create-rect</span><span class="body"> <span class="number">200</span> <span class="number">430</span> <span class="number">20</span> <span class="number">20</span>)</span></span>
 <span class="keyword">:bullets</span> <span class="list">(<span class="body">)</span></span> 
 <span class="keyword">:last-firing-ticks</span> <span class="number">0</span>})</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> start-next-level [state]
  <span class="list">(<span class="title">create-state</span><span class="body"> <span class="list">(<span class="title">inc</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:level</span> state)</span></span>)</span></span>)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> ^<span class="keyword">:export</span> init []
  <span class="list">(<span class="title">hook-input-events</span><span class="body">)</span></span>
  <span class="list">(<span class="title">let</span><span class="body"> [ctx <span class="list">(<span class="title">context</span><span class="body"> <span class="number">640</span> <span class="number">480</span>)</span></span>] 
    <span class="list">(<span class="title">tick</span><span class="body"> ctx <span class="list">(<span class="title">create-state</span><span class="body"> <span class="number">1</span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<p>We&#39;ll start at level 1, and then when creating the new state for the new level, we&#39;ll pass in level+1.</p>
<p>Now then, how to use this for firing rate?</p>
<pre><code><span class="list">(<span class="title">if</span><span class="body"> <span class="list">(<span class="title">=</span><span class="body"> <span class="list">(<span class="title">rem</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:last-firing-ticks</span> state)</span></span> <span class="list">(<span class="title">firing-rate</span><span class="body"> state)</span></span>)</span></span> <span class="number">0</span>)</span></span></code></pre>
<p>and enemy movement</p>
<pre><code><span class="title">func</span> (if(= direction <span class="number">1</span>) <span class="comment">#(+ % (enemy-speed state)) #(- (enemy-speed state))</span></code></pre>
<p>and bullet speed</p>
<pre><code>(update-<span class="keyword">in</span> bullet [<span class="symbol">:y</span>] <span class="comment">#(- % (bullet-speed state))))))</span></code></pre>
<p>and for the player movement?</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> update-player [state]
  <span class="list">(<span class="title">let</span><span class="body"> [left <span class="list">(<span class="body">@key-states <span class="number">37</span>)</span></span>
        right <span class="list">(<span class="body">@key-states <span class="number">39</span>)</span></span>]
    <span class="list">(<span class="title">cond</span><span class="body"> <span class="list">(<span class="title">=</span><span class="body"> left true)</span></span> <span class="list">(<span class="title">update-in</span><span class="body"> state [<span class="keyword">:player</span> <span class="keyword">:x</span>] #<span class="list">(<span class="title">-</span><span class="body"> % <span class="list">(<span class="title">player-speed</span><span class="body"> state)</span></span>)</span></span>)</span></span>
          <span class="list">(<span class="title">=</span><span class="body"> right true)</span></span> <span class="list">(<span class="title">update-in</span><span class="body"> state [<span class="keyword">:player</span> <span class="keyword">:x</span>] #<span class="list">(<span class="title">+</span><span class="body"> % <span class="list">(<span class="title">player-speed</span><span class="body"> state)</span></span>)</span></span>)</span></span>
          <span class="keyword">:else</span> state)</span></span>)</span></span>)</span></span></code></pre>
<p>And the implementation (for now) </p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> firing-rate [state] <span class="list">(<span class="title">min</span><span class="body"> <span class="number">15</span> <span class="list">(<span class="title">-</span><span class="body"> <span class="number">30</span> <span class="list">(<span class="title">*</span><span class="body"> <span class="number">2</span> <span class="list">(<span class="body"><span class="keyword">:level</span> state)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>
<span class="list">(<span class="title">defn</span><span class="body"> enemy-speed [state] <span class="list">(<span class="body"><span class="keyword">:level</span> state)</span></span>)</span></span>
<span class="list">(<span class="title">defn</span><span class="body"> bullet-speed [state]<span class="list">(<span class="body"><span class="keyword">:level</span> state)</span></span>)</span></span>
<span class="list">(<span class="title">defn</span><span class="body"> player-speed [state] <span class="list">(<span class="title">*</span><span class="body"> <span class="number">2</span> <span class="list">(<span class="body"><span class="keyword">:level</span> state)</span></span>)</span></span>)</span></span>
<span class="list">(<span class="title">defn</span><span class="body"> enemy-descent-speed [state] <span class="number">25</span>)</span></span></code></pre>
<p>This is quite tidy and gives me the ability to adjust these values easily when experimenting with the game. </p>
<p>I&#39;m not so happy with passing the complete &#39;state&#39; into each of these methods, but pulling out the level at the point of invocation seems a greater evil in this case.</p>
<p>Next up, I&#39;ll look at scoring as a side effect of enemy destruction, and re-visit how I manage the logic and state around that.</p>
]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---functional-difficulty-levels.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---functional-difficulty-levels.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 09 Jul 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Working for free and what it taught me]]></title><description><![CDATA[<p>All the way back in November I <a href="/entries/i-am-not-looking-for-a-job.html">got fed up with the enterprise consulting lark</a> and because of that enterprise consulting lark I realised I had enough money to get by for a year without working quite easily.</p>
<p>  <img src="/img/israel.jpg" width="300px" class="inline-right"></p>
<p>Because I was so fed up, I decided I wanted to do something a bit different and because I like to meet new people and see new things, <a href="/entries/why-work-for-free.html">I offered up my time for free</a> providing my expenses were covered and I could therefore stretch a bit further.</p>
<p>In that time I worked for a number of companies across the globe, heading as far east as Israel and heading as far west as Hawaii (primarily for the surfing), and had my plans not been altered by <a href="/entries/im-leaving-.net.html">finding a start-up I believe in</a> I would have probably ended up doing some work in Hong Kong and Australia too.</p>
<p>That&#39;s all very well and good, but what did I learn (or get reminded of)? Hippy stuff coming up.</p>
<h1>Experience in Tool/Language X is a stupid thing to ask for</h1>
<p>  <img src="/img/eurovision.jpg" width="300px" class="inline-left"></p>
<p>In all but one of my little engagements, I was handed some work to do where I&#39;d had pretty much zero engagement with the technology involved. The hardest of these was probably <a href="/entries/ometa-odata-odear---polishing-it-off.html">OMeta</a> which I blogged about - I had less than two weeks on site and I was asked to write a new feature for a product in it.  No problem - hands up &quot;I&#39;m feeling stupid, please help me with this&quot; - two days later I was flying thanks to the help of my colleagues.</p>
<p>I feel pretty confident in saying that if you give any motivated/experienced software developer a challenge in something they have never used before, then they&#39;ll get on that stuff and make it happen providing they have some similar experience and you have an in-house knowledge pool for them to draw on.</p>
<h1>Take the bullshit away and let me get on with the job</h1>
<p>  <img src="/img/bridge.jpg" width="300px" class="inline-right"></p>
<p>Turning up to help @ayende do RavenDB was brilliant, <em>here is  the list of crap, have fun</em>. I set about that list like a maniac and got crap done fast. How? No meetings, no politics, no pressure. Even outside of work, Ayende had provided me with a car, apartment, GPS, fuel card etc so I didn&#39;t have to think about anything else other than what I needed/wanted to do. This was done on the basis that if I wasn&#39;t sure how to do a task I&#39;d stick my hand up and go &quot;Ahaahahaa&quot; (which happened more than once). </p>
<p>The enterprise world is so screwed in that regard, those weeks which were pretty much just 40 hour long meetings were 40 hours of wasted time.</p>
<h1>Failure setting us back? No - just keep rolling forward!</h1>
<p>I managed to roll a car over while I was in the Outer Hebrides, it was one of those &quot;everything happened at the same time to make this accident happen&quot; occurences, and it looked something like this!</p>
<p>  <img src="/img/car.jpg" width="300px" class="inline-left"></p>
<p>Whoops! Beyond the initial flailing around and shock, once I&#39;d gotten a lift back to civilisation with a passerby, I hung out with a cup of coffee and called the car hire company with the news that I&#39;d completely destroyed their vehicle.</p>
<p>Two hours later we&#39;d got it dragged up the hill, made sure no sheep were going to escape and I was back in Stornoway asking the immortal question:</p>
<p>  <div style="float: none; clear: both;"></div>
  <blockquote>Can I have a another car please?</blockquote></p>
<p>This I received, and I got on with my holiday. Because I was wearing my seatbelt, because I&#39;d paid for the extra insurance, because I was going slowly due to the adverse conditions the important stuff had been taken care of, the damage was limited and rather than stress over something I couldn&#39;t change I just <em>moved on</em>.</p>
<p>The same happened in Israel when I broke the car that Oren let me use, &quot;no problem, we can solve this problem by lending you my own one&quot;, let&#39;s not let things get in the way of having a good time folks. This attitude is what makes people like that able to get on and and <em>do</em>, because there is no fear of failure - just a focus on what to do next.</p>
<h1>Be one with the framework/team/system</h1>
<p>  <img src="/img/building.jpg"  width="300px" class="inline-right"></p>
<p>I&#39;m not the biggest fan of ASP.NET MVC, I&#39;m not the biggest fan of Rails (as you can see on Twitter no doubt!), I don&#39;t really like Backbone or Angular or any JS frameworks for that matter, I prefer to do my development vanilla for a plethora of good reasons.</p>
<p>A lot of teams don&#39;t feel that way, and as an external body I don&#39;t have a say in this matter, <em>&quot;Oh you&#39;re using RequireJS? <a href="/entries/why-i-stopped-using-amd.html">BULLSHEEEEEEEEEEIT</a>&quot;</em>. It turns out if you leave your opinions at the door and just get on with crap, do things in a way that&#39;s idiomatic for that environment and keep asking &quot;What&#39;s the best way to do this&quot;, then you can get stuff done quick.</p>
<p>You&#39;ll still run into those edge cases that you get with frameworks (If you go vanilla, you don&#39;t have edge cases, you just have features), but these can be glossed over if you have control over the feature-set and then you will deliver. <a href="/entries/this-week,-lets-create-a-start-up---day-5.html">Start-up in a week</a>? NO PROBLEM SIR.</p>
<p>As a bonus, bitching about all the crazy decisions made in that framework is fun on Twitter so it&#39;s nice to get the opportunity to do so...</p>
<h1>I don&#39;t need any of that crap</h1>
<p>I lived out of a suitcase for this time and had to ruthlessly discard things that took up needless space. I had a trial run for the first few weeks where I tried to lug my Moka pot and coffee grinder around with me but sadly had to replace that with the spare laptop for doing .NET work.</p>
<p>What did I end up with after a few iterations of discard and re-pack?</p>
<ul>
<li>A week&#39;s worth of clothing</li>
<li>A MBA running Debian for doing most things</li>
<li>A heavy duty windows laptop for running Visual Studio</li>
<li>An iPad for reading on/watching porn</li>
<li>Toothbrush/paste, shampoo, conditioner and product (I have long hair!)</li>
<li>iPhone + Headphones for communication and music</li>
</ul>
<p>So successful has this activity been, that even though I&#39;ve now been in my new job in London for two months and I&#39;m still living out of this suitcase in managed apartments, hostels and friends&#39; sofas not worrying about it too much. The important thing is to find a launderette that&#39;ll do all your clothes for a modest fee!</p>
<p>Okay, it&#39;s hardly a complete stripping down of &quot;material goods&quot;, and I&#39;m still lugging around several thousand pounds worth of Apple gear, but it&#39;s nice to know that I can pack up and quit what I&#39;m doing anytime I like and just skip country <em>like that</em>, with no baggage (literally).</p>
<h1>Money isn&#39;t important</h1>
<p>I was offered pay for a number of roles while I was doing this, and turned it all down because I felt it would sully what I was trying to do. Also - I felt it would muck up the balance where the people I was working for <em>really</em> wanted me to be happy because it was all they were giving me. </p>
<p>Money to employers is an easy way to motivate employees and has been proven not to work, take it out of the equation and they have to work a lot harder - worth thinking about.</p>
<h1>Happiness is so freakin&#39; important</h1>
<p>So I&#39;ve said in this <a href="http://tekpub.com/products/change-it-up">Tekpub video that I helped make</a>, I didn&#39;t realise how miserable I was until I went and did this. Spending half a year in a state of bliss would be hard to describe to the person that was slaving away in the enterprise a year ago.</p>
<p>  <img src="/img/waves.jpg" width="300px" class="inline-right"></p>
<p>Seriously though, the enterprise world was killing me, and for what? Filling my bank account with money that I didn&#39;t need (I don&#39;t have any dependents). It didn&#39;t feel like that at the time of course but I&#39;m so much happier with less because I&#39;m <em>doing more with it</em></p>
<p>If your job isn&#39;t something you look forward to each day, OMG CHANGE IT and don&#39;t mope about how you can&#39;t change it because OMG YOU CAN. (Footnote: It&#39;s unlikely you&#39;ll be able to change the culture of a company that&#39;s gone bad if you can&#39;t simply fire all the dead weight, and you&#39;ll just get frustrated trying so don&#39;t bother).</p>
<h1>I&#39;m responsible for my own happiness</h1>
<p>I know what I want now, and I know when I know what I want and I&#39;m not afraid to say it. In a way, I&#39;m now a dangerous person to hire because unless your environment is one I enjoy I&#39;m not going to stick around for longer than a few months, no matter what the reward is. The same goes for my personal relationships with other people and personal life in general, being happy is too important to compromise for other things and I&#39;m responsible for making that happen.</p>
<p>Quitting and doing this has showed me that there are people out there that <em>are</em> happy, and has given me the motivation to find out how I can do that and make a living at the same time.</p>
<h1>People are generally okay</h1>
<p>  <img src="/img/rainbow.jpg" width="300px" class="inline-left"></p>
<p>To all the people who stopped their car to see if I was okay when I&#39;d crashed mine, to the lady who gave me a lift to the nearest town and gave me money for a bacon sandwich, to the multitude of people who offered me lifts when I was walking around in Hawaii or got me home from the bar, to everybody who gave me directions when they saw me ambling through the greek countryside, to the Israeli security who called her colleagues over to have a good laugh after asking why I had the Azerbaijan visa stamp in my passport, to the parents of the boss I&#39;d never met who let a stranger stay at their house for 2 weeks, to everybody who has offered me money to do interesting things, to the people that I let down but didn&#39;t moan about it and to all those people that I&#39;ve been drinking with over the past year - it has been a laugh and nobody has tried to do me over. You&#39;re all okay.</p>
]]></description><link>http://codeofrob.com/entries/working-for-free-and-what-it-taught-me.html</link><guid isPermaLink="true">http://codeofrob.com/entries/working-for-free-and-what-it-taught-me.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 04 Jul 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Learn functional programming with me - adding collision detection to the game]]></title><description><![CDATA[<p>Can&#39;t have a game without collision detection now can we? Let&#39;s see about getting our bullets to collide with the enemies and see what problems get in my way this time...</p>
<ul>
<li><a href="/entries/learn-functional-programming-with-me---a-mission-statement.html">Mission statement</a></li>
<li><a href="/entries/learn-functional-programming-with-me---drawing-a-square.html">Drawing a square</a></li>
<li><a href="/entries/learn-functional-programming-with-me---moving-the-square.html">Moving the square</a></li>
<li><a href="/entries/learn-functional-programming-with-me---attributes-and-vectors.html">Attributes and vectors</a></li>
<li><a href="/entries/learn-functional-programming-with-me---improving-my-workflow.html">Improving my workflow</a></li>
<li><a href="/entries/learn-functional-programming-with-me---adding-lots-more-state.html">Creating lots of state</a></li>
<li><a href="/entries/learn-functional-programming-with-me---mutating-lots-of-state.html">Mutating lots of state</a></li>
<li><a href="/entries/learn-functional-programming-with-me---improving-our-data-structure-with-maps.html">Improving our data structure with maps</a></li>
<li><a href="/entries/learn-functional-programming-with-me---keyboard-input-for-our-red-square.html">Moving our red square with keyboard input</a></li>
<li><a href="/entries/learn-functional-programming-with-me---adding-items-to-a-sequence.html">Adding items to a sequence and firing bullets</a></li>
<li><a href="/entries/learn-functional-programming-with-me---refactoring-my-state-transitions.html">Refactoring my state transitions</a></li>
<li><a href="/learn-functional-programming-with-me---more-idiomatic-clojure.html">More idiomatic clojure</a></li>
</ul>
<p><strong>The collision detection itself</strong></p>
<p>Well, collision is a nice easy pure function to write and because I have my rect primitive I can pretty use these.</p>
<p>My first stab looks like this</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> collides-with [one two]
  <span class="list">(<span class="title">let</span><span class="body"> [one-left <span class="list">(<span class="body"><span class="keyword">:x</span> one)</span></span>
        one-right <span class="list">(<span class="title">+</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:x</span> one)</span></span> <span class="list">(<span class="body"><span class="keyword">:w</span> one)</span></span>)</span></span>
        one-top <span class="list">(<span class="body"><span class="keyword">:y</span> one)</span></span>
        one-bottom <span class="list">(<span class="title">+</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:y</span> one)</span></span> <span class="list">(<span class="body"><span class="keyword">:h</span> one)</span></span>)</span></span>
        two-left <span class="list">(<span class="body"><span class="keyword">:x</span> two)</span></span>
        two-right <span class="list">(<span class="title">+</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:x</span> two)</span></span> <span class="list">(<span class="body"><span class="keyword">:w</span> two)</span></span>)</span></span>
        two-top <span class="list">(<span class="body"><span class="keyword">:y</span> two)</span></span>
        two-bottom <span class="list">(<span class="title">+</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:y</span> two)</span></span> <span class="list">(<span class="body"><span class="keyword">:h</span> two)</span></span>)</span></span>]
    <span class="list">(<span class="title">cond</span><span class="body"> <span class="list">(<span class="title">&lt;</span><span class="body"> one-right two-left)</span></span> false
          <span class="list">(<span class="title">&gt;</span><span class="body"> one-left two-right)</span></span> false
          <span class="list">(<span class="title">&lt;</span><span class="body"> one-bottom two-top)</span></span> false
          <span class="list">(<span class="title">&gt;</span><span class="body"> one-top two-bottom)</span></span> false
          <span class="keyword">:else</span> true)</span></span>)</span></span>)</span></span></code></pre>
<p>I kinda feel as if this is over-doing the point a little though, and those extra variables I&#39;ve gone and made could probably just be represented by functions.</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> rect-right [rect] <span class="list">(<span class="title">+</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:x</span> rect)</span></span> <span class="list">(<span class="body"><span class="keyword">:w</span> rect)</span></span>)</span></span>)</span></span>
<span class="list">(<span class="title">defn</span><span class="body"> rect-bottom [rect] <span class="list">(<span class="title">+</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:y</span> rect)</span></span> <span class="list">(<span class="body"><span class="keyword">:h</span> rect)</span></span>)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> collides-with [one two]
    <span class="list">(<span class="title">cond</span><span class="body"> <span class="list">(<span class="title">&lt;</span><span class="body"> <span class="list">(<span class="title">rect-right</span><span class="body"> one)</span></span> <span class="list">(<span class="body"><span class="keyword">:x</span> two)</span></span>)</span></span> false
          <span class="list">(<span class="title">&gt;</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:x</span> one)</span></span> <span class="list">(<span class="title">rect-right</span><span class="body"> two)</span></span>)</span></span> false
          <span class="list">(<span class="title">&lt;</span><span class="body"> <span class="list">(<span class="title">rect-bottom</span><span class="body"> one)</span></span> <span class="list">(<span class="body"><span class="keyword">:y</span> two)</span></span>)</span></span> false
          <span class="list">(<span class="title">&gt;</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:y</span> one)</span></span> <span class="list">(<span class="title">rect-bottom</span><span class="body"> two)</span></span>)</span></span> false
          <span class="keyword">:else</span> true)</span></span>)</span></span></code></pre>
<p>It&#39;s a small change, but if I want to use these concepts elsewhere then I&#39;ll be able to far easier and this is far easier on the eyes.</p>
<p><strong>Using the collision detection</strong></p>
<p>Okay so I&#39;m being quite lazy here, the efficient way to do collision detection across a scene is to use a linear hashmap and only test rects in adjacent cells. I only have a few space invaders though so I&#39;ll take the hit of a more brute force solution (although I think this would be quite fun to implement in a functional manner so I&#39;ll come back to it)</p>
<p>So, obviously I need to adjust my sequences based on whether bullets are intersecting with aliens.</p>
<p>This is probably the complicated bit, and I&#39;ll start off being really lazy about how I evaluate this.</p>
<ul>
<li>We need to remove bullets from the collection if they&#39;re intersecting</li>
<li>We need to remove aliens from the collection if they&#39;re intersecting</li>
<li><em>in the future we&#39;d need to increase points</em></li>
<li><em>in the future we&#39;d need to show some animation</em></li>
</ul>
<p>I&#39;m getting the feeling that doing all of this with my ball of state is going to get un-wieldy and I might want to look into something more functional <a href="http://prog21.dadgum.com/23.html">like in this series</a>.</p>
<p>Nevertheless, I&#39;ll press forwards with my current solution because I want something that works.</p>
<p><strong>My first attempt</strong></p>
<p>My first attempt was a failure, I thought it&#39;d be simple to just loop through several times and do something like</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> bullet-collides-with-enemy [bullet state]
  <span class="list">(<span class="title">not</span><span class="body"> <span class="list">(<span class="title">not-any</span><span class="body">? 
     <span class="list">(<span class="title">fn</span><span class="body"> [enemy] <span class="list">(<span class="title">collides-with</span><span class="body"> enemy bullet)</span></span>)</span></span> 
     <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span>)</span></span>)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> enemy-collides-with-bullet [enemy state]
  <span class="list">(<span class="title">not</span><span class="body"> <span class="list">(<span class="title">not-any</span><span class="body">? 
     <span class="list">(<span class="title">fn</span><span class="body"> [bullet] <span class="list">(<span class="title">collides-with</span><span class="body"> bullet enemy)</span></span>)</span></span> 
     <span class="list">(<span class="title">get-in</span><span class="body"> [<span class="keyword">:bullets</span> <span class="keyword">:active</span>] state)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<p>And filter out enemies/bullets in the seq for these things, this is an awful idea because of multiple iterations it&#39;s also an awful idea because written in this way it&#39;s hard to follow.</p>
<p><strong>Second attempt</strong></p>
<p>A better idea would be to iterate once, ask for all the colliisons that have taken place and then use this information to create a new version of the state without the affected enemies/bullets in it.</p>
<p>This moves me closer in the direction described by the article I linked above so I&#39;ll give it a go.</p>
<p>I can write a function that does this and returns a list of the collisions.</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> get-bullet-enemy-collisions [state]
  <span class="list">(<span class="title">for</span><span class="body"> [bullet <span class="list">(<span class="title">active-bullets</span><span class="body"> state)</span></span>]
    { <span class="keyword">:bullet</span> bullet
      <span class="keyword">:alien</span> <span class="list">(<span class="title">first</span><span class="body"> <span class="list">(<span class="title">enemies-colliding-with-bullet</span><span class="body"> bullet state)</span></span>)</span></span>})</span></span>)</span></span></code></pre>
<p>But this won&#39;t actually be effective I don&#39;t think, because I&#39;m returning a map of maps which would need comparing against the other maps in order to remove them from the collection they&#39;re in.</p>
<p>By-reference comparison won&#39;t work, maps are (as I understand it) compared by value - and while this would work it&#39;s not &quot;correct&quot;. Identity is what we want to compare against here and our bullets and aliens don&#39;t have identies.</p>
<p><strong>Third attempt</strong></p>
<p>I&#39;ve found <a href="http://clojuredocs.org/clojure_core/clojure.core/map-indexed">map-indexed</a> and <a href="http://clojuredocs.org/clojure_core/clojure.core/keep-indexed">keep-indexed</a>, which will allow me to do pretty much the same as above but return a list of indexes into the collections which represent collisions.</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> get-bullet-enemy-collisions [state]
  <span class="list">(<span class="title">keep-indexed</span><span class="body"> #<span class="list">(<span class="body">{ <span class="keyword">:bullet</span> %<span class="number">1</span>
                    <span class="keyword">:alien</span> <span class="list">(<span class="title">first</span><span class="body"> <span class="list">(<span class="title">enemies-colliding-with-bullet</span><span class="body"> bullet state)</span></span>)</span></span>})</span></span>
                <span class="list">(<span class="title">active-bullets</span><span class="body"> state)</span></span>)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> enemies-colliding-with-bullet [bullet state]
  <span class="list">(<span class="title">keep-indexed</span><span class="body"> #<span class="list">(<span class="title">if</span><span class="body"> <span class="list">(<span class="title">collides-with</span><span class="body"> %<span class="number">2</span> bullet)</span></span> %<span class="number">1</span>)</span></span> <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span>)</span></span>)</span></span></code></pre>
<p>I&#39;ve also discovered that little # symbol, which appears to be shorthand for an anonymous function with a 1-indexed list of arguments.</p>
<p>Anyway, now I have a list of collisions that have taken place in my game world, I can filter out the items I don&#39;t want any more.</p>
<p>I couldn&#39;t figure out an easy way of using this data though, so back to</p>
<p><strong>Option one again</strong></p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> collide-bullets [state]
  <span class="list">(<span class="title">assoc</span><span class="body"> 
    <span class="list">(<span class="title">assoc-in</span><span class="body"> state [<span class="keyword">:bullets</span> <span class="keyword">:active</span>]
      <span class="list">(<span class="title">remove</span><span class="body"> #<span class="list">(<span class="title">collides-with-any</span><span class="body"> % <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span>)</span></span> <span class="list">(<span class="title">active-bullets</span><span class="body"> state)</span></span>)</span></span>)</span></span>
    <span class="keyword">:enemies</span>
      <span class="list">(<span class="title">remove</span><span class="body"> #<span class="list">(<span class="title">collides-with-any</span><span class="body"> % <span class="list">(<span class="title">active-bullets</span><span class="body"> state)</span></span>)</span></span> <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span>)</span></span>)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> collides-with-any [one, others]
  <span class="list">(<span class="title">some</span><span class="body"> #<span class="list">(<span class="title">collides-with</span><span class="body"> % one)</span></span> others)</span></span>)</span></span></code></pre>
<p>Iterate through the list twice and just remove any affected entities.</p>
<p>Note I can use the old verson of the state when doing my <em>collides-with-any</em> calls, and stick the results into multiple calls on top of the new state. This is much easier to understand than my first attempt however so at least doesn&#39;t have the pitfall of being completely opaque.</p>
<p>I&#39;m still really not liking this solution as it involves multiple iterations of the two collections:</p>
<ul>
<li>Compare each bullet against all the enemies</li>
<li>Compare each enemy against all the bullets</li>
</ul>
<p>I&#39;ll come back to this no doubt when it comes to adding scoring, explosions and sound, because I&#39;m going to need to execute a lot more logic based on these collisions.</p>
<p>I&#39;m going to press on and add some more gameplay though, as once I have an end-to-end game I&#39;ll hopefully have gained more understanding and be able to reason about all of this better.</p>
]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---adding-collision-detection-to-the-game.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---adding-collision-detection-to-the-game.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 02 Jul 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Change it Up - A Tekpub thing]]></title><description><![CDATA[<p>Just a small thing and a moderately embarassing one at that.</p>
<p>While I was in Hawaii towards the <a href="/entries/i-am-interested-in-talking-about-work.html">end of my travels</a> this year, I got coralled into doing an interview about <a href="/entries/i-am-not-looking-for-a-job.html">why I did what I did</a> and what prompted me to take action about &quot;changing things up&quot;.</p>
<p>If you know me personally, then there is probably not anything too new in this video, but if you&#39;re interested in the thought process behind &quot;getting out of that rut&quot; and you&#39;re considering doing something about it yourself, I&#39;ve been told that this video will help :)</p>
<p>You can find it at Tekpub over at <a href="http://tekpub.com/products/change-it-up"><a href="http://tekpub.com/products/change-it-up">http://tekpub.com/products/change-it-up</a></a>. If you haven&#39;t got a subscription then you should just go and get one, as Tekpub is pretty rad.</p>
]]></description><link>http://codeofrob.com/entries/change-it-up---a-tekpub-thing.html</link><guid isPermaLink="true">http://codeofrob.com/entries/change-it-up---a-tekpub-thing.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 28 Jun 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Learn functional programming with me - more idiomatic Clojure]]></title><description><![CDATA[<p>I went through my code in the last entry and did a bit of re-factoring in an effort to get my state under control, I&#39;ve also had some feedback that some of my Clojure could be a bit more idiomatic so let&#39;s sort that out.</p>
<ul>
<li><a href="/entries/learn-functional-programming-with-me---a-mission-statement.html">Mission statement</a></li>
<li><a href="/entries/learn-functional-programming-with-me---drawing-a-square.html">Drawing a square</a></li>
<li><a href="/entries/learn-functional-programming-with-me---moving-the-square.html">Moving the square</a></li>
<li><a href="/entries/learn-functional-programming-with-me---attributes-and-vectors.html">Attributes and vectors</a></li>
<li><a href="/entries/learn-functional-programming-with-me---improving-my-workflow.html">Improving my workflow</a></li>
<li><a href="/entries/learn-functional-programming-with-me---adding-lots-more-state.html">Creating lots of state</a></li>
<li><a href="/entries/learn-functional-programming-with-me---mutating-lots-of-state.html">Mutating lots of state</a></li>
<li><a href="/entries/learn-functional-programming-with-me---improving-our-data-structure-with-maps.html">Improving our data structure with maps</a></li>
<li><a href="/entries/learn-functional-programming-with-me---keyboard-input-for-our-red-square.html">Moving our red square with keyboard input</a></li>
<li><a href="/entries/learn-functional-programming-with-me---adding-items-to-a-sequence.html">Adding items to a sequence and firing bullets</a></li>
<li><a href="/entries/learn-functional-programming-with-me---refactoring-my-state-transitions.html">Refactoring my state transitions</a></li>
</ul>
<p><strong>assoc-in vs update-in</strong></p>
<p>Here is some code I wrote</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> enemiesLogic [state]
  <span class="list">(<span class="title">let</span><span class="body"> [direction <span class="list">(<span class="body"><span class="keyword">:direction</span> state)</span></span>
        enemies <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span>
        func <span class="list">(<span class="title">if</span><span class="body"><span class="list">(<span class="title">=</span><span class="body"> direction <span class="number">1</span>)</span></span> inc dec)</span></span>
       ]
    <span class="list">(<span class="title">assoc</span><span class="body"> state <span class="keyword">:enemies</span>
      <span class="list">(<span class="title">for</span><span class="body"> [enemy enemies]
        <span class="list">(<span class="title">assoc</span><span class="body"> enemy <span class="keyword">:x</span> <span class="list">(<span class="title">func</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:x</span> enemy)</span></span>)</span></span>)</span></span>
      )</span></span>
    )</span></span>
  )</span></span>
)</span></span></code></pre>
<p>What I&#39;m essentially doing is </p>
<ul>
<li>Selecting a function to apply based on the direction</li>
<li>Creating a new enemies collection where that function has been applied to each enemy</li>
</ul>
<p>Well, why bother with this? We can do</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> enemiesLogic [state]
  <span class="list">(<span class="title">let</span><span class="body"> [direction <span class="list">(<span class="body"><span class="keyword">:direction</span> state)</span></span>
        enemies <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span>
        func <span class="list">(<span class="title">if</span><span class="body"><span class="list">(<span class="title">=</span><span class="body"> direction <span class="number">1</span>)</span></span> inc dec)</span></span>
       ]
    <span class="list">(<span class="title">assoc</span><span class="body"> state <span class="keyword">:enemies</span>
      <span class="list">(<span class="title">for</span><span class="body"> [enemy enemies]
        <span class="list">(<span class="title">update-in</span><span class="body"> enemy [<span class="keyword">:x</span>] func)</span></span>
      )</span></span>
    )</span></span>
  )</span></span>
)</span></span></code></pre>
<p>update-in takes in a func to enact on the value, rather than the new value and saves us precious reading time. Thinking about it, we can actually save some effort here too.</p>
<p>This makes a big difference in cases where I&#39;ve been lazy and done this</p>
<pre><code><span class="list">(<span class="title">assoc</span><span class="body"> bullet <span class="keyword">:y</span> <span class="list">(<span class="title">dec</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:y</span> bullet)</span></span>)</span></span>)</span></span></code></pre>
<p>Looks better like</p>
<pre><code><span class="list">(<span class="title">update-in</span><span class="body"> bullet [<span class="keyword">:y</span>] dec)</span></span></code></pre>
<p>Passing around functions seems pretty functional.</p>
<p><strong>State doesn&#39;t define an object</strong></p>
<p>Why do I have this?</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> initEnemy [x y w h]
 {
  <span class="keyword">:x</span> <span class="list">(<span class="title">*</span><span class="body"> x <span class="number">30</span>)</span></span>
  <span class="keyword">:y</span> <span class="list">(<span class="title">*</span><span class="body"> y <span class="number">30</span>)</span></span>
  <span class="keyword">:w</span> w
  <span class="keyword">:h</span> h
 }
)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> initPlayer [x y w h]
 {
  <span class="keyword">:x</span> x
  <span class="keyword">:y</span> y
  <span class="keyword">:w</span> w
  <span class="keyword">:h</span> h
 }
)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> initBullet [x y w h]
 {
  <span class="keyword">:x</span> x
  <span class="keyword">:y</span> y
  <span class="keyword">:w</span> w
  <span class="keyword">:h</span> h
 }
)</span></span></code></pre>
<p>Seems to me that everything in my game is a rect, and what changes between these everything is the behaviour that is performed over that state.</p>
<p>So, death to these things and in with</p>
<pre><code><span class="list">(<span class="title"><span class="built_in">defn</span></span> initRect <span class="collection">[x y w h]</span>
 <span class="collection">{
  <span class="attribute">:x</span> x
  <span class="attribute">:y</span> y
  <span class="attribute">:w</span> w
  <span class="attribute">:h</span> h
 }</span>
)</span></code></pre>
<p>Actually, I&#39;m pulling this structure apart in a number of places, such as my drawing functions</p>
<pre><code><span class="list">(<span class="title">let</span><span class="body"> [{<span class="keyword">:keys</span> [x y w h]} bullet]
  <span class="list">(<span class="title">drawSquare</span><span class="body"> ctx x y w h <span class="string">"#000"</span>)</span></span>
)</span></span></code></pre>
<p>A solution to this would be to make drawSquare take in this map and de-construct it there. I&#39;ve established that this is a primitive I want in my application and I&#39;ll use it as such.</p>
<p>I could further solidify this by turning it into a Record but I&#39;m not yet feeling any pain from not having it as one so I won&#39;t bother..</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> drawSquare [[ctx width height] rect c]
  <span class="list">(<span class="title">set</span><span class="body">! <span class="list">(<span class="body">. ctx -fillStyle)</span></span> c)</span></span>
  <span class="list">(<span class="title">let</span><span class="body"> [{<span class="keyword">:keys</span> [x y w h]} rect]
    <span class="list">(<span class="body">.fillRect ctx x y w h)</span></span> 
  )</span></span>
)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> enemiesRender [ctx state]
  <span class="list">(<span class="title">let</span><span class="body"> [enemies <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span>]
    <span class="list">(<span class="title">doseq</span><span class="body"> [enemy enemies] 
      <span class="list">(<span class="title">drawSquare</span><span class="body"> ctx enemy <span class="string">"#FF0"</span>)</span></span>
    )</span></span>
  )</span></span>
)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> bulletsRender [ctx state]
  <span class="list">(<span class="title">doseq</span><span class="body"> [bullet <span class="list">(<span class="body"><span class="keyword">:active</span> <span class="list">(<span class="body"><span class="keyword">:bullets</span> state)</span></span>)</span></span>] 
    <span class="list">(<span class="title">drawSquare</span><span class="body"> ctx bullet <span class="string">"#000"</span>)</span></span>
  )</span></span>
)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> playerRender [ctx state]
  <span class="list">(<span class="title">let</span><span class="body"> [player <span class="list">(<span class="body"><span class="keyword">:player</span> state)</span></span>]
    <span class="list">(<span class="title">drawSquare</span><span class="body"> ctx player <span class="string">"#F00"</span>)</span></span>
  )</span></span>
)</span></span></code></pre>
<p>In other thoughts, these functions are all the same apart from the colour of the rect, it seems a bit daft to me, how about</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> renderRects [ctx rects colour]
  <span class="list">(<span class="title">doseq</span><span class="body"> [rect rects] 
    <span class="list">(<span class="title">drawSquare</span><span class="body"> ctx enemy colour)</span></span>
  )</span></span>
)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> enemiesRender [ctx state]
  <span class="list">(<span class="title">renderRects</span><span class="body"> ctx <span class="list">(<span class="body"><span class="keyword">:enemies</span> state)</span></span> <span class="string">"#FF0"</span>)</span></span>
)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> bulletsRender [ctx state]
  <span class="list">(<span class="title">renderRects</span><span class="body"> ctx <span class="list">(<span class="title">get-in</span><span class="body"> state [<span class="keyword">:bullets</span> <span class="keyword">:active</span>])</span></span> <span class="string">"#000"</span>)</span></span>
)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> playerRender [ctx state]
  <span class="list">(<span class="title">drawSquare</span><span class="body"> ctx <span class="list">(<span class="body"><span class="keyword">:player</span> state)</span></span> <span class="string">"#F00"</span>)</span></span>
)</span></span></code></pre>
<p>Keeping the number of data structures to a minimum and re-using tiny little functions seems to be a thing in these parts.</p>
<p><strong>Naming clojure constructs</strong></p>
<p>I&#39;ve been a naughy boy and stuck to my JavaScript ways of doing things with the camelCase all up in the show.</p>
<p>Turns out that Clojure fiends prefer hyphenation-on-their-names and I can kinda get behind that.</p>
<p>I&#39;ll also take the opportunity to formally start using &#39;rect&#39; everywhere instead a combination of  &#39;square&#39; and &#39;rect&#39; etc, and do a general tidy up of names.</p>
<p>I&#39;ll not show them all, but in essence </p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> bulletsRender [ctx state]
  <span class="list">(<span class="title">renderRects</span><span class="body"> ctx <span class="list">(<span class="title">get-in</span><span class="body"> state [<span class="keyword">:bullets</span> <span class="keyword">:active</span>])</span></span> <span class="string">"#000"</span>)</span></span>
)</span></span></code></pre>
<p>Will become</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> render-bullets [ctx state]
  <span class="list">(<span class="title">render-rects</span><span class="body"> ctx <span class="list">(<span class="title">get-in</span><span class="body"> state [<span class="keyword">:bullets</span> <span class="keyword">:active</span>])</span></span> <span class="string">"#000"</span>)</span></span>
)</span></span></code></pre>
<p>And so on (so don&#39;t get confused in latter entries where the names of things have changed!)</p>
<p>The only downside to this arrangement is ctrl-p is now broken in vim for method names, this is a chance for the Emacs people to point and laugh at me.</p>
<p><strong>Parenthesis white space</strong></p>
<p>I&#39;m getting little value from new-lining my parentheses.</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> update-state [state]
  <span class="list">(<span class="title">update-bullets</span><span class="body">
    <span class="list">(<span class="title">update-player</span><span class="body">
      <span class="list">(<span class="title">update-enemies</span><span class="body">
        <span class="list">(<span class="title">update-direction</span><span class="body"> state)</span></span>
      )</span></span>
    )</span></span>
  )</span></span>
)</span></span></code></pre>
<p>When re-factoring or moving code around, I&#39;m using the vim shortcuts </p>
<ul>
<li>vi(</li>
<li>va(</li>
<li>ci(</li>
<li>ca(</li>
</ul>
<p>And so on, and actually it would be easier if I could just use left and right to move to the brace I want to grab the contents of.</p>
<p>So, I&#39;m going to sort that out too and go with</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> update-state [state]
  <span class="list">(<span class="title">update-bullets</span><span class="body">
    <span class="list">(<span class="title">update-player</span><span class="body">
      <span class="list">(<span class="title">update-enemies</span><span class="body">
        <span class="list">(<span class="title">update-direction</span><span class="body"> state)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<p>Gasp. Radical. This will reduce my vertical space usage and allow me to see more context on my screen (I&#39;m a k+r person in C#/JS etc so I&#39;m totally up in this way of doing things)</p>
<p>The fully tidied up source code can be found at <a href="https://github.com/robashton/clojure-spaceinvaders/blob/d7df1f4671ffe86dd2391d368e7b0169ab263fae/game.cljs">this snapshot on Github</a> if you want to catch up with where I am so far.</p>
<p>With this, I can go and look at collision detection!</p>
]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---more-idiomatic-clojure.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---more-idiomatic-clojure.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 27 Jun 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Ruby on Rails and the Phantom Menace]]></title><description><![CDATA[<p>Remember when Star Wars came out? No - me neither, it was before my time but I watched it on the TV as I grew up never really knowing what a big deal it was to some people or why.</p>
<p>Then George Lucas announced he was going to make NEW STAR WARS, and everybody got excited - including people who hadn&#39;t really been <em>that</em> into it to begin with. We traipsed down to the cinema in droves to find out that in place of the epic star wars action we expected, we got Jar Jar Binks.</p>
<p><em>That&#39;s how I feel now</em></p>
<p>I&#39;ve been on that .NET platform thing for a while now, although I&#39;ve been writing JS for a long time and my heart has never really left the world of C and C++ I can definitely be considered as one of those people who cast an eye on the promised land of Ruby on Rails acknowledging that it was apparently very good but things were fine without it thankyou very much.</p>
<p>Only now I&#39;m doing Ruby on Rails, and I&#39;ve missed the first few iterations and the software I&#39;ve found myself using is the programming equivalant of Jar Jar sodding binks.</p>
<p><em>TLDR</em></p>
<p>This was going to be a rant, but I got distracted by building stuff and never finished the entry. Oh well - I kinda like it like this.</p>
]]></description><link>http://codeofrob.com/entries/ruby-on-rails-and-the-phantom-menace.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ruby-on-rails-and-the-phantom-menace.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 25 Jun 2013 09:30:00 GMT</pubDate></item></channel></rss>