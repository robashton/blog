<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><generator>NodeJS RSS Module</generator><lastBuildDate>Fri, 03 Feb 2012 19:26:29 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><item><title><![CDATA[Your container is not wanted here]]></title><description><![CDATA[<p>Finding myself embroiled in yet another debate about IOC containers on Twitter I've decided to place my current thoughts here for posterity.</p>

<p><em>I don't really like using IOC containers</em></p>

<p>There, I said it. I really don't. I used to, I did - I thought they were an excellent way to manage those dependencies, to push the effort of lifetime and scope management into something that would automatically handle those things for me so I wouldn't have to think about them.</p>

<p>I thought they were an excellent way to bootstrap of my entire application from a single place, and have all the interfaces matched with their single implementations and pushed into the relevant consumers without having to think about it.</p>

<p>But you know what? Having your entire application sucked out of a black box and then writing rules for the exceptions to those wonderful conventions and then writing new conventions and interceptors and using all the "wonderful features" of the modern IOC container started to lead to developers spending more time debugging mysterious container issues and fighting odd/conflicting lifetime issues than writing code of real value.</p>

<p>Oh, you could easily dismiss this with "Oh, Rob doesn't know how to use a container properly", but you'd be missing the point, because even if I didn't (<em>and I do by the way</em>), it's irrelevant whether I do or not.</p>

<p><em>Missing the point</em>? Missing the point because nearly every team using an IOC container <strong>IS</strong> doing it wrong, and they're doing it wrong because they <em>are</em> complicated and they give you a lot of "extensibility points" to make it <em>easy</em> to do things like interception, they make it <em>easy</em> to do things like per-request items, they make it <em>easy</em> to create singletons that aren't really singletons. and they make it <em>easy</em> to create lots of interfaces that get sucked into lots of classes (in the name of low coupling, and usually with the result of a total lack of any cohesiveness).</p>

<p><strong>It's putting the cart before the horse</strong></p>

<p>Learn to walk before you run, cart before horse, etc. The fundamental issue here, is that people are spending their times learning about IOC containers, gaining some level of test-ability because everything is an interface that talks to other interfaces via interfaces to interfaces. This is not to say that IOC containers cause this explicitly, because if you've already got a grasp of OO concepts then you aren't going to do too much damage here (except for hiding simple concepts like lifetime management up behind infrastructure that's a bit more future-career-proof).</p>

<p>My fundamental issue is that not enough time is being spent by developers learning how to just grow a testable and maintainable code-base. Throwing your lot in with a container with a centralized bootstrap process and claiming that's an advantage is missing out on a fundamental aspect of clean software development - that is, neat little packages that know how to bootstrap themselves and expose a sensible API for doing so - allowing them to be used across the code-base in an understandable and idiomatically crafted way.</p>

<p>Allowing your junior developers to "not worry about these things", because the almighty and all-knowing container will look after them and ensure that the code is testable, and that dependencies will just work automatically is simply shirking the responsibility of actually teaching those developers the useful and transferable skills that will help them deliver products across a multitude of languages and platforms. (EG. not just the two that come with a million IOC containers to choose from).</p>

<blockquote>
  <p><em>In GOOS we are extremely explicit about scope!  Java is a block</em>
<em>structured language with lexical scoping, closures and objects.</em>
<em>Blocks and objects are scopes. Variables declared in a block and</em>
<em>instance variables declared in an object are in a scope. There is no</em>
<em>need to re-implement (badly) what the language (compiler and VM)</em>
<em>already provide.</em></p>

<p>Nat Pryce</p>
</blockquote>

<p>And this, is what I believe that it all boils down to.</p>

<ul>
<li>You want per-request scoping? That's a "using statement" around the entry point to that request. </li>
<li>You want application-lifetime scoping? Just create the object on start-up and let it get cleaned up on application-close</li>
<li>You want something more fine-grained? That's just another using statement around the code concerned.</li>
</ul>

<p>Objects still don't need to know about their own scoping, of course not, and we realized that with containers early on with the removal of attributes from most frameworks. But why make all the effort of pushing scoping into a framework when it is such an intrinsic part of your application and it's relatively trivial to manage anyway? Lifetime management is not an implementation detail to be pushed away into central infrastructure code, and nothing but trouble will be had from trying to work that way <em>(nested sub-containers anyone? No - I thought not).</em></p>

<p>You want to talk about writing masses of boilerplate code? I have very little in the applications I'm actively developing now - each abstraction developed is responsible for its own set-up, and only exposes to the outside world any configuration needs that it might require and the public interfaces required to do its job. That code is written and tested <em>as part of the code-base</em>, is compile safe and is fast to bootstrap because "it's just code". Abstractions are built on top of other abstractions and are tested against other abstractions with appropriate levels of isolation depending on the test concerned and there are no problems here at all.</p>

<p>This approach does not preclude the injection of dependencies into say, the subsystem which might be created as a consequence of its construction, it merely hides that detail behind an appropriate API because the consumers of this package don't typically care about that construction.</p>

<p>You want to talk about managing deep or complex object graphs? That's not a problem - each package is only ever going to have a shallow object graph, because that's sensible software design - I don't have complicated object graphs because complicated object graphs tend to show themselves during testing and are very quickly turned into simple object graphs.</p>

<p>It's just software, and we should be spending more time learning how to deliver software and less time learning how to manipulate favourite container X.</p>


]]></description><link>http://codeofrob.com/entries/your-container-is-not-wanted-here.html</link><guid isPermaLink="true">http://codeofrob.com/entries/your-container-is-not-wanted-here.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 02 Feb 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[What does it look like when I code?]]></title><description><![CDATA[
		<p>Something like this</p>

<object width="1280" height="720"><param name="movie" value="http://www.youtube.com/v/mp_nxjhx6yY?version=3&amp;hl=en_US&amp;rel=0&amp;hd=1"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/mp_nxjhx6yY?version=3&amp;hl=en_US&amp;rel=0&amp;hd=1" type="application/x-shockwave-flash" width="1280" height="720" allowscriptaccess="always" allowfullscreen="true"></object>

<p>This is a time-lapse of me creating a game over 48 hours (a weekend), overall there is about 30 hours of screen-time packed into 3 minutes of video - it's cool to see how the game and code progress over those 30 hours.</p>

<p>What is interesting is how I always have the social elements open in a browser window on my left hand side, I'd never noticed it before - I don't think it slowed me down any - the pauses where I wasn't coding I was up making coffee or thinking about a problem</p>

<p>Still, it would be interesting to see how I'd get on without it if I was doing another of these - the next rendition of the competition is next March and I think I'll be doubling my efforts to create something cool - I might even go as far as to do a 3D effort in WebGL</p>
	]]></description><link>http://codeofrob.com/entries/what-does-it-look-like-when-i-code.html</link><guid isPermaLink="true">http://codeofrob.com/entries/what-does-it-look-like-when-i-code.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 20 Dec 2011 17:47:00 GMT</pubDate></item><item><title><![CDATA[Hoverbattles Released (and more)]]></title><description><![CDATA[
		<p>I've gone off on a tangent recently and been playing around with games development as if I was 15 again</p>
<p>I think I'm going to make a game that I actually want people to play next, but first up - three things I've released recently</p>
<h4>Hoverbattles</h4>
<p>My flagship 'game', something I've learned a <strong>lot</strong> from these past couple of months - written with a NodeJS back-end, with WebGL front-end, the code is awful in places and I think I have a few memory leaks (or third party libs do!) but I'm pretty much done with this now.</p>
<p><span style="font-weight: bold;">Note: The server this is on is not brill, so there will be lag</span><br>
</p>
<p>This can be found at <a href="http://hoverbattles.com">http://hoverbattles.com</a> - fill your boots.</p>
<p>Source can be found at <a href="https://github.com/robashton/HoverBattles">https://github.com/robashton/HoverBattles</a></p>
<p> </p>
<h4><img width="800" height="479" alt="" src="/images/codeofrob_com/hoverbattles.png"></h4>
<h4>Plane Thinking</h4>
<p>I coded this over a few days as warm-up for LD22, the 48 hour games development challenge, this is plain old Canvas (although I was playing with using WebGL to do progressive enhancement it turns out that copying buffers between the two gets expensive quickly and I didn't take it much further</p>
<p>This should work in most browsers, I really should make the effort to get it working with touch controls as it would work well on iPad</p>
<p>This can be played at <a href="http://planethinking.heroku.com/">http://planethinking.heroku.com/</a></p>
<p>Source can be found at <a href="https://github.com/robashton/plane-thinking">https://github.com/robashton/plane-thinking</a></p>
<p><a href="https://github.com/robashton/plane-thinking"><img width="800" height="650" alt="" src="/images/codeofrob_com/plane-thinking2.png"><br>
</a>  </p>
<h4>You don't have to be alone</h4>
<p>This is my entry to the 48 hour game development competition Ludum Dare - I don't really think of this as competing with anybody else, trying to build a game from scratch over 48 hours is <strong>mega hard</strong> and I'm really proud that I was able to pull it off with plot, sound, music and alternative ending galore</p>
<p>The code for this is ... suboptimal, if you play it on anything other than a really high end desktop computer in any other browser than Chrome then do so at your peril. I'll be learning from that in my next game and making an effort to keep those render calls down</p>
<p>The game can be found at: <a href="http://ld22-ashton.heroku.com/">http://ld22-ashton.heroku.com/</a></p>
<p>The source can be found at: <a href="https://github.com/robashton/ld48_22">https://github.com/robashton/ld48_22</a></p>
<p><a href="https://github.com/robashton/ld48_22"><img width="1082" height="949" alt="" src="/images/codeofrob_com/update-10.png"><br>
</a></p>
<h4>The point of all this</h4>
<p>Games development is complicated, the code in Hoverbattles is probably the most complex domain I've ever worked on, and finding ways to keep the accidental complexity low whilst keeping the technical complexity low at the same time was a big challenge</p>
<p>I've learned a lot by stepping away from ordinary business app development, and I'll be taking that back to the workplace with me, as well as carrying on in this space - never before has there been a better time for aspiring games development to noodle on in their spare time.</p>
<p>This site? Yeah I've messed this up a bit - I need to rip all these posts out and deploy them as static content and set up some re-directs, a project for a rainy weekend when I don't want to play with games :-)</p>
<p>Merry Xmas</p>
<p>Rob</p>
	]]></description><link>http://codeofrob.com/entries/hoverbattles-released-and-more.html</link><guid isPermaLink="true">http://codeofrob.com/entries/hoverbattles-released-and-more.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 20 Dec 2011 15:28:00 GMT</pubDate></item><item><title><![CDATA[A relaxed attitude towards the pragmatic delivery of 'okay' software]]></title><description><![CDATA[
		<strong>A brief middle-of-project retrospective</strong>
<p>I've not been coding in my spare time much the past few months, being seriously busy for a client - but the past couple of weeks has seen me pick up a project of mine that I started a few months ago (HoverBattles) and start pushing to some level of completion.</p>
<img width="800" height="451" alt="" src="/images/internal_codeofrob_com/currentproject.png">
<p>This has been an interesting project for me, not least of all because it's written entirely in Javascript (WebGL + JS, NodeJS and CouchDB) but because this time I made a real effort to drop any up-front <em>'zomg my code must be perfect'</em> aspirations from the get go.</p>
<p>What does this mean? Well I pretty much decided that technical debt should not be something to be overly avoided, overly organised code-bases stifle creativity and I really just wanted to <strong>deliver something.</strong></p>
<p>I also knew that as I learned more about effective JavaScript that my opinions on the 'best way to achieve things' would be changing about 20x more rapidly than it does when working in an environment I'm heavily used to, and trying to constantly maintain code at some mythical standard would prevent me from actually delivering</p>
<p>A couple of months later how does that leave me? Is the code-base a huge unmaintainable mess? I would say no - it is not. </p>
<p>There are messy bits in there but they're largely on the periphery. An avoidance of up-front framework/empire building has allowed me to be morally flexible with regards to where I put new code to Get Cool Stuff Done, and a healthy concern when going over pre-existing code to add something new has led to some easy wins when re-factoring around the pain points that naturally emerge.</p>
<p>I don't think that I've taken a cavalier approach to the project - at a macro level it's quite well structured, and for the most part there is a clean separation between the different sub-components that drive the system. In a code review there are bits I'd have to apologise for but even in projects with the greatest amount of technical debt avoidance this has been true.</p>
<p>There are some problems with the messaging/multi-player side of things, complex work-flows have emerged as a consequence of the individual components receiving some input, doing something and raising some output in orders that I did not pre-plan.</p>
<p>This has been made more complicated by the fact that some of these components only exist on the server, and yet the events they raise are still sent to the client because the client needs to react even if it is not the one doing the critical thinking.</p>
<p>This is an example of what I have come to classify as a <em>real problem</em> - that is, it is a problem that is naturally occurring and isn't one I have constructed to satisfy the whims of my inner Powerpoint Architect.</p>
<p>When I think of all the things that we work on in our line of business applications, the efforts we go to de-couple everything so it can be easily tested and maintained, the efforts we go to make sure we have the extensibility points and have our "what ifs" covered, I'm seeing a lot of that in a new light as this project goes on. </p>
<p>I don't think a lot of our 'units' in our LOB world are really units at all, they're fractions of 'units', and it's only as part of a more complex interaction that things get interesting and worth spending time fussing over.</p>
<p>Even those seeking to do more vertical testing of a unit within their system (across several internal components) aren't really testing anything meaningful, they're not really spending their time on anything really meaningful either - I wonder if we do a lot of this stuff just to make our jobs more interesting because LOB apps are at a micro-level... quite boring</p>
<p>Anyway I digress, a response could be that some of that rigidity and forward thinking is needed because we have more than one soul working on these projects and if everybody took the cavalier 'get it done' attitude we'd end up with a big mess right?</p>
<p>I'm not convinced - I think that if you have a team that can actually communicate and react to problems as they arise that a good momentum would still be possible, a lot of the technical solutions delivered in these LOB apps seem to exist as a way of avoiding the need for communication and I'm beginning to think of that as less okay than I did</p>

<p>I'm also beginning to think that a concentration on these things causes bigger balls to be dropped. There is little point in arguing over patterns if you're going to forget to apply sanitisation to user-provided input for example - or suitable defensive mechanisms against things that might go wrong (as dirty as that might make some of your code).</p>

<p>Going back to the whole CQRS thing as that was the topic of the last post, this ties in well - those things exist as solutions to complexity that already exists - not as ways of creating complexity that wasn't there before. Technical solutions should be avoided unless they're actually delivering the necessary value.</p>
<p>Random blathering I know, I'll actually start talking about the tech in the game soon I think, it's getting interesting and I think there are some things to say about it</p>
	]]></description><link>http://codeofrob.com/entries/a-relaxed-attitude-towards-the-pragmatic-delivery-of-okay-software.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-relaxed-attitude-towards-the-pragmatic-delivery-of-okay-software.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 01 Nov 2011 11:37:00 GMT</pubDate></item><item><title><![CDATA[CQRS is too complicated]]></title><description><![CDATA[
		<p>Is something I hear all too often at conferences and on Twitter, and more often or not it is said because of either a basic misunderstanding of what CQRS is or is not - or perhaps because they've dipped their toes into the hyperactive DDDCQRS mailing list and been scared away by all the white coat discussion that goes on in there a lot of the time.</p>
<p>The other day, the sentiment was yet again voiced by somebody of whose opinion I respect on Twitter and I ended up in about five minutes writing a gist explaining why I didn't think this was the case (Writing 4000 word essays is an hour's work if I'm feeling ranty), I've tidied it up a bit and decided to throw it below as it works well in a blog entry.</p>
<p><strong>A basic summary</strong></p>
<p>At the highest level CQRS just means maintaining a happy division between the reads and writes across your system - that is, having the reads in your system executed in a thin clean manner appropriate to the views you want to retrieve (one model), and your writes going through all the crazy logic you need such as validation, updating queues, third party systems, processing business rules (another model)</p>
<p>Consider the traditional and very-tongue-in-cheek N-Tier architecture I have created here in powerpoint, seen in a million "architecture" presentations in ASP.NET webforms shops across the world:</p>
<p>&nbsp;<img alt="" width="400" height="326" src="/images/internal_codeofrob_com/1.png"></p>
<p>Now modify it a little bit so that our reads haven't got to go through all that cruft, haven't got to somehow amene themselves to a bunch of "DAL objects" that are created with the very&nbsp;best intention of standardising our access to some form of database (and normally optimised for the write actions anyway).</p>
<p><img alt="" width="400" height="310" src="/images/internal_codeofrob_com/2.png"></p>
<p>We can&nbsp;instantly make our lives a lot easier by creating a pile of code optimised for creating views for our presentation layer,&nbsp;perhaps doing a bit of raw SQL or calling a sproc to generate the view for us. We can helpfully formalise this arrangement and for the most part set down a rule that the direction of travel down those two paths is one way (towards the DB for writes and away from the DB for reads).&nbsp; Funnily enough - most systems that do that <strong>BOL</strong>/BLL/DAL<strong>/OCKS</strong> stuff end up with something that looks like this anyway because it's too hard to do everything through a single model.</p>
<p>This is now a form of CQRS - at the highest level we've effectively split our system into two models&nbsp;and done something that's very similar to what we'd call CQS if we were&nbsp;doing it at the method level.&nbsp; This in itself should surely be enough to convince you&nbsp; that CQRS itself is not complicated and it might be a useful thing to look further into.</p>
<p>Of course, as you go further down the rabbit hole...</p>
<p><strong>Some examples</strong></p>
<p>CQRS can be achieved by using a document database like Raven or Couch - using your documents as a write store, using your indexes as a query store. </p>
<p>&nbsp;<img alt="" width="400" height="299" src="/images/internal_codeofrob_com/32.png"></p>
<p>It can be achieved with your favourite ORM (Even better if you can actually use that O and that M and get some good old OO going) - if you want to use your objects for encapsulating business logic and go directly to the the queries to project the data you need for views (HQL, SQL directly, SPROCS, whatever) - from the same database even, providing this remains efficient enough for your needs. <em>(Funnily enough, "our" collective weak attempts at creating domain models with NHibernate are what led to us re-discovering the need for two models in the first place in my opinion).</em></p>
<p>&nbsp;<img alt="" width="400" height="312" src="/images/internal_codeofrob_com/4.png"></p>
<p>Of course you may well end up with two databases anyway, as trying to query a database comprised of tables that represent state in your "objects" can be pretty inefficient, with the read store updated from the write store using hooks in your write system to generate pre-calculated views or data that's more applicable to generating views - this is not a bad model and can work too, it's still CQRS.</p>
<p>&nbsp;<img alt="" width="400" height="319" src="/images/internal_codeofrob_com/5.png"></p>
<p>CQRS gets the "complicated" label because people often associate it directly with event sourcing, which requires that little bit more of up-front development in order to get the level of elegance you won't find in the above scenarios. However, even event sourcing is really simple once you look at it - and is a natural progression from some of the other ways of "doing" CQRS - which can be a bit muddy (not that there is anything wrong with systems that are a bit muddy). <em>Note that I'm not mentioning DDD here At All - which is where a lot of heavy&nbsp;learning lies, and nearly none of us do anyway.</em></p>
<p>Consider hooking those events in your system to manually flatten/re-arrange data into other stores as outlined above? Does that work for that one other store? How about a reporting store? How about full text search? What about integration with third party systems and the data they want to see from you? How about the boardroom reports your CEO now wants on his desk each morning before he starts his day?</p>
<p><img alt="" width="400" height="351" src="/images/internal_codeofrob_com/6.png"></p>
<p>Youch. Deciding your single source of truth is the already written state gives you an amount of inflexibility, which you may or may not be happy with&nbsp;up to a point.</p>
<p>Updating other views of this truth after small changes can be inefficient&nbsp;and awkward. Recovering after introducing any write bugs to the system can be expensive also. Hell - even changing your model can also be expensive as database migrations are hardly the easiest things if you're trying to work with multiple stores and layers all over the place. When your powerpoint presentations start looking like this you have&nbsp;complexity issues- and these complexity issues aren't caused by CQRS, they're caused by having complex powerpont presentations.</p>
<p>Moving to events and jumping through a few hoops to make this possible <em>can</em> open up a world of simplicity, and if it's not for you there are other options open to you. CQRS is not complicated - trying to shoehorn the responsibilities of read and write through a single model is complicated. Most of us realise that going through a standard "BLL, DAL, BOL, TLA, CRA, P) layer for both reads/writes is dumb, and CQRS is a good way of formalising this decision.</p>
<p><strong>Another tdlr;</strong></p>
<p>You can see that clearly there is a natural progression from the very basics to having the need to go for a full blown event sourcing system with publishers/subscribers/servers/eventual consistency once the complexity of trying to manage a more "simple" solution starts to overwhelm.</p>
<p>Unless you have that complexity and&nbsp;that need&nbsp;then of course trying to thrust an ivory tower designed architecture onto a system that doesn't need it is going to seem complicated. Hint: If your technical solution is more complicated than your original problem you're probably doing it wrong.</p>
<p><a href="http://cre8ivethought.com/blog/index"><img alt="" width="500" height="405" src="/images/internal_codeofrob_com/DDDOverview_big.jpg"></a></p>
	]]></description><link>http://codeofrob.com/entries/cqrs-is-too-complicated.html</link><guid isPermaLink="true">http://codeofrob.com/entries/cqrs-is-too-complicated.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 28 Sep 2011 19:45:00 GMT</pubDate></item><item><title><![CDATA[RavenDB Consultancy]]></title><description><![CDATA[
		<p>I've been contacted quite a bit this past month with requests for workshops and short term consultancy on RavenDB - I'm thrilled to bits that the database seems to be taking off in this way and I'm all about helping this happen.</p>

<p>The short answer is yes, I am happy to come and do private workshops tailored around your company's needs with RavenDB, I am also happy to offer remote or on-site consultancy where appropriate/desired.</p>

<p>If you've too been wondering about this but not known where to look, just e-mail me at <a href="mailto:robashton@codeofrob.com">robashton@codeofrob.com</a>, I don't bite.</p>

<p>That's about it really, I'll use this space to say that I'm now nearly settled in Belgium on a long term project for a client and I'm ready to commence blogging again, I've a few things I want to cover with RavenDB in particular but I'll most likely be doing that over at <a href="http://codebetter.com">codebetter.com</a></p>
	]]></description><link>http://codeofrob.com/entries/ravendb-consultancy.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb-consultancy.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 05 Aug 2011 11:48:00 GMT</pubDate></item><item><title><![CDATA[SLJS.org - a Silverlight - Html/JS converter]]></title><description><![CDATA[
		<p>At NDC2011 I was chatting to some folk who work on various OSS projects about cool things we could potentially work on in the future, and the topic of a Silverlight -&gt; Web converter came up</p>

<p>TLDR: Click <a href="http://sljs.org">here</a> to see the demos, click <a href="http://github.com/robashton/sljs">here</a> to see the code, click <a href="http://groups.google.com/group/sljs">here</a> to view the Google Group.</p>

<p>I had thought about this before, but it is only recently that an IL converter appeared up that I deemed fit for this purpose (<a href="http://jsil.org">JSIL</a>), and it is after this conversation I decided to put words into action</p>

<p>To this end, I have spent the past few weeks diving into the various concepts in Silverlight and spiking out implementations for converting them to make sure that the vast majority of what I wanted was actually possible</p>

<p>And that leads us to this, <a href="http://sljs.org">SLJS.org</a>, home to where I've gotten so far, with a couple of demos showing off what it can do. More to be added as we go along.</p>

<ul>
<li>Here is a basic example of an application in action: Hello World (<a href="http://sljs.org/output/HelloWorld/HelloWorldTestPage.html">Silverlight</a>, <a href="http://sljs.org/output/HelloWorld/index.html">HTML</a>)</li>
<li>And here is something demonstrating some more SL concepts: Calculator (<a href="http://sljs.org/output/Calculator/CalculatorTestPage.html">Silverlight</a>, <a href="http://sljs.org/output/Calculator/index.html">HTML</a>)</li>
</ul>
<p>Truth be told I'm largely doing this for fun and education at the minute, although I know a few people who actually want to use it - not to convert legacy projects, but to write new code in their familiar Silverlight world and have it work in a browser without requiring a plug-in.</p>

<p>I'm happy to support that, but it should be a community effort, rather than me blindly just working on features for the sake of it (although I have a little more of that left in me before I start taking on feature requests!)</p>

<p>So far the following has been implemented</p>

<ul>
    <li>Bootstrapping a converted Silverlight application in JavaScript
    </li><li>Responding to changes of the root UI element</li>
    <li>Rendering a control hierarchy from the root UI element</li>
    <li>Rudimentary Dependency Object and Dependency Property support</li>
    <li>Listening for changes on Dependency Properties to update styling</li>
    <li>Listening for changes on Dependency Properties to update content</li>
    <li>A templating system for customizing the output from each control</li>
</ul>

<p>On my immediate road-map (so in the coming week), I'll be working on:</p>

<ul>
   <li>Rudimentary data-binding support (A spot of MVVM coming up)</li>
   <li>Converting styles to CSS</li>
   <li>Going through System.Windows.Controls and creating the outline for them in JS</li>
   <li>Forcing some layout concepts into HTML from Silverlight</li>
   <li>A preliminary investigation into attached dependency properties</li>
</ul>

<p>I would totally appreciate some help/feedback/pointers for the direction of the project/cheering from the sidelines etc</p>

<p>The last one is important actually, if y'all tell me you find this interesting then I'll carry on working on it, if nobody gives a crap then when I get bored I'll stop :-)</p>

<p>But yeah, just joining the <a href="http://groups.google.com/group/sljs">Google Group</a> and helping me build a road-map would be a good start</p>
	]]></description><link>http://codeofrob.com/entries/sljs.org---a-silverlight---html-js-converter.html</link><guid isPermaLink="true">http://codeofrob.com/entries/sljs.org---a-silverlight---html-js-converter.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 30 Jun 2011 08:29:00 GMT</pubDate></item><item><title><![CDATA[5 reasons to give node.js some love]]></title><description><![CDATA[
		<p>In response to a question from a friend on Twitter (Private account so no linky), but with the text: </p>

<p>"Been reading up a little bit on node.js @robashton @domgreen. What makes it stand out from alternatives or is it just a JS 'me too' play?"</p>

<p>My initial response was, hey - you know what? I can't think of any (popular) alternatives that provide the unique combination that node.js does, and then started writing a torrent of tweets describing why I personally am so excited about node.</p>

<p>Then I decided that rather than spam Twitter, I should write a blog post to link to when asked the same question in the future.</p>

<p>Every bugger has already done one of these, but I want to answer the question in my own personal way</p>

<b>1) You get to write Javascript on the server and the client</b>

<p>Think about this for a second - it's really not just a gimmick (although some people seem to think it is). Even in a simple web application you're going to have validation logic that you're going to want to execute on the client AND on the server, and usually this can't be shared without going through some sort of rules engine or crazy framework to spit out some rough client-side equivalents. </p>

<p>No need with node, you can write your model (complete with business rules, etc), and write a nice task-based user interface around that model, running it all locally in the browser, and then dispatching and validating the commands on the server - because hey, everything is just JSON at the end of the day, and everything you're writing works against that.</p>

<p>Take this a step further, and consider that we have some pretty awesome document databases on the scene at the moment whose primary communication and storage mechanism is - guess what? JSON (well BSON) - at no point during any of this do you need to sit there dealing with mapping frameworks or hand-written mapping code, because you're just flinging JSON around.</p>

<p>With efforts on <a href="http://www.commonjs.org/">CommonJS</a> and <a href="https://github.com/sstephenson/stitch">Stitch</a> ongoing, there is really no excuse for not writing all your JavaScript in a state where it can be executed on both the client and the server.</p>

<b>2) Event-based asynchronous stuff is just How Things Work in JavaScript </b>

<p>Yeah okay, I have no idea what I'm talking about here, but what I do understand and what most people who have been writing JavaScript for the past decade understand is that <i>your</i> JavaScript tends to execute on a single thread and long-running processes get dealt with by the host, using callbacks to notify you (back on that single thread) as and when those things are done.</p>

<p>Now, in the browser these long-running requests are limited to... well HTTP calls to the server to get/post data, but on the server we do nearly <i>everything</i> like this; requests to other machines, requests to the file system etc.</p>

<p>We don't need any crazy language keywords (looking at you C#), we don't need any crazy Task of X/Y and Z objects (Looking at you C#), we just need: </p>

<script src="https://gist.github.com/949550.js?file=gistfile1.js"></script>

<p>This gives us some brilliant performance benefits, dealing with potentially gazillions of connected clients an <a href="http://www.theregister.co.uk/2011/03/01/the_rise_and_rise_of_node_dot_js/">easy possibility</a> <i>Sorry for a "the register" link this early in the morning, it's a bit indecent of me.</i></p>

<p>This also makes dealing with concurrency (at least within a single process) really easy too, all your variables are safe to be accessed at any time as you haven't got any potential race conditions, you can mutate state all you want and not worry that somebody else is going to come along and take away your cheese.</p>

<p>Hell, even the plans for future-node seem to be keeping this philosophy intact, with multiple node processes being given a way to communicate safely (or at least as far as I understand the slides that I've read from conferences I wasn't at).</p>

<b>3) Awesome package management!</b>

<p>Just like Ruby, and just like Linux-land in general, if you want to do something there is probably a library/package waiting for you to pull down and consume, and you can do this via the wonderful magic of <a href="http://npmjs.org/">NPM</a></p>

<p>npm install socket.io</p>

<p>It's that easy to get the libraries you need, and there are libraries available for most of the things you can think of, the primary ones I am using myself are: </p>

<ul>
     <li><a href="https://github.com/felixge/node-paperboy">Paperboy</a> - for simply serving static files from a directory (index.html, style.css, etc</li>
     <li><a href="https://github.com/donnerjack13589/node.gzip">gzip</a> - for um, gzipping content that I send down to the client</li>
     <li><a href="http://socket.io/">socket.io</a> - for magically doing websockets, or at the very least emulating websockets</li>
     <li><a href="https://github.com/tmpvar/jsdom">jsdom</a> + jquery - manipulating the DOM server-side? Oh say it ain't so?</li>
     <li><a href="https://github.com/sstephenson/stitch">Stitch</a> for allowing me to write code in CommonJS format and still use it in the browser.</li>
</ul>

<p>This isn't anything particularly unique to node, but in this day and age it's a bit hard to be taken seriously without a good package manager in your ecosystem and it's good to see something of quality here.</p>

<b>4) Community community community</b>

<p>The community around node.js is brilliantly active, passionate and y'know - generally quite bright - and willing to try new things out (Kinda goes with the territory really)</p>

<p>This, just like Ruby, is a really big draw for those of us from ecosystems which... lack anything of this scale</p>

<p>This enthusiasm does make it a bit difficult to separate actual innovation occurring from the old "Look at JavaScript doing what everything else has been able to do forever", but I'll take raw enthusiasm over rigid nay-say mentality any day - enthusiasm is contagious and gives me the ability to Get Things Done</p>

<b>5) It's easy, really easy, like super easy, We can all do it!</b>

<p>JavaScript aside (And if you don't like JavaScript you can always use CoffeeScript), the process of writing code that does exciting stuff is ludicrously simple.</p>

<p>Having direct access to the HTTP pipeline, and not hiding it behind crazy levels of abstracted framework cruft is a big, big win - and once you start writing code like this you start to wonder where this kind of thing has been all your life.</p>

<p>"I want to do this: " has not once resulted in me banging my head against the constraints and limitations that somebody else has put in my way (supposedly to help me).</p>

<p>My personal website currently runs on pixie dust and grated unicorn horns - I'm pulling in content from my old subtext blog and spitting it out on the front page (with plans to pull in content from <a href="http://codebetter.com/robashton/">CodeBetter</a> and <a href="http://altdevblogaday.org/author/rob-ashton/">Altdevblogaday</a> too), whilst acting as a reverse proxy for the old site (in very few lines of code). </p> 

<p>That's utterly crazy, and I drafted it up in just a few hours of hackity hack hack hacking, with those goals in mind.</p>

<b>Anyway...</b>

<p>The beauty of node comes in the combination of these attributes, not just one thing (because none of those things bar point #1 are by themselves particularly new or ground breaking</p>

<p>If you've previously dismissed node as something pointless because you think it brings nothing new to the table compared to your X, Y or Z then I urge you to have another look at it, as The Creators prepare to bring it natively to Windows it's only going to get more popular and you'll want to be involved.</p>

	]]></description><link>http://codeofrob.com/entries/5-reasons-to-give-node.js-some-love.html</link><guid isPermaLink="true">http://codeofrob.com/entries/5-reasons-to-give-node.js-some-love.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sat, 30 Apr 2011 07:39:00 GMT</pubDate></item><item><title><![CDATA[Static analysis of Simple.Data code to generate databases]]></title><description><![CDATA[
		<p>The dynamic keyword in C#4 has been put to some good use already - and has attracted a few detractors (probably because dynamic is to C# as generic is to Java), but the fact that the dynamic keyword compiles down to simple reflection over System.Object does present some interesting possibilities over its more pure counterparts.</p>

<p>I had this thought at the weekend whilst doing something completely unrelated, and a brief Google suggested nobody else has bothered doing it with Mark Rendle's <a href="https://github.com/markrendle/Simple.Data">Simple.Data</a> yet, so here I am with a proof of concept scribbled down after a couple of hours work this evening.</p>

<p>Given the following code:</p>

<script src="https://gist.github.com/902388.js?file=Model.cs"></script>

<p>I want to end up with a database table that looks like:</p>

<script src="https://gist.github.com/902388.js?file=database.sql"></script>

<p>Looking at it, this is actually quite a simple problem, and we have two possible solutions to follow if a as a user, we are to do this without writing any further code on top of this.</p>

<ul>
<li>Create/modify the database as the code is executed</li>
<li>Analyse the compiled IL and figure it out from there</li>
</ul>

<p>Both have their merits and cons (and some cons are definitely shared hah), but from an accessibility point of view being able to do either of these would be pretty "cool"</p>

<p>I'm going for option 2, because I haven't done any IL in a while and want to remind folks that I'm not just a JS monkey, but still care about those .NET leanings too ;-)</p>

<p>Looking at the above code, as a user we can work out that the various columns and tables exist, and their types, so this should mean we can do the same programnatically against the compiled IL.</p>

<p>Let's look at the compiled IL for the first method as dumped out with Mono.Cecil in my immediate Window:</p>

<script src="https://gist.github.com/902388.js?file=gistfile10.cs"></script>

<p>Okay, that's quite daunting, but breaking it down we can easily understand what is going on (I haven't read any docs, I just read the IL and figured it out, so I could be wrong :)</p>

<ul>
<li>First up, we look at a compiled generated static field and if it's present we skip forward by about 30 instructions</li>
<li>If it's not present, we load up the name of our method call (FindByUsername) and do some reflection to get information about that method call</li>
<li>We then do the same with the property access (Users)</li>
<li>Arriving at the point we would have skipped ahead to if those values had been present, we realise they are cached information about the calls to the "Object", only loaded once (sensible as Reflection is expensive yeah?</li>
<li>At this point, we can safely load up the arguments into the stack and make a call via the Callvirt to the cached reflection information on the DB object</li>
</ul>

<p>This is nice and simple, the only information we haven't got for sure is that those dynamic calls are actually being made to a SimpleData object because it's just a System.Object once compiled. I figure it might be possible to trace through the code to find at what point that object was actually created via the Open call, but that's way beyond the scope of this blog post.</p>

<p>As for analysing this, we have Mono.Cecil so may as well write a feature test to try our initial play out.</p>

<script src="https://gist.github.com/902388.js?file=FeatureTest.cs"></script>

<p>I'm not going to be clever about this, as it's just a play-about, so let's dive in and see what information we can find in the assembly - to do this we enumerate the types and pass them into some type of scanner.</p>

<script src="https://gist.github.com/902388.js?file=ModelScanner.cs"></script>

<p>We then have a look at all the methods on that type (duh)</p>

<script src="https://gist.github.com/902388.js?file=MethodScanning.cs"></script>

<p>The important information is found in the method call, and the important stuff we want to look for in a method is (for now):</p>

<ul>
<li>Are there any dynamic method calls made?</li>
<li>Are there any references to cached fields (Callsites)</li>
</ul>

<p>With this in mind, I can think about how to identify these things</p>

<p>Looking at whether we have any method calls (returning references to those instructions - we just look for any call virts to an Invoke method (This is hardly fail-safe, but it'll easily do for that test)</p>

<script src="https://gist.github.com/902388.js?file=ExtractDynamicMethodCallInstructions.cs"></script>

<p>Looking at any cached references to reflected data, again we just look for a loading of a field, the subsequent "goto", and check the type of the field (Callsite)</p>

<script src="https://gist.github.com/902388.js?file=ExtractInitialReflectedCachedFieldReferenceInstructions.cs"></script>

<p>I can use these methods to get me information about what is going on here, and just check we're in a method that actually does something similar to what we're interested in.</p>

<script src="https://gist.github.com/902388.js?file=Check.cs"></script>

<p>The references to those fields will yield in interesting information about the table/column we are dealing with in Simple.Data, that is - the names of those objects.</p>

<p>I find this by going to that instruction and looking for the inevitable call to Ldstr, loading the name of the method call/property access onto the stack before making the reflection call.</p>

<script src="https://gist.github.com/902388.js?file=FieldNames.cs"></script>

<p>So far so good, now I just need the type of the argument passed into the call, and I achieve that by looking at the arguments being loaded into the actual method call</p>

<p>Can you say hacky? I just look at the previous instruction and if it's a ldstr I know the argument is a string :)</p>

<script src="https://gist.github.com/902392.js?file=methodssearch.cs"></script>

<p>All that is left is the putting together of this information into the model we're building.</p>

<script src="https://gist.github.com/902392.js?file=parsing%20the%20data.cs"></script>

<p>This gives me an in memory model of the database, with the name of the table and the column we've found - creating a DB creation script from this is a trivial task left to the imagination by the reader (My Sql is awful man!)</p>

<p>This is where I stopped as I don't have much time to go further tonight, if anybody wants to fork the repository and carry on where I left off, it can be found here: <a href="https://github.com/robashton/Simple.Data.Generation">https://github.com/robashton/Simple.Data.Generation</a></p>

<p>Clearly the rest of the work takes the following path if it was to be continued:</p>

<ul>
<li>Check for all the other types of 'const' to be passed into Simple.Data method calls</li>
<li>Check for arguments/local variables being passed into the Simple.Data method calls</li>
<li>Allow for multiple arguments to Simple.Data method calls</li>
<li>Deal with other types of Simple.Data method call other than FindBy</li>
<li>Deal with dynamic operations being passed to other dynamic operations (Simple.Data does this)</li>
</ul>

<p>Is this actually a good idea? Possibly? Possibly not? I haven't read about the implementation of dynamic behind the scenes by the compiler (literally, not at all) - and don't know how much is left up the compiler when choosing how to do it (Looking at those cached fields...), and this particular script makes quite a lot of assumptions about this.</p>

<p>As an example of what implementing the dynamic key word on top of a statically typed language and runtime brings to us though, it's quite powerful - and it would be interesting to see it pushed further.</p>

<p>Thoughts?</p>


	]]></description><link>http://codeofrob.com/entries/static-analysis-of-simple.data-code-to-generate-databases.html</link><guid isPermaLink="true">http://codeofrob.com/entries/static-analysis-of-simple.data-code-to-generate-databases.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 04 Apr 2011 19:57:00 GMT</pubDate></item><item><title><![CDATA[Cloud9 on Cygwin with Node and Npm]]></title><description><![CDATA[
		<p>If for one reason or another you haven't got a Linux box available and you're using Cygwin to run Node and such, then you probably want a good editor/debugger to go along with this and provide a tolerable experience comparable with that on a more native platform.</p>
<p>Cloud9 is pretty darned cool, and although the hosted version lacks stability with the git integration and various other things, the downloadable and hostable version is pretty much The Thing to use when dealing with large numbers of files in a fully fledged javascript client/server app.</p>
<p>At the moment however, if you want to use the latest node with the latest cloud9, there are a few issues, and getting this scenario working under Windows takes a tiny bit of manual effort.</p>
<ul>
    <li>Install Cygwin.</li>
    <li>Install Git (using Cygwin setup)</li>
    <li>Install Curl (using Cygwin setup)</li>
    <li>Then run Cygwin.</li>
</ul>
<p>That leaves us in a place to install the latest version of Node:</p>
<pre>git clone git://github.com/joyent/node.git<br>cd node<br>./configure<br>make &amp;&amp; make install<br></pre>
<p>If during the configuration step you're told that you're missing a component, run the Cygwin setup and install that component. Some of the names are a bit different, but googling suffices for everything here - you basically want openssl-dev and a c++ compiler - it didn't ask me for much more than that.</p>
<p>Next up, you want NPM, this is nice and easy</p>
<pre>curl http://npmjs.org/install.sh | sh</pre>
<p>When this has finished chugging, you should be sat in Cygwin wondering what to do next, and the answer is - install Cloud9!</p>
<pre>npm install cloud9</pre>
<p>Now, in an ideal world this would work (and in the future, if you're reading this in the future, hi!) it probably will work at this point - but at the moment you're going to have to re-build one of the components for cloud9 and copy that over to the correct location.</p>
<p>Pop into the Cygwin setup tool and install libxml2-devel</p>
<p>Then from Cygwin perform the following:</p>
<pre>git clone https://github.com/ajaxorg/o3.git<br>cd o3<br>./tools/node_modules_build<br>cp build/default/o3.node /usr/local/lib/node/cloud9/support/jsdav/support/node-o3-xml/lib/o3-xml/<br></pre>
<p>Now if you go to a folder with a pile of javascript files, you can run cloud9 by typing.</p>
<pre>cloud9</pre>
<p>The fruits of this labour should look something like this:</p>
<p><a href="/images/internal_codeofrob_com/cloud9.png"><img height="392" width="600" src="/images/internal_codeofrob_com/cloud9.png" alt=""></a></p>
<p>Now you can run/debug/manage all your writings inside your browser - ace stuff.</p>
<p>&nbsp;</p>
<p>Credits go to a chap called <a href="http://gratdevel.blogspot.com/2011/03/easier-way-of-setting-up-cloud9-on.html">Neil Kerkin</a> who I stole this from and ported it into Cygwin so I could do JS if caught short offline on my windows laptop. (I've done likewise on my main Ubuntu machine).</p>
<p><br>
</p>
	]]></description><link>http://codeofrob.com/entries/cloud9-on-cygwin-with-node-and-npm.html</link><guid isPermaLink="true">http://codeofrob.com/entries/cloud9-on-cygwin-with-node-and-npm.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 25 Mar 2011 13:16:00 GMT</pubDate></item><item><title><![CDATA[WebGl Pong is alive]]></title><description><![CDATA[
		<p>I've spent the few spare hours I had going this week to get the different states sorted out that the game could be in, allowing it to be used as a game instead of just a local tech exercise.</p>
<p>It can be found at <a href="http://robashton.no.de">http://robashton.no.de</a> if you want to give it a go, because Websockets are disabled in most browsers for the moment you'll probably need flash installed for the network stuff (sorry, nothing I can do about that).</p>
<p><img width="500" height="358" alt="" src="/images/internal_codeofrob_com/glopng.png"></p>
<p>&nbsp;</p>
<p>If you want to give it a whirl, I suggest you link it to a friend, as the site won't get enough traffic to make it worth waiting around for a random to turn up</p>
<p>The network code is a bit... inelegant, and that's one of the exercises for this weekend (doing it more 'proper').</p>
<p>The source for anybody interested in how it's been put together can be found on Github, although having made a beeline from 'okay code' to 'okay code with lots of crap bits' in order to 'ship', it's not a shining example of best practise.</p>
<p>I do so like finishing projects, although I wouldn't call this the end, next up is writing some better shaders, adding a particle system, switching back to a perspective projection matrix (so, putting the 3D back in), and probably adding a few little features that will make it more 'fun'.</p>
<p>Once I've exhausted all the learning opportunities Pong can give me (Amazing how something so simple can give so much), then I'll move onto the next WebGl project, using everything learned so far.</p>
	]]></description><link>http://codeofrob.com/entries/webgl-pong-is-alive.html</link><guid isPermaLink="true">http://codeofrob.com/entries/webgl-pong-is-alive.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 18 Mar 2011 07:54:00 GMT</pubDate></item><item><title><![CDATA[A Javascript game loop for multiplayer WebGL]]></title><description><![CDATA[
		<p>In an aim to build that simple multi-player game (Pong), one of the first things to do to drive the application, is to build a game loop that will drive the rendering and logic.</p>
<p>We <i>were</i> building this at a hack day, so getting this set up was integral so we could split up the work in the team between building a basic renderer, and building the engine for doing all the pong logic (ping, pong, collision, etc ;-))</p>

<h2>First up, a Naive game loop</h2>

<script src="https://gist.github.com/874177.js?file=gistfile1.js"></script>

<p>There is something immediately wrong with this, and if you have ever gone remotely near Javascript you'll see it straight away.

</p><p>Chiefly, this is that you can't have never-ending loops in JS and expect the rest of the page to carry on functioning correctly.</p>

<p>As far as I understand it, Javascript effectively executes on a single UI thread, long-running calls to web services are done asynchronously (with callbacks executing on that single UI thread), and in order to get a loop running we have to fall back to getting a callback executed every time we want the loop to execute.</p>

<h2>Second up, another naive game loop</h2>

<script src="https://gist.github.com/874187.js?file=gistfile1.js"></script>

<p>In this attempt, we are saying "Run this logic 30 times a second", which is much better - as it means we render the scene 30 times a second and effectively execute the logic 30 times a second.</p>

<p>We might choose to stop here, except this is also problematic - as what happens if for _some_ reason on one client renderScene takes longer than a 30th of a second, but on another client it does not?</p>

<p>Poorly performing clients will quickly get out of sync with other clients who haven't got any problems - and in fact if you have any other timers, they might cause these ones to be queued... and well you get the picture. You can't trust that the logic is actually going to be called every 30th of a second.</p>

<p>One solution is to work out how much time has elapsed since the last frame, and use that as a multiplier in the executing logic (distanceTraveled = speed * timeElapsed) - but we can easily see that this would get out of hand in any but the simplest of rendering demos.</p>

<p>Nay, I present to you the loop we actually used in our pong game, this is based pretty much entirely from a post found on the excellent <a href="http://altdevblogaday.org/2011/02/23/ginkgos-game-loop/">AltDevBlogADay site</a></p>

<p>Don't worry if you can't read it easily, as I have a nice simple version of what it sets out to achieve below, in my less naive game loop</p>

<h2>A less naive approach</h2>

<script src="https://gist.github.com/874223.js?file=gistfile1.js"></script>

<p>It's a little bit more complicated, but what's we're essentially doing is de-coupling the execution of our logic from the underlying timer mechanism, by calculating how much time has elapsed since we last tried to run the logic, and then optionally run the logic more than once (or even not at all) if necessary.</p>

<p>We also keep the left over time around, to add to the next tick, so rounding errors don't bother us at all.</p>

<p>What's cool about this, is that we can store how many ticks has elapsed in the entire game, and use this as a universal value for coordinating synchronisation between two player's game states (more about this in the coming entries).</p>

<h2>Game programming 101</h2>
<p>Okay, so what the hell eh? I'm a software developer, not a game programmer, what am I doing writing posts about the most basic of games development topics? </p>

<p>Truth be told, I don't really know yet - but documenting what I've learned as I go along seems natural these days, and it's more interesting than Active Directory, which is what I'm currently learning about in my work hours...</p>

<p>Disclaimer: I'm not a games developer, and the loop above may not be optimal (although it does work!) - use it at your own peril.</p>
	]]></description><link>http://codeofrob.com/entries/a-javascript-game-loop-for-multiplayer-webgl.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-javascript-game-loop-for-multiplayer-webgl.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 17 Mar 2011 10:28:00 GMT</pubDate></item><item><title><![CDATA[Speaking at NDC2011]]></title><description><![CDATA[
		<p>I will be speaking in Norway in June at the <a href="http://www.ndc2011.no/">NDC conference</a></p>
<p><a href="http://www.ndc2011.no"><img height="95" width="271" alt="" src="/images/internal_codeofrob_com/ndc2011_logo.jpg"></a><br>
</p>
<p>This is quite exciting for me, my experience of the northern european lot at <a href="http://oredev.org/2011">Oredev</a> was that they were all incredibly bright (Something to do with the cold weather maybe?), and while I am intending on attending that conference this year already (one way or another), the chance to go to another conference in the region is not one to be turned down</p>
<p>It also turns out that a lot of the people I know from the land of Twitter, London and other conferences will be going too, and I can't wait to drink some beers with them and catch up</p>
<p>The talks I'll be giving?</p>
<h2>Document databases and ASP.NET MVC</h2>
<p>The formal blurb is on the NDC website, but basically I'll be talking about how if you're coming from a background of using ORMs like NHibernate or EF4, how you can take what you've learned and apply it to document database usage in an ASP.NET MVC application</p>
<p>What's amusing for me about this one, is that once I'd used a document database in an ASP.NET MVC application, it actually changed how I used ORMs in my ASP.NET MVC applications too.</p>
<p>Simplicity is of course the aim of the day here, but I'll talk about some potentially complicated patterns that some people might feel more comfortable with if they're used to working in a particular way</p>
<p>So this will be a fun one, the talk will be largely agnostic when it comes to the document store we're actually using, and be applicable to both CouchDB and RavenDB (I guess begrudgingly Mongo as well, if you must)</p>
<h2>Introduction to RavenDB</h2>
<p>No conference should be without one of these right?</p>
<p>This will be a ground up introduction to what RavenDB is, the features it exposes and a quick look at the basic usage of it with the .NET API it ships with.</p>
<br>
<p>I'm looking forward to seeing everyone there, and hope we're able to fit in a sauna at some point (temporally, not physically, in case that needs clarifying)</p>
	]]></description><link>http://codeofrob.com/entries/speaking-at-ndc2011.html</link><guid isPermaLink="true">http://codeofrob.com/entries/speaking-at-ndc2011.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 16 Mar 2011 14:21:00 GMT</pubDate></item><item><title><![CDATA[Why WebGL and node.js (and websockets) are important]]></title><description><![CDATA[
		<p>I've just moved to a new role in Belgium, and this means I've got time for some writing again, the popular vote on Twitter is that I blog my thoughts on these two cookies, and as they're what I'm currently ploughing my way through I can't help but pander to those requests.</p>


<p>If you're completely new to the wonderful world of these two technologies, then bear with me - this isn't that technical a post, and it might prompt you to read the next entries in the series coming up and maybe even dabble in it yourselves.</p>

<p><b>WebGl?</b></p>

<p> WebGL is a standard created to allow developers to embed a full on 3D accelerated experience inside the browser (using the canvas element), by developing against the already well known OpenGL API. It really is that simple - in Javascript, give us the method calls we're already used to in other languages to render our shiny stuff on screen.</p>

<p> And I really do mean shiny stuff, we are totally able to write our very own vertex and index shaders (mini-programs that run on the GPU across uploaded data) in HLSL (Again, the way we already know how) in order to create awesome shiny pieces of wonder ala this demo <a href="https://cvs.khronos.org/svn/repos/registry/trunk/public/webgl/sdk/demos/google/particles/index.html">here</a></p>:

<p><img src="http://codeofrob.com/images/internal_codeofrob_com/shinygl.png" height="422" width="564"></p>

<p>Why is this great? It is a standard that browser vendors can implement (and already do, at least with Chrome, Firefox and Safari), allowing developers to create fully featured games (or applications, hah) that are cross platform right out of the box - and I don't just mean cross platform in terms of Apple/Windows/Linux here (Although that is <b>immense</b> in itself), I mean cross platform as in across all mobile devices as they begin to implement the standard too</p><p> (With Google pushing it into Chrome so fast, you'd better bet it'll end up on Android, and we'd hope that with Apple supposedly being all "pro standards" that they'd get it on the iPhone seeming as it already runs OpenGL).</p>

<p>That's right, games and rich applications that you can deliver from the internet to any client with a modern web browser - whether it be tablet, phone, laptop or desktop; there be gold in those there hills! </p>

<p>With local storage and the ability to save those pages and their dependencies to the hard drive we essentially also give them the ability to run off-line as desktop applications too. You can see that this is going to be a big thing as we move to more web-oriented computer systems (Google OS etc)</p>

<p><b>Node.js and Websockets<br></b></p><p>If we're going to be writing our client code in Javascript, then it makes sense to go and write our server in the same language, allowing us to easily share code between the two. Websockets give us a great way of real-time communication with the web server. </p>

<p>They're currently disabled while they sort out security concerns, but the gap is serviced with socket.io allowing us to write code against whatever else is there and be forwards compatible for when they're enabled again. </p>

<p>Node.js, if you didn't know already, is a way to write completely non-blocking asynchronous code on the server (or desktop), hosted in Google's V8 Javascript engine (pretty darned fast).</p>

<p>It's ideal as a way of writing fast and efficient server code for communicating data between the clients connected via Websockets. It also has a large community and a great library of packages (data persistence, not a problem). It's also delightfully simple to use (A basic chat server and client in 15 lines of code?).</p>

<p>Oh, and the plans for web-sockets will allow p2p communication, so it's not like you have to place your entire load on a server either. I can see some very exciting things happening here the coming years.</p>

<p>This amazing set-up looks something like this:</p><p><img style="max-width: 800px;" src="http://codeofrob.com/images/internal_codeofrob_com/javascript.png" height="504" width="653"></p>
<p>Hi guys, it's the future and this is what I look like.</p>

<p><b>Where I'm going with this<br></b></p><p>What I'm trying to say is that with this combination of techno-wizardry, we have a way of easily deploying rich applications to potentially anybody on the planet, and provide a mechanism for getting them to communicate easily in real-time. This can all be easily developed in an already ubiquitous language, using frameworks we're readily familiar with and with a community that is growing at a vast rate of knots. </p>

<p>I know it's an oft-repeated statement, but the line between the desktop and web grows ever thinner, and it is swiftly becoming less relevant what the underlying platform actually is. With this, we move another step closer to the dream world of everybody being able to do anything anywhere. Hurrah!</p>

<p><b>The coming micro series of posts</b></p><p>Over the weekend, @<a href="http://twitter.com/ToJans">ToJans</a>, @<a href="http://twitter.com/seagile">Seagile</a> and I dived right into this technology stack, none of us are <i>really</i> Javascript developers and we made a few mistakes to begin with, but over the course of a day and a bit we managed to get the most amazing playable over the Internet game there is written.</p>

<p>It looked something like this:</p><p><img style="max-width: 800px;" src="http://codeofrob.com/images/internal_codeofrob_com/pong%201.png"></p>

<p>Okay - I totally admit we could have done this with the plain old 2D acceleration with the HTML5 canvas (And that is a viable option for cross platform interactive applications too!!), but as a learning exercise we have to start somewhere, and WebGL 3D acceleration with an orthographic projection matrix is probably the simplest place we <i>can</i> start. </p>

<p>I'll be finishing it off and sticking it publicly on the Internet somewhere over the coming week before moving onto a more "real" project I have planned with the same technology, but in the coming posts I'll show you all what this actually looks like behind the scenes, how the technologies fit together and some patterns we used that kept our code clean(er) during this process. </p><p>Ace. Exciting. Super cool - all that.</p>
	]]></description><link>http://codeofrob.com/entries/why-webgl-and-node.js-and-websockets-are-important.html</link><guid isPermaLink="true">http://codeofrob.com/entries/why-webgl-and-node.js-and-websockets-are-important.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 14 Mar 2011 21:24:00 GMT</pubDate></item><item><title><![CDATA[Service location is (not) always evil]]></title><description><![CDATA[
		<p>Okay – so recently I’ve started presenting a session to various groups involving the well known IOC container “StructureMap” – and despite being pretty clear about the contents of said talk I’m getting quite a bit of backlash for demonstrating anything that even remotely resembles service location.</p> <p>As we all know, service location is bad – but why do we know that? Because we’ve been told it’s bad? And why were we told it was bad? Let’s very briefly dig into this and see where we end up:</p> <p><strong>Why is service location evil?</strong></p> <p>Consider the following WebForms style code:</p> <div id="codeSnippetWrapper"> <div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Page</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">   {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">       <span style="color: #0000ff;">public</span> Page()</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">       {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           var factory = <span style="color: #0000ff;">new</span> CheeseFactory();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           var cheese = factory.CreateCheese(<span style="color: #006080;">"smelly"</span>);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">       }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">       <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> BeginRequest()</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">       {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           var articles = DataAccess.GetArticles(100, 300);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           <span style="color: #008000;">// Data binding</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">       }   </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">   }</pre><!--CRLF--></div></div>
<p>This is the kind of un-testable code that we started moving towards using Dependency Injection to solve in languages that have the notion of strongly defined types and constructors and the means for doing such things. </p>
<p>We can immediately remove a coupling problem here and increase testability by injecting those dependencies via the constructor like so:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Page</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">private</span> IDataAccess dataAccess;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">public</span> Page(CheeseFactory cheeseFactory, IDataAccess dataAccess)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">            var cheese = cheeseFactory.CreateCheese(<span style="color: #006080;">"smelly"</span>);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">            <span style="color: #0000ff;">this</span>.dataAccess = dataAccess;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> BeginRequest()</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">            var articles = dataAccess.GetArticles(100, 300);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">            <span style="color: #008000;">// Data binding</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    </pre><!--CRLF--></div>
<p>Okay, this isn’t necessarily the best example in the world (Simply moving our dependencies into the constructor to “improve testability and decrease coupling” isn’t the silver bullet everybody seems to think it is), but it serves to show the next snippet of code which our IOC containers are built to help us with:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">var page = <span style="color: #0000ff;">new</span> Page(</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                <span style="color: #0000ff;">new</span> CheeseFactory(),</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                <span style="color: #0000ff;">new</span> DataAccess(</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                    <span style="color: #0000ff;">new</span> Connection(<span style="color: #006080;">"db://svr-db2"</span>)));</pre><!--CRLF--></div></div></div>
<p>With typical applications built on top of frameworks such as say, ASP.NET MVC – this dependency graph can become quite large in most typical systems built out of various service layers, repository layers, etc.&nbsp; IOC containers popped into existence to make the above code more manageable like so:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">var page = container.GetInstance&lt;Page&gt;();</pre><!--CRLF--></div></div>
<p>The aim from all this would be simply to be able to have a single call to container.GetInstance which would compose the entire application for us and we could carry on with just writing code and tests. </p>
<p>What we have here, are classes which up front specify their dependencies via their constructor arguments, which makes creating SUTs in our tests easier, and reduces ambiguity in our code base.</p>
<p>In certain circumstances due to bad design (For example, ASP.NET Webforms where we don’t actually have control over the creation of System.Web.Page), it becomes almost necessary to write code that looks something like this:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Page</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">private</span> IDataAccess dataAccess;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">private</span> CheeseFactory cheeseFactory;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Initialize()</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">this</span>.cheeseFactory = ObjectFactory.GetInstance&lt;CheeseFactory&gt;();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">this</span>.dataAccess = ObjectFactory.GetInstance&lt;DataAccess&gt;();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        var cheese = cheeseFactory.CreateCheese(<span style="color: #006080;">"smelly"</span>);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> BeginRequest()</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        var articles = dataAccess.GetArticles(100, 300);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #008000;">// Data binding</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>
<p>In this example, we are making several calls out to the container to resolve some dependencies for our Page class – the problems with this are immediately obvious. These are hidden dependencies, we can’t know from looking at the class from the outside what it needs from the container, and testing will therefore get sticky and our system will be harder to maintain.</p>
<p>This, is service location, and this is evil – I’m not disagreeing with this and I think we’d be hard pushed to find anybody who thinks the above code is a good idea. When people say “Service location is evil”, they are thinking of the above example. </p>
<p>Here is another expression that tends to be shouted out quite loudly – “You should only be calling your container in one place in your application” – this expression has come because if you are using your IOC container for DI you should be able to construct your entire application from the “root” with a single request.</p>
<p><strong>Moving beyond using your IOC for DI</strong></p>
<p>Now here is the thing – modern IOC containers like StructureMap are moving beyond simply providing the facility to inject dependencies into our classes – they’re venturing into discovery territory, having the ability to automatically wire up concrete implementations to interfaces via convention is just the start of things – they can also be used to find all the implementations of say “IPlugin” and do something with them – this is an extension of their original purpose.</p>
<p>When I start using my IOC container to compose these plug-in systems, I do so because I want those plug-ins and their dependencies to also have the advantage of having their dependencies resolved and injected via their constructors without those implementers knowing how that works.</p>
<p>I could use MEF for some of this, but at this point I am already using a tool that will not only do a good job of discovery, but will also resolve all the dependencies set up in our boot-strapper - MEF as it currently stands does not make a good IOC container and its primary job is discovery which last time I checked was still worked via a WTF mess of attribute soup (I massively prefer those almighty conventions).</p>
<p>I therefore come to the following snippet of code taken from the RavenGallery project:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> CommandInvoker : ICommandInvoker</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">private</span> IContainer container;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">private</span> IDocumentSession documentSession;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> CommandInvoker(IContainer container, IDocumentSession documentSession)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         <span style="color: #0000ff;">this</span>.container = container;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         <span style="color: #0000ff;">this</span>.documentSession = documentSession;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Execute&lt;T&gt;(T command)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         var handler = container.GetInstance&lt;ICommandHandler&lt;T&gt;&gt;();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         handler.Handle(command);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         documentSession.SaveChanges();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> }</pre><!--CRLF--></div></div>
<p>(Ignoring that this command handler is also in charge of the Unit of Work), the takeaway point is that I’m passing in the container and using it to find a command handler for the command that has been passed in. </p>
<p>Standard stuff really, so if I pass in a comand where T is RegisterNewUserCommand ala</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> RegisterNewUserCommand</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Username</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        get;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">private</span> set;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Password</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        get;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">private</span> set;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> RegisterNewUserCommand(<span style="color: #0000ff;">string</span> username, <span style="color: #0000ff;">string</span> password)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">this</span>.Username = username;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">this</span>.Password = password;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>
<p>Then the following type will be resolved</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> RegisterNewUserCommandHandler : ICommandHandler&lt;RegisterNewUserCommand&gt;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">private</span> IUserRepository userRepository;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> RegisterNewUserCommandHandler(IUserRepository userRepository)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">this</span>.userRepository = userRepository;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Handle(RegisterNewUserCommand command)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        User newUser = <span style="color: #0000ff;">new</span> User(command.Username, command.Password);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        userRepository.Add(newUser);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>
<p>And all because in my StructureMap configuration I called</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">s.ConnectImplementationsToTypesClosing(<span style="color: #0000ff;">typeof</span> (ICommandHandler&lt;&gt;));</pre><!--CRLF--></div></div>
<p><strong>Hold on, that’s service location!! You’re calling into the container directly!!</strong></p>
<p>Yes, and you know what – I still sleep well at night.</p>
<ul>
<li>I could I guess have the equivalent to MEFs [ImportMany] on my invoker (urgh) </li>
<li>I could write the code to resolve those implementers myself (A potentially non-trivial task) </li>
<li>I could wrap up IContainer with my own type (Not worth it) </li></ul>
<p>Going back to our example of <em>why</em> service location is bad, this example has nothing to do with that. When using your IOC container for nothing beyond plain old DI then sure – 99.999% of the time you’re doing it wrong if you end up with service location – but when you move into the territory of using the IOC container for discovery and run-time resolution there is little to no benefit to trying to work around a call into the container which – by the way – does a really good job of it already.</p>
<p>At this point we’re in the glue of our application, our infrastructure and we’re using the container as another piece of infrastructure – not as a workaround to avoid injecting our dependencies explicitly.</p>
<p>This is elegant and just works, I don’t think the “rule” applies in this kind of situation and I’m not the only one who seems to thinks so.</p>
<p>There is a difference in my mind therefore, between service location and dynamic dependency resolution. (Feel free to give me some proper words to put in here folks, my terminology-fu is <em>weak</em>)</p>
<p><strong>A side note – ASP.NET MVC3</strong></p>
<p>There are some complaints that ASP.NET MVC uses the container as a service locator – primarily because a single web request results in quite a few calls to the container from all over the place. This occurs because support for it has just been bolted on as an afterthought to appease the masses who complained that various aspects of ASP.NET MVC were untestable.</p>
<p>It’s not <em>quite</em> the same thing as this, there are a number of places in the framework where had the framework been built around the notion of composition in the first place we wouldn’t need all those calls – but really, I can’t say I have too huge a problem with this either, it’s not an awful compromise around a framework that has already gone down an awkward path and has needed to rectify it in a simple and backwards compatible a manner as possible. </p>
<p><strong>Another side note</strong></p>
<p>I’m not entirely sure that creating our entire application hierarchy with an IOC container is actually a Good Thing, and I’m moving away from it in my more recent explorations – but that’s a discussion best left to the GOOS group and for another time.</p>
	]]></description><link>http://codeofrob.com/entries/service-location-is-not-always-evil.html</link><guid isPermaLink="true">http://codeofrob.com/entries/service-location-is-not-always-evil.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 02 Feb 2011 13:45:00 GMT</pubDate></item><item><title><![CDATA[My DDD9 Experience (and slides from my talks)]]></title><description><![CDATA[
		Saturday saw the 9th Developer Developer Developer community event happen at the Microsoft Campus in Reading, a free event that only 350 people can fit into, and which "sold out" in 12 minutes (A number that keeps going down year by year).<br>
<br>
The sheer number of talks submitted this year meant there was some real competition for spaces as speakers as well - which resulted in probably the best selection of talks I can remember in DDD history.<br>
<br>
The sessions I attended were:<br>
<br>
<span style="font-weight: bold;">Async C#5 with Liam Westley</span><br>
An unusual choice for me, I usually avoid "new X in Y" sessions like the plague, as by the time the features actually come out I'm already bored of them and don't end up taking the time to work out what's actually changed in the finished version. I've not really touched the Async bits though and having not yet seem Liam talk and the other interesting alternative being Gary Short who I've seen far too many times (more than once) made this the obvious choice.<br>
<br>
This was a well rehearsed session, and I took away a few things - primarily that I can't have a problem with how async has been implemented if I like the yield keyword (and I like the yield keyword), and that it is more to do with dealing with avoiding blocking operations than managing thread complexity (or something to that end). Also that apparently the biggest debate apparently revolves around what name the keywords should have...<br>
<br>
<br>
<span style="font-weight: bold;">Monads with Mike Hadlow</span><br style="font-weight: bold;">
Mike has been rattling on about Monads on his blog for a while now, and I've avoided reading it because I knew he was going to come talk about them at DDD9 - this was definitely my kind of talk and I've come away knowing what Monads are in computer science terms, although I'm still struggling to see why I'd want the overhead of dealing with them directly outside of LINQ in C# I'll be going back and checking out his blog to find out. <br>
<br>
<span style="font-style: italic;">Shocking confession, gasp - I didn't know what monads were - a crime I'm sure!</span><br>
<br>
<span style="font-weight: bold;">RavenDB with Rob Ashton</span><br>
I'm actually quite disappointed with the way the session turned out - given how many times I've given this talk I should have done better, it didn't feel quite <span style="font-style: italic;">right</span> for some reason - and I rather wished I'd been next door to hear Mark Rendle talk about some of the crazy things he's doing in C#· :-)<br>
<br>
<span style="font-style: italic;">Lunch</span><span style="font-weight: bold;"> </span><span style="font-style: italic;">Grok Talks</span><br>
I like grok talks, I didn't realise how short lunch was and I thought they needed some padding so I proposed a talk on CUDA, turns out I needn't have bothered as we actually ran out of time to get through them all.<br>
<br>
<span style="font-weight: bold;">Some silverlight stuff with Visio with Dave McHahon</span><br>
I didn't see any silverlight in this grok, so I guess I must have missed that - I did see some data driven stuff you can do with visio which apparently is fun if you're into such things ;-). I learned that it is possible so I count that as a win.<br>
<br>
<span style="font-weight: bold;">A grok to CUDA C with Rob Ashton</span><br>
I tried to cover everything I knew about CUDA C in 5 minutes, I kept asking how many people were following me over the 5 minutes and it was entertaining to watch the hands drop over time - I've submitted a full on hour of this to DDD Scotland if people are interested in seeing it done at a slower pace ;-)<br>
<br>
<span style="font-weight: bold;">IronRuby with Windows Phone 7 with @slodge</span><br>
This is just a cool topic - not relevant to me at all - but really good to see somebody talking about something like this!<br>
<br>
After lunch, it was back to the normal sessions:<br>
<br>
<span style="font-weight: bold;">What's new with ASP.NET MVC 3 with Andy Gibson</span><br>
I can't say I left this talk excited about ASP.NET MVC 3 - but that's more of an indication of my feelings towards the technology than the talk itself which was great<br>
<br>
I didn't actually attend the next session, I needed a break and drifted between the various sessions looking in from behind - I spent most of my time in <span style="font-weight: bold;">Colin Gemmell's .NET to Rails story, </span>which was superbly presented from the look of things, enthusiastic and well put across.<br>
<br>
<span style="font-weight: bold;">Introduction to Powershell with James Boother</span><br>
I don't tend to do Powershell, if I do any sort of scripting it's generally with shell script or Python - but it was nice to see why people are enthusiastic about Powershell - although the verbosity of some of the commands left me a bit scared - what's wrong with plain old tail -f? ;-)<br>
<br>
Anyway, that was a superb day, I can't believe all those sessions actually fitted into a single Saturday <span style="font-weight: bold;"><span style="font-style: italic;">and</span> <span style="font-weight: bold;"></span></span>was free. Here is to DDD10 being an equally excellent event. Congratulations to all who were involved in the organisation - very slick.<br>
<br>
<span style="font-weight: bold;">My slides and example code</span><br>
I've uploaded them to <a href="https://github.com/robashton/talks/tree/master/DDD9">https://github.com/robashton/talks/tree/master/DDD9</a>
	]]></description><link>http://codeofrob.com/entries/my-ddd9-experience-and-slides-from-my-talks.html</link><guid isPermaLink="true">http://codeofrob.com/entries/my-ddd9-experience-and-slides-from-my-talks.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 31 Jan 2011 10:59:00 GMT</pubDate></item><item><title><![CDATA[CUDA - A basic parallelised task]]></title><description><![CDATA[
		<p>Source for this entry can be found at: <a href="https://github.com/NeilRobbins/CudaHack/tree/master/arrayscalar">https://github.com/NeilRobbins/CudaHack/tree/master/arrayscalar</a></p>

<p>In the last post, I demonstrated that you had</p> <ul> <li>System memory which is not accessible to the GPU </li> <li>Device memory which is not accessible to&nbsp; the CPU </li> <li>User defined methods marked with __global__ called from the CPU to run on the device </li></ul> <p>We called that method and executed some code on the server to do a really trivial task - giving us no benefit at all (apart from perhaps treating the GPU as "yet another CPU" in our machine).</p> <p>The GPU is NOT just an additional CPU though, it has an entirely different architecture (to my understanding), which effectively boils down to that it was originally created for the single purpose of being able to perform a series of mathematical operations on a large set of data in parallel. </p> <p>Let’s take a trivial example, again on the CPU:</p> <div id="codeSnippetWrapper"> <div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">void</span> multiplyNumbersByAScalar(<span style="color: #0000ff;">float</span>[] numbers, <span style="color: #0000ff;">int</span> length, <span style="color: #0000ff;">float</span> scalar)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">int</span> x = 0 ; x &lt; length ; x++){</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        numbers[x] = numbers[x] * scalar;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>

<p>The key aspect of this operation to note, is that each result in that array is achieved independently of any others – that is, instead of performing a loop in serial, this task could easily be parallelised. In C# it looks something like this:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">numbers.AsParallel().Select(x=&gt; x * scalar).ToArray();</pre><!--CRLF--></div></div>
<p>The problem with the above, is that it is only taking advantage of the CPU, and the benefits very seldom outweigh the overhead of setting up the parallel operation in the first place. Parallelisation is only really useful when you have sets of data large enough to justify it, and hardware capable of massively parallelising that task rather than say, creating 2-3 threads for it. </p>
<p>Anyway, as in the last entry, let’s slowly start to modify this method and get it running on the GPU, first up let’s look at how we’re actually going to invoke this method – this is what it looks like in our CPU implementation:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">float</span> numbers[] = { 0, 1, 2, 3, 4, 5 };</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">multiplyNumbersByAScalar( numbers, 6, 2.0f );</pre><!--CRLF--></div></div>
<p>First thing of note, is that we can’t pass numbers into our GPU implementation when we write it, it is declared in system memory – so our first job is to create a buffer on the device and copy our original data into that buffer:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">float</span> numbersInSystemMemory[] = { 0, 1, 2 , 3 , 4 , 5 , 6 ,7 ,8 , 9};</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">float</span>* numbersInDeviceMemory;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #008000;">// Allocate some memory on the device</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">cudaMalloc( (<span style="color: #0000ff;">void</span>**)&amp;numbersInDeviceMemory, <span style="color: #0000ff;">sizeof</span>(<span style="color: #0000ff;">float</span>) * 10);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #008000;">// And upload our data from system memory to device memory</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">cudaMemcpy( numbersInDeviceMemory, numbersInSystemMemory, <span style="color: #0000ff;">sizeof</span>(<span style="color: #0000ff;">float</span>) * 10, cudaMemcpyHostToDevice );</pre><!--CRLF--></div></div>
<p>Next thing up, is something we glossed over in the last entry – the numbers inside the strange &lt;&lt;&lt;1,1&gt;&gt;&gt; syntax for invoking the global method.</p>
<p>Without going into too much detail, it is this syntax and those numbers that determine first</p>
<ul>
<li>How many “blocks” to separate the task into</li>
<li>How many “threads” to use per “block”</li></ul>
<p>Ignoring threads for now, a&nbsp; good first step would be to say that as we have 10 numbers, we can split our operation across 10 blocks, and parallelise it that way, like so:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">multiplyNumbersByAScalar&lt;&lt;&lt;10,1&gt;&gt;&gt;(numbersInDeviceMemory, 2.0f);</pre><!--CRLF--></div></div>

<p>Now, you’ll notice I’ve dropped the “length” parameter into the function call – and that’s because we need to perform a small change to our original method definition. </p>
<p>In our CPU implementation, the method itself was responsible for iterating through the array and performing the calculations – in our GPU implementation, the iteration task has been replaced by a parallelisation task and the GPU is&nbsp; going to be responsible for calling our method however many times (per block/thread) is necessary, so check this out:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">__global__ <span style="color: #0000ff;">void</span> multiplyNumbersByAScalar(<span style="color: #0000ff;">float</span> numbers[], <span style="color: #0000ff;">float</span> scalar) {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">int</span> x = blockIdx.x;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        numbers[x] = numbers[x] * scalar;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>

<p>First up, we already know about __global__ as a way of allowing our CPU code to invoke GPU code, what <em>should</em> stand out here is we have gotten ‘x’ from a magical local variable that hasn’t actually been declared anywhere. This is another NVCC peculiarity, and this has come from the numbers we used inside the angle brackets in order to set up the call in the first place.</p>
<p>The method will get called 10 times, with x being every value between 0 and 9 inclusive – and in parallel. Because we told it to.</p>
<p>BlockIdx is actually a vector, containing x y and z – and that gives us the ability to divide up our parallel operation in a multitude of ways that make sense to our logic – I’ll talk more about that in the coming entries.</p>
<p>Our entire program therefore looks something like this:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">__global__ <span style="color: #0000ff;">void</span> multiplyNumbersByAScalar(<span style="color: #0000ff;">float</span> numbers[], <span style="color: #0000ff;">float</span> scalar) {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #008000;">// So yeah, this magic variable is given to us by CUDA magic</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">int</span> x = blockIdx.x;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        numbers[x] = numbers[x] * scalar;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">int</span> main(<span style="color: #0000ff;">int</span> argc, <span style="color: #0000ff;">char</span>** args)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">float</span> numbersInSystemMemory[] = { 0, 1, 2 , 3 , 4 , 5 , 6 ,7 ,8 , 9};</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">float</span>* numbersInDeviceMemory;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #008000;">// Allocate memory on the device and upload our data to it</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        cudaMalloc( (<span style="color: #0000ff;">void</span>**)&amp;numbersInDeviceMemory, <span style="color: #0000ff;">sizeof</span>(<span style="color: #0000ff;">float</span>) * 10);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        cudaMemcpy( numbersInDeviceMemory, numbersInSystemMemory, <span style="color: #0000ff;">sizeof</span>(<span style="color: #0000ff;">float</span>) * 10, cudaMemcpyHostToDevice );</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #008000;">// Call the method 10 times with values of x between 0 and 9 inclusive</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        multiplyNumbersByAScalar&lt;&lt;&lt;10,1&gt;&gt;&gt;(numbersInDeviceMemory, 2.0f);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #008000;">// Copy the results back into system memory</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        cudaMemcpy(  numbersInSystemMemory, numbersInDeviceMemory, <span style="color: #0000ff;">sizeof</span>(<span style="color: #0000ff;">float</span>) * 10, cudaMemcpyDeviceToHost );</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #008000;">// And free the memory allocated</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        cudaFree( numbersInDeviceMemory );</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #008000;">// Standard C again</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">for</span>(<span style="color: #0000ff;">int</span> x = 0; x &lt; 10 ; x++){</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                printf(<span style="color: #006080;">"%f "</span>, numbersInSystemMemory[x]);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">return</span> 1;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>
Maximum value of x by the way, on my laptop is 65536 – now <em>that’s</em> what I call splitting my task up and parallelising it. On really large data sets having this kind of functionality is really powerful.
	]]></description><link>http://codeofrob.com/entries/cuda---a-basic-parallelised-task.html</link><guid isPermaLink="true">http://codeofrob.com/entries/cuda---a-basic-parallelised-task.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 21 Jan 2011 13:27:00 GMT</pubDate></item><item><title><![CDATA[CUDA - A brief looksee into the world of generalised GPU computing]]></title><description><![CDATA[
		<p>Code for this entry can be found on Github at: <a title="https://github.com/NeilRobbins/CudaHack/tree/master/1" href="https://github.com/NeilRobbins/CudaHack/tree/master/1">https://github.com/NeilRobbins/CudaHack/tree/master/1</a></p> <p>This weekend saw me ditch my normal routine and head into Belgium to visit @<a href="http://twitter.com/#!/neilrobbins">neilrobbins</a> for a couple of days coding against an Amazon EC2 Cluster GPU Compute instance – this is big stuff&nbsp; for the future and it’s nice to do something different (I’ve spent the past few weeks chasing up leads on jobs and generally not writing much code except at work).</p> <p>Rather than do our knockabout in a “cool” language like Ruby, our daily-life language (C#) or something else, we opted to stay old school and do our work in C to get a better feel for what is actually going on when talking to the GPU – as I have previously written shader code against DirectX (SM1 and SM2) and wanted to see what is so different.</p> <p><strong>NVCC and GCC</strong></p> <p>CUDA C is a bit different from ordinary C, in that you use a different compiler (NVCC) which takes the special CUDA variant of C and compiles it into standard object files which can be linked ordinarily against your typical GCC created object files.</p> <p>In our experiments, we kept a single file (main.cu) which we compiled and linked using NVCC,&nbsp; and decided to write our standard C and CUDA c next to each other and get on with things.</p> <p><strong>A simple C Routine</strong></p> <p>Rather than parallelise anything to begin with,&nbsp; we opted to see what happens when writing a simple bit of code to execute on the GPU, and how you pass data to it. Consider the following:</p> <div id="codeSnippetWrapper"> <div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">int</span> addTwoNumbers(<span style="color: #0000ff;">int</span> x, <span style="color: #0000ff;">int</span> y)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">return</span> x + y;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>
<p>Yeah, I really mean that simple. There are some things of note here, chiefly:</p>
<ul>
<li>We have to send data into the function (x and y) </li>
<li>We have to receive data from that function (the return value)</li></ul>
<p>Now, I said there were some differences if you want code to run on the GPU rather than the CPU</p>
<p><strong>Getting output from a GPU function</strong></p>
<p>First up, functions you define for running on the GPU seemingly have to be void – which leads us to the following version of this method:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">void</span> addTwoNumbers(<span style="color: #0000ff;">int</span> x, <span style="color: #0000ff;">int</span> y, <span style="color: #0000ff;">int</span>* output)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    *output = x + y;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>
<p>In this, we pass in a pointer to an area of memory to write to, and the two values to be added, we then write to that area of memory with the result of the operation. Standard fare really if you’re a C programmer and you’re au fait with pointers and that sort of thing.</p>
<p>Calling this method (still running it on the CPU) would then look something like this:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">int</span> result;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">addTwoNumbers(5,6, &amp;result);</pre><!--CRLF--></div></div>
<p>This is not all there is to it though, in the above example we are creating ‘result’ on system memory accessible to the CPU, if we pass this into a GPU method it won’t be able to see that data. We actually have to allocate memory on the GPU and pass a pointer to <strong><em>that</em></strong> in.</p>
<p>As a parallel of that, memory allocated on the GPU cannot be seen by code running on the CPU (obviously), so we start to look at the call to methods running on the GPU as remote, whereby we have to upload data to the other side of the remote call in order for that remote call to succeed. We also have to then download data from the other side to get the result.</p>
<p>This therefore gives us:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #008000;">// Created in system memory</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">int</span> cpuVisibleResult;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #008000;">// Just an uninitialized pointer</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">int</span>* gpuVisibleResult;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #008000;">// Initialize some memory and set the pointer to it</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">cudaMalloc( (<span style="color: #0000ff;">void</span>**)&amp;gpuVisibleResult , <span style="color: #0000ff;">sizeof</span>(<span style="color: #0000ff;">int</span>));</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #008000;">// TODO: Make the remote call</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #008000;">// Copy the result into CPU visible memory</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">cudaMemcpy(&amp;cpuVisibleResult, gpuVisibleResult, cudaMemcpyDeviceToHost);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #008000;">// TODO: Do stuff with the cpuVisibleResult</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #008000;">// Free that memory again</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">cudaFree( gpuVisibleResult );</pre><!--CRLF--></div></div>
<p>If you’re familiar with C you’ll recognise that there is a CUDA version of the standard malloc call to assign a block of memory and get a pointer to that memory, which does exactly the same thing but on the GPU.</p>
<p>There is one final thing we have to do in order to make that call, which is to attribute up the method so the CUDA compiler knows that it is designed to be ran over at the GPU side of things, this gives us the final version of our method:</p>
<p><strong>Actually being able to run the function on the GPU</strong></p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">__global__ <span style="color: #0000ff;">void</span> addTwoNumbers(<span style="color: #0000ff;">int</span> x, <span style="color: #0000ff;">int</span> y, <span style="color: #0000ff;">int</span>* output)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    *output = x + y;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>
<p>That __global__ attribute is a special CUDA thing telling the compiler that this is a method we can call from the host (CPU), which will run on the device (GPU).&nbsp; Invoking the method looks like this</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">addTwoNumbers&lt;&lt;&lt;1,1&gt;&gt;&gt;(2,5, gpuVisibleResult);</pre><!--CRLF--></div></div>
<p>The two 1s? Well, that’ll be explained in the next blog entry as I go through the examples we created when learning ourselves.</p>
	]]></description><link>http://codeofrob.com/entries/cuda---a-brief-looksee-into-the-world-of-generalised-gpu-computing.html</link><guid isPermaLink="true">http://codeofrob.com/entries/cuda---a-brief-looksee-into-the-world-of-generalised-gpu-computing.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 17 Jan 2011 15:13:00 GMT</pubDate></item><item><title><![CDATA[A word of advice for recruiters]]></title><description><![CDATA[
		<span style="font-style: italic;">With whispered apologies to my regular audience of developers who are not interested in a problem they are well aware of and we all know isn't going away any time soon.</span><br>
<br>
Dear miscellaneous recruiters/agents wishing to contact me,<br>
<br>
In general, in my day to day job hunt so far I have been going direct to the companies via contacts that I already have at those companies as there is a high likelihood I am interested in working at those companies.<br>
<br>
I get a <span style="font-style: italic;">lot</span> of e-mails from recruiters/agents wishing to tell me about "opportunities" they have available, and can I give them my number so they can call me at my convenience.<br>
<br>
The problem is, you never call at my convenience, you call me when I am eating lunch, or eating dinner, or I'm in a meeting, or I'm making coffee - and you generally call me to tell me about this "great position" where they are looking at moving from classic ASP to WebForms, but they have heard of this ASP.NET MVC thing and are definitely interested in <span style="font-style: italic;">talking</span> about better practises - and you know, I'm really not interested in a lot of that, and I'm even less interested in talking about them when I am doing something I actually want to do with my time.<br>
<br>
My standard response to these e-mails is to ask for a job spec, so I can at a glance see if the role is something I wish to pursue any further. This, I believe is standard practise for those versed in dealing with recruiters and agents, and I am pleased to see that most of you do then send through some scant information about the role, which is normally enough for me to decide it is not something I am currently interested in. <span style="font-style: italic;">This saves both me and you time and money, and makes me willing to further deal with you if you wish to e-mail me again in the future.<br>
<br>
</span>If you have more than one role you think I might be interested in, which is often the case, then sending them all through so I can again vet them in a similar and efficient manner<span style="font-style: italic;"> is what I would prefer happens.<br>
</span> <br>
If you do not send me information about the "opportunity" you are recruiting for, then I am going to believe one of two things:<br>
<br>
<ul>
    <li>There is no opportunity and you are just trying to harvest my details</li>
    <li>There is an opportunity, but you are so insecure about any value you might bring to either myself or the company that I probably don't want to be dealing with you</li>
</ul>
<br>
Again, this is all standard stuff that you will have heard of time and time again, what you don't want to happen is the following, because it is not helpful to anybody.<br>
<br>
I wouldn't ordinarily paste e-mail exchanges on the public internet, but I've removed all identifying information and this guy really rubbed me up the wrong way. I hope that is okay with most of you. I don't come across particularly well either in this exchange, and I'm not anonymous - I admit I got wound up by his attitude just a tad :-)<br>
<br>
<hr style="width: 100%; height: 2px;">
<div style="text-align: left; color: rgb(0, 0, 255);"><span style="font-weight: bold;">Recruiter</span><br>
Hi Rob, is there a good time to reach you to discuss an opportunity?&nbsp; <br>
Regards,<br>
[Snip]<br>
</div>
<br>
<span style="font-weight: bold; color: rgb(153, 51, 0);">Me</span><br style="color: rgb(153, 51, 0);">
<span style="color: rgb(153, 51, 0);"> Sure, but I don't usually give out my phone number unless I see real details about whatever the opportunity is :-)</span><br style="color: rgb(153, 51, 0);">
<br style="color: rgb(153, 51, 0);">
<span style="color: rgb(153, 51, 0);"> Regards,</span><br style="color: rgb(153, 51, 0);">
<br style="color: rgb(153, 51, 0);">
<span style="color: rgb(153, 51, 0);"> Rob</span><br>
<br>
<span style="font-weight: bold; color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);">Recruiter</span><br style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);">
<span style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);"> Hi Rob</span><br style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);">
<span style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);"> &nbsp;</span><br style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);">
<span style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);"> I hope that you take this the right way, but I don’t know you and therefore cannot trust you. Therefore,&nbsp; mailing you a couple of websites and job specs could be the equivalent of flushing Spring’s mortgage payments and school fees down the toilet.</span><br style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);">
<span style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);"> &nbsp;</span><br style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);">
<span style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);"> If you already have good penetration of the market and a nice offer in sight then I suggest you continue your current course, else a conversation between us could be useful.</span><br style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);">
<span style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);"> &nbsp;</span><br style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);">
<span style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);"> I’ll let you make the judgement.</span><br style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);">
<span style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);"> &nbsp;</span><br style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);">
<span style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);"> Regards</span><br style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);">
<span style="color: rgb(0, 0, 255); background-color: rgb(255, 255, 255);"> [Snip]</span><br>
<br>
<hr style="width: 100%; height: 2px;">
<br style="font-weight: bold;">
<span style="font-weight: bold;">Not an e-mail, just a comment on the above</span><br>
First up, you don't know me and cannot trust me? Trust goes both ways, I have to trust you if you are going to e-mail me and act as the agent between me and an employer. As far as I know, you are being paid off the back of selling me to a company, and you don't actually care whether I stay there or not - in fact it's probably better for you if I don't stay there and you can sell me down the river again at some point in the near future.<br>
<br>
I don't want to hear about your mortgage payments and school fees, I understand that recruiters get paid on commission and I don't want to hear bull-crap terms like "penetration of the market" in e-mail exchanges about looking for roles.<br>
<br>
I think my reply was quite restrained:<br>
<br>
<hr style="width: 100%; height: 2px;">
<span style="font-weight: bold; background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">Rob<br>
</span><span style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">Hmm, that's the first time time a recruiter has ever refused a request for more information.</span><br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<span style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);"> Honestly I don't know what you can't give me over e-mail that you have to give me over phone - if you're that worried I'll expend the effort required to go searching for the opportunity directly using whatever meager information about the role you guys normally end up giving then you are clearly are not confident in being able to provide enough value to either myself or the company to warrant your role in the affair. </span><br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<span style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);"> Sure, I'm doing great on finding work, I'll never normally say no to hearing about other opportunities though - I just draw the line at handing my phone number to recruiters/agents before hearing any details, because while I can easily set up Spam rules in my e-mail, I can't do likewise for phone.</span><br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<span style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);"> TLDR;</span><br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<span style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);"> If you aren't willing to tell me anything about the opportunity over e-mail, then I will indeed continue on my own course</span><br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<span style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);"> Thanks,</span><br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<br style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);">
<span style="background-color: rgb(255, 255, 255); color: rgb(153, 51, 0);"> Rob</span><hr style="width: 100%; height: 2px;">
<span style="font-weight: bold; color: rgb(0, 0, 255);">Recruiter</span><br style="color: rgb(0, 0, 255);">
<span style="color: rgb(0, 0, 255);"> Hi Rob</span><br style="color: rgb(0, 0, 255);">
<span style="color: rgb(0, 0, 255);"> &nbsp;</span><br style="color: rgb(0, 0, 255);">
<span style="color: rgb(0, 0, 255);"> Idea; how about just sending a CV then with telephone number removed? Another option would be to tell me where </span><span style="font-weight: bold; color: rgb(0, 0, 255);">locations</span><span style="color: rgb(0, 0, 255);"> you are willing to work, for how much </span><span style="font-weight: bold; color: rgb(0, 0, 255);">money</span><span style="color: rgb(0, 0, 255);"> and what type of </span><span style="font-weight: bold; color: rgb(0, 0, 255);">company</span><span style="color: rgb(0, 0, 255);">….</span><br style="color: rgb(0, 0, 255);">
<span style="color: rgb(0, 0, 255);"> &nbsp;</span><br style="color: rgb(0, 0, 255);">
<span style="color: rgb(0, 0, 255);"> Regards</span><br style="color: rgb(0, 0, 255);">
<span style="color: rgb(0, 0, 255);"> [Snip]</span><br>
<hr style="width: 100%; height: 2px;">
<span style="font-weight: bold; color: rgb(153, 51, 0);">Rob</span><br style="color: rgb(153, 51, 0);">
<span style="color: rgb(153, 51, 0);"> Okay, so the opportunity is actually the opportunity to get added to yet another recruiter's database so I can be hassled at any moment of the day with roles I'm likely not interested in.</span><br style="color: rgb(153, 51, 0);">
<br style="color: rgb(153, 51, 0);">
<span style="color: rgb(153, 51, 0);"> The reason I asked for information about the opportunity was because I wanted to avoid that, I can search for jobs on monster/etc just as well as the next human being and don't need/want somebody doing that on my behalf</span><br style="color: rgb(153, 51, 0);">
<br style="color: rgb(153, 51, 0);">
<span style="color: rgb(153, 51, 0);"> Sorry, I am really not interested - I recommend changing your tactics if you want to carry on paying that mortgage, because this sort of exchange does not give either of us any value</span><br style="color: rgb(153, 51, 0);">
<br>
<hr style="width: 100%; height: 2px;">
<br>
Past this point, I'm not going to reply any further as I am not interested in dealing with somebody who clearly doesn't have anything and is just looking to harvest my details for the future.<br>
<br>
Recruiters, please - stop doing this, it isn't helpful and just makes people like me dislike people like you. Like I said, I am pleased that vast majority of you respond with details about whatever role it is you are recruiting for - you will always get a response from me via e-mail letting you know <br>
<br>
<ul>
    <li>Why I am not interested</li>
    <li>What roles might be more suitable</li>
</ul>
<br>
Just don't waste my time and your time with exchanges like the above.<br>
<br>
Thanks for reading, and apologies again to my regular readers for ranting on this blog, normal service to resume shortly.
	]]></description><link>http://codeofrob.com/entries/a-word-of-advice-for-recruiters.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-word-of-advice-for-recruiters.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 12 Jan 2011 10:51:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - Document design with collections]]></title><description><![CDATA[
		<p>In my previous entry about a <a href="http://codeofrob.com/archive/2010/12/16/ravendb-stackoverflow-style-voting-with-live-projections.aspx">StackOverflow type system</a> we saw that I split out some of my large collections into their own documents, rather than persist them as part of the whole question document.</p>  <p>I have been asked since then what my rationale was when creating that example? In what situations might I take a collection from a document and persist each item in its own document? In what situations might I just store the collection inside the document that owns that collection?</p>  <p>There are disadvantages and advantages to either of these approaches, and&nbsp; these will impact you differently based on the ways in which you are likely to be using this data. </p>  <p><strong>Storing the collection inside the master document</strong></p>  <pre>
public class MasterDocument 
{ 
    // various Master properties + unique Id

    public ChildDocument[] Children{ get; set; }    
}

public class ChildDocument 
{ 
    // Child Document properties, no unique Id 
}</pre>

<ul>
  <li>Loading the master document and all the child documents is a single call to .Load in the client API (a single HTTP GET request). </li>

  <li>If the entire document is self contained, our write operations are on that entire document – you load the master along with all the children, and make the changes desired to that entire document </li>

  <li>If we have more than one user potentially changing this document (IE, one adding items to the collection, and another editing the properties on the master), then we have to resort to PATCH operations </li>

  <li>Deleting the master document means deleting all the children too, with a single operation </li>
</ul>

<p><strong>Storing the collection as separate documents that reference the master document</strong></p>

<pre>
public class MasterDocument 
{ 
    // various master properties + unique Id 
    //  Children are not stored or referenced here    
}

public class ChildDocument 
{ 
    // Unique id 
    // Child Document properties

    // Reference to the master document from here 
    public string ParentId { get; set; } 
}</pre>

<ul>
  <li>Loading the master document AND all the children is at least two operations, one call to .Load for the master document, and one call to Query (against an index looking at ParentId) – this does however mean we can easily page through the children in large collections </li>

  <li>The parents and children can easily be separately loaded and separately edited </li>

  <li>Adding new children can be done at the same time as editing the master document, without resorting to the PATCH operations </li>

  <li>Deleting the master document and all children does mean doing a set based operation (which is possible in RavenDB – even atomically) </li>
</ul>

<ul></ul>

<ul></ul>

<ul></ul>

<ul></ul>

<ul></ul>

<ul></ul>

<ul></ul>

<p>&nbsp;</p>

<p><strong>So which one do I use then?</strong></p>

<p>At first glance, the second option seems the most flexible but it would be a mistake to make the decision to use this all the time.</p>

<p>Think about your transaction boundaries, who is going to be editing this document? It’s not <em>just</em> about the size of the collection – we can happily store a thousand items on a single document if they actually belong to that document and you’re likely to be editing them as <em>part</em> of that document (This is an unlikely scenario).</p>

<p>Let’s look at some examples and clarify further:</p>

<p><strong><em>Stackoverflow – the question and its answers (or the votes for a question, or the votes for an answer)</em></strong></p>

<p>In my StackOverflow example, we had many users potentially adding votes to a single question or answer, and we had many users potentially adding answers to a question – this is alongside the original user potentially editing the question or answer.</p>

<p>Without resorting to patch operations we have a concurrency problem here, you don’t want to lock the master document just because children are being added, and in fact you’d probably never edit the master document at the same time as adding a child and want to do that in the same transaction. It makes sense therefore to store these documents separately&nbsp; and allow all these operations to just take place.</p>

<p><strong><em>The shopping basket and its items</em></strong></p>

<p>You’re doing your shopping on Amazon, you are adding references to products to your shopping basket perhaps de-normalizing data while you do this (the price at the time of adding it perhaps, “The price of this object has changed since you added it to the basket”).</p>

<p>Each of those shopping cart items are part of that shopping cart – you aren’t going to edit those items separately as their own concerns, they <em>are</em> the shopping cart so to speak and thus they belong as part of the document.</p>

<p><strong><em>The blog and its comments</em></strong></p>

<p>Again, you are going to have people add comments independently of editing the blog, it doesn’t matter if you are expecting thousands of comments or just 1-2, they are separate concerns for the most part so store them as separate documents.</p>

<p><strong><em>A recipe and its ingredients</em></strong></p>

<p>This is similar to the shopping basket in that we <em>might</em> have references to actual ingredients in the collection, but store things like the amounts and other extra meta data on the collection item. We’ll most likely be editing these ingredients as part of the recipe, they belong on the document itself.</p>

<p><strong>Where does this leave us then?</strong></p>

<p>It is fairly clear that this is not a question of “one to many” vs “one to few”, no where here have I ended up talking about the quantity of items in the collection (although it is true that if you do have thousands of items you might wish to store them separately for performance reasons in either scenario).</p>

<p>It is more a matter of thinking about the operations you are likely to perform on those documents and how you’d like those operations to be enacted on your data. </p>

<p>Find the transaction boundaries and you find your documents.</p>

<p><strong>What happened to my root aggregates?</strong></p>

<p>So most people these days like to say they’re practising some form of DDD, so let’s talk in that language briefly – while it is true that for the most part you can map one to one a document with its root aggregate, this isn’t always going to be the case.</p>

<p>You’re nearly <em>always</em> going to have this problem when you are trying to tie a conceptual entity and its <em>behaviour</em> directly to the manner in which it is persisted as <em>data</em>. Using a document database reduces this mismatch quite a lot – but in the complex models with interesting behaviour where DDD actually becomes useful, you most likely aren’t going to be talking about data, and if you use a document database to do any form of persistence this will most likely be done separately to the entities themselves.</p>

<p>My advice? Don’t worry too much about this – persist your data, stick behaviour on your documents where it makes sense to and get on with life. The language is still useful as a way of communicating intent, but you’re not going to see me using it too much if I am working with data in this way.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---document-design-with-collections.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---document-design-with-collections.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 21 Dec 2010 15:09:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - StackOverflow style voting with Live Projections]]></title><description><![CDATA[
		<p>Going all StackOverflow for a moment, let’s pretend I have a class structure that looks something like this:</p> <div id="codeSnippetWrapper"> <div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> User</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Id { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> DisplayName { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Question</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> { </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Id { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> UserId { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Title { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Content{ get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> QuestionVote</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> QuestionId { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> Delta { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Answer</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> UserId { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> QuestionId { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Content { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AnswerVote </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> QuestionId { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> AnswerId { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> Delta { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"> }</pre><!--CRLF--></div></div>
<p>I’ve removed all the “other” stuff that we might have on those classes to keep the relationships simple, but essentially we have a user, and users can add answers to questions, and those questions have&nbsp; votes added to them.</p>
<p><em>Note that these are all separate documents, we don’t add votes to the answer (there are potentially thousands of them), and same goes for answers to questions.</em></p>
<p>When viewing a page in StackOverflow, you are given the question (and its score), with all the relevant data from perhaps the user who asked that question and other such data from other documents.</p>
<p>You are also given a list of comments, ordered by how many positive votes they have, again with relevant information from the user as well as information in that comment.</p>
<p>In a relational store you probably don’t want to be doing these aggregations every page load, and you don’t want to be doing all those joins either -&nbsp; I haven’t actually got any insight into how the StackOverflow database is put together, but I’m going to guess that they probably have some de-normalisation going on here, or they have a separate read store or caching system. (Or they have some seriously crap-hot database servers)</p>
<p>There are two queries here on this page, one of them is a query to get the question and its vote total, and the other is a query to get a page of comments against that&nbsp; question with their vote totals.</p>
<p>These present themselves as two projections:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> QuestionView</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> QuestionId { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> UserDisplayName { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> QuestionTitle { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> QuestionContent { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> VoteTotal { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> AnswerViewItem</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> QuestionId { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> AnswerId { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Content { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> UserId { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> UserDisplayName { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> VoteTotal { get; set; }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>
<p>Note that we’re pulling in information from across multiple documents here, and we’re doing an aggregation in both of these views (We’re counting the total deltas of the votes that have been made for a specific question/comment – we’re doing a group by on QuestionId/CommentId), and then pulling in data from other documents.</p>
<p>Now, aggregations in a document database like Raven or Couch mean doing a map/reduce, which mean defining an index – but what are we defining that index against?</p>
<p>What we actually <em>want</em> is information pertaining to a question or comment, but what we want to do an aggregation on are the <em>votes</em>, so we define the index against the votes.</p>
<p>Let’s start with an index to get all the information for a question</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> QuestionWithVoteTotalIndex : AbstractIndexCreationTask&lt;QuestionVote, QuestionView&gt;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> QuestionWithVoteTotalIndex()</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        Map = docs =&gt; from doc <span style="color: #0000ff;">in</span> docs</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                      select <span style="color: #0000ff;">new</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                      {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                          QuestionId = doc.QuestionId,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                          VoteTotal = doc.Delta</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                      };</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>
<p>We define an index against <em>QuestionVote, </em>because that’s what we’re aggregating – and we’re creating a QuestionView from that index (So,&nbsp; AbstractIndexCreationTask&lt;QuestionVote, QuestionView&gt; )</p>
<p>We can then do a reduce on QuestionId and work out whether it has minus/positive/etc vote totals</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">Reduce = mapped =&gt; from map <span style="color: #0000ff;">in</span> mapped</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                   group map by map.QuestionId into g</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                   select <span style="color: #0000ff;">new</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                   {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                       QuestionId = g.Key,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                       VoteTotal = g.Sum(x=&gt;x.VoteTotal)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                   };</pre><!--CRLF--></div></div>
<p>And then finally, we can use those reduced results and pull in all the other information (like the question we’re actually looking at) with a live projection:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">TransformResults = (database, results) =&gt;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    from result <span style="color: #0000ff;">in</span> results</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    let question = database.Load&lt;Question&gt;(result.QuestionId)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    let user = database.Load&lt;User&gt;(question.UserId)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    select <span style="color: #0000ff;">new</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        QuestionId = result.QuestionId,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        UserDisplayName = user.DisplayName,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        QuestionTitle = question.Title,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        QuestionContent = question.Content,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        VoteTotal = result.VoteTotal</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    };</pre><!--CRLF--></div></div>
<p>Querying this is then just a matter of asking the session for the view by QuestionId</p>






<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">var questionInfo = session.Query&lt;QuestionView, QuestionWithVoteTotalIndex&gt;()</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                    .Where(x =&gt; x.QuestionId == questionId)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                    .SingleOrDefault();</pre><!--CRLF--></div></div>

<p>Getting a page-able list of comments alongside this, complete with their totals and information about who posted it would then look something like this:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Answers_ByQuestion : AbstractIndexCreationTask&lt;AnswerVote, AnswerViewItem&gt;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    <span style="color: #0000ff;">public</span> Answers_ByQuestion()</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        Map = docs =&gt; from doc <span style="color: #0000ff;">in</span> docs</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                      select <span style="color: #0000ff;">new</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                      {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                          AnswerId = doc.AnswerId,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                          QuestionId = doc.QuestionId,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                          VoteTotal = doc.Delta</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                      };</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        Reduce = mapped =&gt; from map <span style="color: #0000ff;">in</span> mapped</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                           group map by <span style="color: #0000ff;">new</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                           {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                               map.QuestionId,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                               map.AnswerId</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                           } into g</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                           select <span style="color: #0000ff;">new</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                           {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                               AnswerId = g.Key.AnswerId,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                               QuestionId = g.Key.QuestionId,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                               VoteTotal = g.Sum(x =&gt; x.VoteTotal)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                           };</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        TransformResults = (database, results) =&gt;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">            from result <span style="color: #0000ff;">in</span> results</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">            let answer = database.Load&lt;Answer&gt;(result.AnswerId)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">            let user = database.Load&lt;User&gt;(answer.UserId)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">            select <span style="color: #0000ff;">new</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">            {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                QuestionId = result.QuestionId,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                AnswerId = result.AnswerId,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                Content = answer.Content,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                UserId = answer.UserId,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                UserDisplayName = user.DisplayName,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                VoteTotal = result.VoteTotal</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">            };</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">this</span>.SortOptions.Add(x =&gt; x.VoteTotal, Raven.Database.Indexing.SortOptions.Int);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--></div></div>

<p>With a query of</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">var questionAnswers = session.Query&lt;AnswerViewItem, Answers_ByQuestion&gt;()</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    .Where(x =&gt; x.QuestionId == questionId)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    .OrderByDescending(x =&gt; x.VoteTotal)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    .Take(10)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">    .ToArray();</pre><!--CRLF--></div></div>

<p>Note: In the index we told RavenDB how we’d like to treat VoteTotal when sorting, and that also then gave us the functionality of sorting the returned answers by popularity and page through them.</p>
<p><strong>So what does this give us?</strong></p>
<p>This is actually a remarkably simple way to generate views for web pages directly from our primary data store, without having to introduce the complexity of our own caching layers, our own de-normalised views or any other architectural clever-bits just in order to get a site that _works_.</p>
<p>All of these indexes are pre-computed, we’re not doing the calculations at read-time, our indexes are our read store, our documents are our write store. </p>
<p>This technique will work for nearly all situations where we want to display some sort of&nbsp; aggregation (total, average, etc) next to the document we actually wish to display – it won’t of course work for multiple aggregations, but because queries are so cheap in Raven, it isn’t going to harm you to do a couple of extra look-ups for that data.</p>
<p>Hurrah!</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---stackoverflow-style-voting-with-live-projections.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---stackoverflow-style-voting-with-live-projections.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 16 Dec 2010 10:34:00 GMT</pubDate></item><item><title><![CDATA[RavenDB on Mono]]></title><description><![CDATA[
		<p>So is it possible?</p> <p>Yes, it is.</p> <p>There, that was a short blog entry wasn’t it?</p> <p>I’ve patched RavenDB in a few places, both to workaround the bug/mismatch between Mono and Microsoft’s implementation of ThreadLocal.Value, dealing with the standard path-based issues and adding a couple of specific checks for Mono in the outer layers of the application (Did you know that Environment.UserInteractive is always false in Mono?)</p> <p>I’ve submitted the pull request, but if you <em>really</em> want to get RavenDB working on Mono <em>right now</em>, then I suggest you do the following:</p> <ul> <li>Download and install Mono 2.8 (Yup, you don’t need to build from source – hurrah) </li> <li>Pull my fork and branch of RavenDB for Mono <a title="https://github.com/robashton/ravendb/tree/mono" href="https://github.com/robashton/ravendb/tree/mono">https://github.com/robashton/ravendb/tree/mono</a> </li> <li>Run xBuild with the following arguments </li></ul> <div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; height: 36px; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper"> <div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">MONO_IOMAP=all xbuild /property:DocumentationFile=<span style="color: #006080;">''</span> /property:TreatWarningsAsErrors=<span style="color: #006080;">'false'</span> RavenDB.sln</pre><!--CRLF--></div></div>This will build RavenDB on Mono, so you don’t need Windows if you haven’t got it. 
<ul>
<li>Run Mono Raven.Server.exe </li>
<li>Proceed as normal </li></ul>
<p>I’ve tested the following configurations</p>
<ul>
<li>Raven.Server running as an HTTP process </li>
<li>Connecting to the Raven server from client code </li>
<li>Running RavenDB Embedded within an application </li>
<li>Running RavenDB Embedded with an HTTP server in an application </li></ul>
<p>Some caveats to this</p>
<ul>
<li>the xUnit tests currently hang if you don’t clean the test-bed every time you run them, this is likely a problem with the tests that need fixing </li>
<li>Basic functions appear to be fully capable, you don’t get DTC (Obviously), some sharding stuff appears to be a bit off and multi-tenancy seems to be a bit weird too.</li></ul>
<p>NB: This is unofficial support for Mono, it's a low priority as far as the core project goes, but I am eager to make this work</p>
<p><strong>Thanks and Attribution:</strong></p>
<p>Jérémie Laval (<a title="http://twitter.com/#!/jeremie_laval" href="http://twitter.com/#!/jeremie_laval">http://twitter.com/#!/jeremie_laval</a>) has been instrumental in moving this forwards with a heap of Mono know-how, the instructions on now to build on Mono have come from him, as have a number of fixes. He is currently working on some other issues with some failing tests too, looks like this ball is going to keep rolling!</p>
	]]></description><link>http://codeofrob.com/entries/ravendb-on-mono.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb-on-mono.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 14 Dec 2010 09:40:00 GMT</pubDate></item><item><title><![CDATA[Adventures in Mono]]></title><description><![CDATA[
		<p><em>In 24 hours I installed Ubuntu, downloaded the latest version of mono, fixed a bug in it and submitted a pull request – the whole process was really simple and I want to let everybody else know how simple it is so they might be inspired to do the same.</em></p>
<p><strong>In the beginning</strong></p>
<p>I took the decision this week to join the growing number of .NET developers who choose to run Linux, not for any ideological reasons in particular – but just to experience this side of the fence for the first time in a few years, catch up on what has changed and to get my code working over here in Mono.</p>
<p>To that end, I installed Ubuntu 10.04, installed VirtualBox with Windows 7 and Visual Studio, and then proceeded to start building my existing projects in mono to see how they fared. The great thing about Ubuntu is that it comes with Mono, and I haven’t got to do anything to kick-start this process. (Ooh, flame bait here)</p>
<p>My process for building my .NET projects is simply to execute the solution file with xbuild like so</p>
<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">xbuild myAmazingProject.Sln</pre><!--CRLF--></div></div>
<p>I started with my .NET 2.0 projects, and all but my largest work project built and executed on the version of Mono that ships with Ubuntu 10.04 (the current LTS) – that’s Mono 2.4 – this crashed the C# compiler in a number of places and therefore did not work.</p>
<p>In an effort to get this working I upgraded to Ubuntu 10.10 which gave me Mono 2.6.7, which fared better but still fell over in a number of other slightly different places.</p>
<p>I then decided to upgrade to 2.8, and found somebody who had set up a <a href="http://sourceforge.net/projects/mono-parallel/files/mono-2.8-parallel-environment.deb/download">script to install a parallel version of Mono</a> (without overwriting the system version – rather important for me as I was interested in not breaking my system through ignorance). This had the effect of getting my big failing work .NET 3.5 work project to build (On top of NH, SolrNet, Moq, MySQL, ASP.NET MVC etc – the usual suspects).</p>
<p><strong>Great, now for RavenDB</strong></p>
<p>RavenDB is always going to be an interesting one, it is written in C#4 on top of .NET 4.0 and uses a lot of the latest features in these technologies, the C#4 compiler hasn’t a hope of dealing with this, not even in 2.8 – and falls over with some fairly hairy messages.</p>
<p><em>There is no technical reason why RavenDB should not work on Linux</em>, and I’m not starting my Mono experience trying to fix C# compiler issues – so I pop into my Windows Virtual Box and do a RavenDB build in Visual Studio via the standard build scripts.</p>
<p>The server is a massive piece of kit, and in the 2.8 environment I set up typing something like this</p>
<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">mono Raven.Server.exe /ram</pre><!--CRLF--></div></div>
<p>Resulted in the square root of diddly squat occuring, asking mono to give me a verbose trace of what occurred with</p>
<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">mono Raven.Server.exe -v --trace /ram</pre><!--CRLF--></div></div>
<p>This left me with a large trace and none the wiser about what really went wrong. Back to basics then, eating an elephant and all that.</p>

<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main (<span style="color: #0000ff;">string</span>[] args)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         <span style="color: #0000ff;">using</span>(var store = <span style="color: #0000ff;">new</span> EmbeddableDocumentStore(){</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                 RunInMemory = <span style="color: #0000ff;">true</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         })</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                 store.Initialize();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--></div></div>Running the bare minimum for RavenDB, specifying in-memory so we’re definitely using the managed storage engine (not esent), and not even having manage the file aspect of this problem. I build this in MonoDevelop and run it under 2.8.

<p>This falls over with the useful error:</p>
<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">Unhandled Exception: System.MissingMemberException: The type being lazily initialized does not have a <span style="color: #0000ff;">public</span>, parameterless constructor.</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">  at System.Threading.LazyInitializer.GetDefaultCtorValue[IStorageActionsAccessor] () [0x00000] <span style="color: #0000ff;">in</span> &lt;filename unknown&gt;:0 </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">  at System.Threading.ThreadLocal`1+&lt;DataSlotCreator&gt;c__AnonStorey42[Raven.Database.Storage.IStorageActionsAccessor].&lt;&gt;m__45 () [0x00000] <span style="color: #0000ff;">in</span> &lt;filename unknown&gt;:0 </pre><!--CRLF--></div></div>
<p>This is clearly a bug in ThreadLocal&lt;T&gt;, and it is at this point I stop and take stock of the situation I find myself in</p>
<ul>
<li>I can fix RavenDB to compensate for Mono </li>
<li>I can fix Mono to get RavenDB working</li></ul>
<p>Let me tell you, option #1 is looking really appealing right now, I am <em>not</em> a Linux user and have survived this far into the process by being a dumb person clicking on buttons in Ubuntu and things somehow “just working” (Parallel Mono 2.8 environment included in that).</p>
<p>After consultation on Twitter, I am assured that the Mono team are friendly and that I’ll get plenty of help on IRC if I need it. I decide to take the plunge and go for Option #2.</p>
<p><strong>Running bleeding edge mono</strong></p>

<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">sudo apt-get install irrssi</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">irssi</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">/connect irc.gimp.net</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">/join #mono</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">How I mine for fish?</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--></div></div>Okay, I didn’t ask that, but what I did ask was 

<ul>
<li>What is the easiest way to get a hot/live copy of Mono, build it, and use it in parallel without overwriting the version that comes with Ubuntu</li></ul>
<p>I felt like an idiot for asking such an RTFM-answerable question, but thankfully as promised I got a friendly response pointing me to</p>
<p><a title="http://www.mono-project.com/Parallel_Mono_Environments" href="http://www.mono-project.com/Parallel_Mono_Environments">http://www.mono-project.com/Parallel_Mono_Environments</a></p>
<p><a title="http://mono-project.com/Compiling_Mono_From_Git" href="http://mono-project.com/Compiling_Mono_From_Git">http://mono-project.com/Compiling_Mono_From_Git</a></p>
<p>Not only two very good links (I’d not have found the first, I’m only now using the term “Parallel Mono Environments”) because I now know that’s what you call them, I also received good solid warnings about doing the right things in the right order to ensure that I built Mono to a secondary location and didn’t overwrite my Ubuntu version.</p>
<p>By following these two sets of instructions, it_just_worked, the process went something like this</p>
<p>vim ~/mono-git-environment</p>
<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">MONO_PREFIX=/opt/mono-git</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">GNOME_PREFIX=/usr</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">export</span> DYLD_LIBRARY_FALLBACK_PATH=$MONO_PREFIX/lib:$DYLD_LIBRARY_FALLBACK_PATH</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">export</span> LD_LIBRARY_PATH=$MONO_PREFIX/lib:$LD_LIBRARY_PATH</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">export</span> C_INCLUDE_PATH=$MONO_PREFIX/include:$GNOME_PREFIX/include</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">export</span> ACLOCAL_PATH=$MONO_PREFIX/share/aclocal</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">export</span> PKG_CONFIG_PATH=$MONO_PREFIX/lib/pkgconfig:$GNOME_PREFIX/lib/pkgconfig</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">export</span> PATH=$MONO_PREFIX/bin:$PATH</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">PS1="[mono] \w @ </pre><!--CRLF--></div></div>
<p>:wq!</p>
<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">source ~/mono-git-environment</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">git clone git:<span style="color: #008000;">//github.com/mono/mono.git</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">./autogen.sh –prefix=/opt/mono-git</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">make PROFILE=net_4_0 &amp;&amp; make install PROFILE=net_4_0</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--></div></div>
<p>There, I now have the latest version of mono and by typing </p>
<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">source ~/mono-git-environment </pre><!--CRLF--></div></div>
<p>At any time, whatever I run using mono will use this version of mono! I must admit, I messed it up at first and forgot the PROFILE=net_4_0 bit that I need if I want .NET 4 (which I do), and then I pasted the above script for setting up the mono git environment wrong and missed out the first two characters (oops), but on figuring out that it just worked!</p>
<p>The best thing about this, in order to get whatever everybody has been working on lately, I just do</p>

<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">source ~/mono-git-environment </pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">git pull</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">make PROFILE=net_4_0 &amp;&amp; make install PROFILE=net_4_0</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--></div></div>This is so exciting guys, I am literally dancing in my chair at the prospect of writing and modifying the mono class libraries this effortlessly.

<p><strong>Isolating the bug</strong></p>
<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">mono –v --trace bin/Debug/TestProject.exe &gt; log.txt</pre><!--CRLF--></div></div>
<p>This traces every method called during the process of executing my test project and gives me a giant file containing that information, I had to look up a vim cheatsheet for navigating and searching/paging through this mess.</p>
<p><a href="http://fear.the.codeofrob.com/monobug.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px;" title="tracelog" border="0" alt="tracelog" src="http://fear.the.codeofrob.com/monobug.png" width="830" height="486"></a></p>
<p>This didn’t really give me a lot of information beyond the error I got when running it the first time, but it did give me a history of calls made and a complete stack trace at the point of crashing.</p>
<p>This led me to the following method in RavenDB</p>
<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Batch(Action&lt;IStorageActionsAccessor&gt; action)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">       {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           <span style="color: #0000ff;">if</span> (disposed)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">               Trace.WriteLine(<span style="color: #006080;">"TransactionalStorage.Batch was called after it was disposed, call was ignored."</span>);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">               <span style="color: #0000ff;">return</span>; <span style="color: #008000;">// this may happen if someone is calling us from the finalizer thread, so we can't even throw on that</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           <span style="color: #0000ff;">if</span>(current.Value != <span style="color: #0000ff;">null</span>)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">               action(current.Value);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">               <span style="color: #0000ff;">return</span>;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           disposerLock.EnterReadLock();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           <span style="color: #0000ff;">try</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">               Interlocked.Exchange(<span style="color: #0000ff;">ref</span> lastUsageTime, DateTime.Now.ToBinary());</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">               <span style="color: #0000ff;">using</span> (tableStroage.BeginTransaction())</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">               {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                   var storageActionsAccessor = <span style="color: #0000ff;">new</span> StorageActionsAccessor(tableStroage, uuidGenerator, DocumentCodecs);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                   current.Value = storageActionsAccessor;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                   action(current.Value);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                   tableStroage.Commit();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                   storageActionsAccessor.InvokeOnCommit();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                   onCommit();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">               }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           <span style="color: #0000ff;">finally</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">               disposerLock.ExitReadLock();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">               current.Value = <span style="color: #0000ff;">null</span>;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">       }</pre><!--CRLF--></div></div>
<p>Mmm, tasty&nbsp; - I know that the exception occurs when&nbsp; trying to access the .Value property of the ThreadLocal&lt;ISomeInterface&gt;, so I start with the first instance of it and write a test program</p>

<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">class</span> MainClass</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main (<span style="color: #0000ff;">string</span>[] args)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           ThreadLocal&lt;IPointlessActions&gt; newLocal = <span style="color: #0000ff;">new</span> ThreadLocal&lt;IPointlessActions&gt;();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">           <span style="color: #0000ff;">bool</span> willThrowAnException = newLocal.Value == <span style="color: #0000ff;">null</span>;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">interface</span> IPointlessActions</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">        <span style="color: #0000ff;">void</span> DoSomething();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--></div></div>There we go, in Windows on the MS implementation of .NET, Value returns null if not initialized, and on Mono it throws an exception because it can’t find a default constructor for IPointlessActions (Well of course not, it’s an interface!)

<p><strong>Verifying that it is a bug</strong></p>
<p>Back to #mono on irc.gimp.net, I paste the above code example into pastebin, and link to the documentation for the class on MSDN.</p>
<p>We agree that it is probably a bug, and I get helpful feedback on where to start if I want to stand a chance of getting anything pulled into Mono (It’s a really trivial issue, and probably a really trivial fix, not worth the effort of pulling/merging anyway), I’m also advised to add a bugzilla for it on the mono site because that makes it easier to do changelogs.</p>
<p>This is all information that they’ve no doubt had to divulge numerous times to complete novices like myself, and I’m not getting a single snide remark or passive aggressive behaviour – very refreshing!</p>
<p><strong>Fixing the bug</strong></p>
<p>I add a bugzilla, and open two files in vim side by side, they are</p>
<p>mcs/class/corlib/System.Threading/ThreadLocal.cs</p>
<p>and</p>
<p>mcs/class/corlib/Test/System.Threading/ThreadLocalTests.cs</p>
<p>The first thing to do is write a test demonstrating the failing behaviour</p>
<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">[Test]</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">  <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> DefaultValueIsUsedIfNoInitializerSupplied()</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">  {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">          ThreadLocal&lt;IEnumerable&gt; local  = <span style="color: #0000ff;">new</span> ThreadLocal&lt;IEnumerable&gt;();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">          IEnumerable <span style="color: #0000ff;">value</span> = local.Value;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">          Assert.AreEqual(<span style="color: #0000ff;">null</span>, <span style="color: #0000ff;">value</span>);</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">  }</pre><!--CRLF--></div></div>
<p>I can then run the test by typing</p>
<p>make run-test FIXTURE=System.Threading.ThreadLocalTests PROFILE=net_4_0</p>
<p>On verifying the fail, I make the fix (passing in () =&gt; default(X) in the default constructor or something to that end), run the test again and push it up to github with</p>

<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">git commit –m “some fix message”</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">git push robashton</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--></div></div>and make a pull&nbsp; request which I link to from bugzilla, my work here is done!

<p><strong>Running RavenDB</strong></p>
<p>I do a build with</p>
<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">make PROFILE=net_4_0 &amp;&amp; make install PROFILE=net_4_0</pre><!--CRLF--></div></div>
<p>And re-run the in memory application, success – it works! I then check basic persistence</p>

<div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: 'Courier New', courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px;" id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;"><span style="color: #0000ff;">using</span>(var store = <span style="color: #0000ff;">new</span> EmbeddableDocumentStore(){</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         RunInMemory = <span style="color: #0000ff;">true</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">})</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">{</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         store.Initialize();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         <span style="color: #0000ff;">using</span>(var session = store.OpenSession()){</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                 session.Store(<span style="color: #0000ff;">new</span> {</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                         Id = <span style="color: #006080;">"Test/1"</span>,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                         FirstWord = <span style="color: #006080;">"Hello"</span>,</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                         SecondWorld = <span style="color: #006080;">"World"</span></pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                 });</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">                 session.SaveChanges();</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">         }</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">}</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px;">&nbsp;</pre><!--CRLF--></div></div>This runs with no problems, now I can continue writing tests that expose more and more of RavenDB until I am happy it is functioning as expected.

<p><strong>A direction for this</strong></p>
<ul>
<li>Get RavenDB embedded running in-memory (Built on Windows) </li>
<li>Get RavenDB embedded running off disk (Build on Windows) </li>
<li>Get RavenDB server running and being connected to by client on Windows/Linux (Build on Windows) </li>
<li>Get RavenDB Building on Linux</li></ul>
<p>I have no timeline for the above, I'm deliberately saving the hardest till last - and I strongly suspect I'll be relying on others taking up the strain where I struggle there, but I've heard good things about turnaround times on compiler bugs so I'm not worried about that</p>
<p>With the support I've seen from the mono community I've contacted so far, I don't have any doubt that this can be made to work as it should, great stuff</p>
	]]></description><link>http://codeofrob.com/entries/adventures-in-mono.html</link><guid isPermaLink="true">http://codeofrob.com/entries/adventures-in-mono.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 10 Dec 2010 11:14:00 GMT</pubDate></item><item><title><![CDATA[I have handed in my notice and am looking for a job]]></title><description><![CDATA[
		<p>Nothing much to say here really,&nbsp; I’m a reasonably competent .NET developer, have been working as a technical lead at the current place creating a new product that is due to pop any time now, it wasn’t what I wanted to do in the first place (although that discussion belongs in the pub over several beers) and I’ve only stuck it out as long as I have because:</p>  <ul>   <li>I can be a bit stubborn about trying to make things work</li>    <li>I have been a big wuss</li> </ul>  <p>I have three months notice to ride out and a <em>lot</em> of responsibility to handover, I would be happy working as a full time developer (lead or otherwise) for the right company, would possibly be happier contracting and moving around a bit – but am open to suggestions as to where my life should next lead me. </p>  <p>Please contact me via my form or on twitter at <a href="http://twitter.com/robashton">@robashton</a>&nbsp; if you have any suggestions/offers/requests for CV or whatever. There might be a delay in responding due to the deluge of good will I’ve already received from so many.</p>  <p>I am happy to relocate to most corners of the world or even tele-commute so please don’t hesitate to get in touch :)</p>  <p>Here is to the new adventure, assuming I actually find anything…</p>  <p>PS: It has been pointed out that I’m doing a lot of travelling and talking and educating at the moment and future employers might not be so accommodating of that – bonus points if you can be supportive about that!</p>
	]]></description><link>http://codeofrob.com/entries/i-have-handed-in-my-notice-and-am-looking-for-a-job.html</link><guid isPermaLink="true">http://codeofrob.com/entries/i-have-handed-in-my-notice-and-am-looking-for-a-job.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 30 Nov 2010 15:31:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - The Image Gallery Project (XVI) - Adding Edit Functionality (I)]]></title><description><![CDATA[
		<p>We have thus far covered the creation of new documents, and the querying of those documents to create views for specific pages in our system. We haven’t actually demonstrated the editing of existing documents and how that actually fits into the application lifecycle covered at the beginning of this series.</p>  <p>This series has been written with the intention of it being a full vertical slice through a modern web application using RavenDB, instead of just being a thin technical demo of RavenDB and we are going to look at how we might write an interface</p>  <p><strong>Moving away from CRUD</strong></p>  <p>A typical CRUD data screen might display all the fields for a document, and have a single save button at the end for dumping all of this data back into the store.</p>  <p>I’m not a big fan of this, we now live in the 21st century and have rich client functionality everywhere – not to mention that this in no way really captures the intent of the user and what it is they actually want to achieve.</p>  <p>We are therefore going to have a screen that displays all the data for a particular image, and allows the user to edit the fields in place. In doing this,&nbsp; our interface can send one-way commands via JSON and not have to rely on data being returned from the server – this is not only a great experience for the user, but allows us to keep our commands as one-way enactors of change.</p>  <p>For a further bit of fun, we will actually use the same screen to display the image to users who don’t own the image, but not allow changes to it if they aren’t meant to. We could then display “related” images to one side and allow further browsing from this point.</p>  <p>Okay, I admit we’re at risk of copying Flickr here, but I did say we were doing this as a largely real world project, and imitation is the finest form of flattery.</p>  <p><strong>The web bit</strong></p>  <p>Just like with our home-page image browser, we won’t be pre-populating a view model in the controller and will instead expose more JSON endpoints to retrieve data about a specific image and do more client-side template magic. The great thing about this is that it also gives us an API to expose to third parties with no extra effort. (Did I mention we were living in the 21st century?)</p>  <p>Here is the template used on my view page (Images/View.Spark)</p>  <div class="csharpcode">   <pre class="alt"><span class="kwrd">&lt;</span><span class="html">script</span> <span class="attr">id</span><span class="kwrd">="focused-image-template"</span> <span class="attr">type</span><span class="kwrd">="text/x-jquery-tmpl"</span><span class="kwrd">&gt;</span> </pre>

  <pre>  &lt;div <span class="kwrd">class</span>=<span class="str">"focused-image"</span>&gt; </pre>

  <pre class="alt">    &lt;h4 id=<span class="str">"title"</span>&gt;{{= Title}}&lt;/h4&gt; </pre>

  <pre>    &lt;img src=<span class="str">"/Resources/Image/{{= Filename}}"</span> alt=<span class="str">"{{= Title}}"</span> /&gt; </pre>

  <pre class="alt">    &lt;span id=<span class="str">"tags"</span>&gt;{{= Tags }}&lt;/span&gt; </pre>

  <pre>  &lt;/div&gt; </pre>

  <pre class="alt"><span class="kwrd">&lt;/</span><span class="html">script</span><span class="kwrd">&gt;</span></pre>

  <pre>&nbsp;</pre>

  <pre class="alt"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">id</span><span class="kwrd">="image-placeholder"</span><span class="kwrd">&gt;</span> </pre>

  <pre>    </pre>

  <pre class="alt"><span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span></pre>

  <pre>&nbsp;</pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>We can populate this on start-up in the same way we populated the image browser, by making a call to the server via JavaScript and asking for a ‘view’ based on the parameter in the query string.</p>

<p class="csharpcode">
  </p><pre class="alt">updateView: <span class="kwrd">function</span> (imageId) { </pre>

  <pre>        $.ajax({ </pre>

  <pre class="alt">        dataType: <span class="str">"json"</span>, </pre>

  <pre>        url: <span class="str">'/Image/_GetImage?imageId='</span> + imageId, </pre>

  <pre class="alt">        error: <span class="kwrd">function</span> (xhr, ajaxOptions) { </pre>

  <pre>            alert(xhr.status + <span class="str">':'</span> + xhr.responseText); </pre>

  <pre class="alt">        }, </pre>

  <pre>        success: <span class="kwrd">function</span> (data) { </pre>

  <pre class="alt">            $(<span class="str">'#image-placeholder'</span>).html(<span class="str">''</span>); </pre>

  <pre>            $(<span class="str">'#focused-image-template'</span>) </pre>

  <pre class="alt">                .tmpl(data) </pre>

  <pre>                .appendTo(<span class="str">'#image-placeholder'</span>);</pre>

  <pre class="alt">&nbsp;</pre>

  <pre>        } </pre>

  <pre class="alt">    }); </pre>

  <pre>}, </pre>

  <pre class="alt">&nbsp;</pre>


<p></p><style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Following this through, we have</p>

<p>&nbsp;</p>

<div class="csharpcode">
  <pre class="alt"><span class="kwrd">public</span> ActionResult _GetImage(ImageViewInputModel input) </pre>

  <pre>{ </pre>

  <pre class="alt">    var model = viewRepository.Load&lt;ImageViewInputModel, ImageView&gt;(input); </pre>

  <pre>    <span class="kwrd">return</span> Json(model, JsonRequestBehavior.AllowGet); </pre>

  <pre class="alt">} </pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>with</p>

<div class="csharpcode">
  <pre class="alt"><span class="kwrd">public</span> <span class="kwrd">class</span> ImageViewInputModel </pre>

  <pre>{ </pre>

  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">string</span> ImageId { get; set; } </pre>

  <pre>} </pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>and</p>

<div class="csharpcode">
  <pre class="alt"><span class="kwrd">public</span> <span class="kwrd">class</span> ImageView </pre>

  <pre>{ </pre>

  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">string</span> Filename { get; set; } </pre>

  <pre>    <span class="kwrd">public</span> <span class="kwrd">string</span>[] Tags { get; set; } </pre>

  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">string</span> Title { get; set; } </pre>

  <pre>} </pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>All that is left for us to do is create the view, and the ‘view’ functionality of this page will be complete.</p>

<p><strong>The RavenDB Bit</strong></p>

<p>Because we have the id of the document already, we don’t need to do any sort of query and can just request the document directly from the session, flattening it into the view we want.</p>

<p>The test (assuming I’ve saved a document with these properties)</p>

<div class="csharpcode">
  <pre class="alt"><span class="kwrd">using</span> (var s = Store.OpenSession()) </pre>

  <pre>{ </pre>

  <pre class="alt">    ImageViewFactory factory = <span class="kwrd">new</span> ImageViewFactory(s); </pre>

  <pre>    var results = factory.Load(<span class="kwrd">new</span> ImageViewInputModel() </pre>

  <pre class="alt">    { </pre>

  <pre>         ImageId = <span class="str">"knownId"</span> </pre>

  <pre class="alt">    });</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">    Assert.AreEqual(<span class="str">"title"</span>, results.Title); </pre>

  <pre>    Assert.AreEqual(<span class="str">"filename"</span>, results.Filename); </pre>

  <pre class="alt">    Assert.AreEqual(<span class="kwrd">new</span>[] { <span class="str">"tagOne"</span>, <span class="str">"tagTwo"</span> }, results.Tags); </pre>

  <pre>} </pre>

  <pre class="alt">&nbsp;</pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p><font size="1">*Yes yes, I know, more than one assert in a single test, may the keepers of good code have mercy on my compiler)</font></p>

<p>The code</p>

<div class="csharpcode">
  <pre class="alt"><span class="kwrd">public</span> <span class="kwrd">class</span> ImageViewFactory : IViewFactory&lt;ImageViewInputModel, ImageView&gt; </pre>

  <pre>{ </pre>

  <pre class="alt">    <span class="kwrd">private</span> IDocumentSession documentSession;</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">    <span class="kwrd">public</span> ImageViewFactory(IDocumentSession documentSession) </pre>

  <pre>    { </pre>

  <pre class="alt">        <span class="kwrd">this</span>.documentSession = documentSession; </pre>

  <pre>    } </pre>

  <pre class="alt">    <span class="kwrd">public</span> ImageView Load(ImageViewInputModel input) </pre>

  <pre>    { </pre>

  <pre class="alt">        var doc = documentSession.Load&lt;ImageDocument&gt;(input.ImageId); </pre>

  <pre>        <span class="kwrd">return</span> <span class="kwrd">new</span> ImageView( </pre>

  <pre class="alt">            doc.Filename, </pre>

  <pre>            doc.Tags.Select(tag =&gt; tag.Name).ToArray(), </pre>

  <pre class="alt">            doc.Title); </pre>

  <pre>    } </pre>

  <pre class="alt">} </pre>

  <pre>&nbsp;</pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>There we go, a fully functional ‘view’ element to our website (okay, we’re lacking a great deal of functionality, but we will get there in the end, covering some more RavenDB features as we go.</p>

<p>In other news, I’m beginning to think that with all the simplicity I’m displaying at the moment that I should have gone for the simple option of having my entities as the documents and not wrapping them up, I might do a u-turn on that very shortly with a post on re-factoring. </p>

<p>PS: I’m aware that the rest of the entries aren’t navigable to, I’ll fix the template right after publishing this…</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---the-image-gallery-project-xvi---adding-edit-functionality-i.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---the-image-gallery-project-xvi---adding-edit-functionality-i.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 23 Nov 2010 19:45:00 GMT</pubDate></item><item><title><![CDATA[Oredev - Post conference review]]></title><description><![CDATA[
		<p><a href="http://ayende.com/Blog/">Ayende</a> pinged me on Skype and asked “How do you fancy a holiday in Sweden?”</p>  <p>It turns out that for one reason or another he wasn’t able to make it for his scheduled RavenDB workshop and unrelated session at Oredev, one of the “best conferences in the world”, and I was being asked if I’d like to try and substitute.</p>  <p>The TLDR version of this post is “<em>If you’re ever asked to do something like this, then just do it and don’t look back”,</em> I had an amazing time, met some amazing people and learned a lot from the process.</p>  <p>The longer version is well…</p>  <p><strong>Monday - <strong>Workshops</strong></strong></p>  <p>At this point I hadn’t prepared for the workshop at all (although I had a lot of material for that, and I had prepared the talk for Friday, I didn’t know what a workshop really entailed). I settled in by attending a Neo4j workshop and A MongoDB workshop in order to see if I could gain some ideas about how to conduct the RavenDB workshop I’d have to run the next day.</p>  <p>The Neo4j workshop was ran by @<a href="https://twitter.com/emileifrem">emileifrem</a>, and was very well put together, with a series of tests that we would have to make pass after a small presentation beforehand. Unfortunately there were a large number of downloads over a slow internet connection required and this made things tricky.</p>  <p>The MongoDB workhop was ran by @<a href="https://twitter.com/#!/mathias_mongo">mathias_mongo</a> and was done in a very different style, where we could choose to keep up or not as we went along and he walked us through, in contrast to Neo4j, there was very little to download which made following along technically easy (although with my attention span, I ended up just fiddling with other things whilst passively listening).</p>  <p><strong>Monday – Evening</strong></p>  <p>Not much to talk about here, other than most of the attendees/speakers got naked, jumped in a sauna and the ocean, repeated that performance a few times and ate some nice food in the restaurant at the same venue. Met some interesting people here and this definitely set the tone for the rest of the week; a very good way of kicking off a conference indeed.</p>  <p><strong>Tuesday – Workshops</strong></p>  <p>This morning, I got up and started working on the workshop (already having a lot of material, just not know how to present it), I decided to combine the workshop approaches from the previous day – combining the test-driven approach of the Neo4j session with the minimal requirements of the MongoDB session. I rudely did this in @<a href="https://twitter.com/#!/RoyOsherove">RoyOsherove</a>’s workshop about unit testing, because I wanted to hear him talk and figured I would pick up some stuff along the way (And I was not disappointed, he’s a great presenter).</p>  <p>My workshop itself went to plan, although as per usual I went a bit fast most people did keep up and I think the vast majority of people were satisfied with it (thankfully), I really enjoyed running it and learned a few things for the next times.</p>  <p><strong>Tuesday – Evening</strong></p>  <p>Well, this was splendid – pre-drinks at @<a href="https://twitter.com/#!/noopman">noopman</a>’s house with the speakers, followed by dinner at Malmo city hall – ended up stood chatting with @<a href="https://twitter.com/#!/jeremydmiller">jeremydmiller</a>, @<a href="https://twitter.com/#!/NolanBushnell">NolanBushnell</a> and @<a href="https://twitter.com/#!/RoyOsherove">RoyOsherove</a> before we went in,&nbsp; and ended up on a table with a few of these delightful people surrounded by glorious finery (amazing chandeliers and history, etc).</p>  <p><strong>Wednesday, Thursday, Friday – Sessions + great converations/new friends</strong></p>  <p>After the initial two days, the rest becomes a big blur of amazing sessions, ad-hoc sessions where I talked about Raven, ad-hoc sessions where others talked about their projects, and a few discussions with various people about either Raven, or the sessions they had just ran, were about to run, or the session I was to run on Friday, here is a quick rundown of the things that stuck in my mind.</p>  <ul>   <li>Keynote: Jeff Norris from NASA – Legendary, nothing much more to say about this keynote, funny, entertaining, informative. </li>    <li>Keynote: Noland Bushell – If you have to ask then you lose some serious geek-cred… </li>    <li>@<a href="https://twitter.com/#!/gregyoung">gregyoung</a>: both of his talks very opinionated but in a good way, you can’t argue with common sense, and there was an awful lot of it floating around here.&nbsp; He also announced Mighty Moose at the conference, which you need to check out if you haven’t already and you’re a .NET developer. </li>    <li>@<a href="https://twitter.com/#!/jeremydmiller">jeremydmiller</a>: I had already informally arranged to meet up and talk Fubu/MVC,&nbsp; and now that has happened I’m excited to be finally thinking about upgrading our multi-tenant work-project to Fubu in the coming months, it will be a good&nbsp; fit. I caught one and a half of his talks too, and again it’s very difficult to argue with the vast amounts of common sense wafting around here.</li>    <li>The multiple ad-hoc RavenDB talks I ended up doing in the coffee room, these were really cool – I am always happy to talk tech to people who are so capable of “getting it” with so little explanation, this goes for everybody at the conference, and I’ll write more about that in a bit. </li>    <li>I had a good meeting with @<a href="https://twitter.com/#!/bradwilson">bradwilson</a> about ASP.NET MVC, talking about how I use it in our multi-tenant systems and verifying I wasn’t doing anything overly stupid… </li>    <li>Popping to the pub with @<a href="https://twitter.com/#!/gregyoung">gregyoung</a> to talk about Mighty Moose and Event Sourcing, I am more favourable about the latter after these conversations, and I’m beginning to think that it’s more widely applicable than I thought as a way of easily keeping a audit trail, repeatability, pushing data to multiple destinations etc. </li>    <li>I made a point of stopping by the Jetbrains stand and chatting to @<a href="https://twitter.com/#!/hhariri">hhariri</a> about document databases and development in general, an absolute pleasure indeed.</li>    <li>The 15 minute RavenDB talk on the “Oredev Open” Thursday night was a <em>lot</em> of fun, thanks to all who attended, I hope you got something out of the blur that it was.</li>    <li>Dinner with @<a href="https://twitter.com/#!/jeremydmiller">jeremydmiller</a> and @<a href="https://twitter.com/#!/athought">athought</a> (and wife, don’t know if she is on Twitter) on Friday night, I responded to an open Twitter invite and I was the only one to turn up – I could have been made to feel incredibly out of place with three people who already knew each other so well, and I want to extend the warmest thanks at this point for that not being the case, I really enjoyed and appreciated the quiet and more-relaxed company. </li>    <li>A final four-way coding session on Friday night with @<a href="https://twitter.com/#!/gblock">gblock</a>, @<a href="https://twitter.com/#!/jeremydmiller">jeremydmiller</a> and @<a href="https://twitter.com/#!/philiplaureano">philiplaureano</a> demoing through RavenDB with a lot of sensible questions and feedback, although by this point my brain was getting seriously fried!</li>    <li>A&nbsp; final shout-out to the Barista, those guys making me awesome coffee every day completely made my week.</li> </ul>  <p>If I’ve missed anybody out (I’ve done my best to name-drop everybody!) then sorry, because that’s the thing about this conference. There were so many people to talk to, and everybody was so willing to talk! It wasn’t possible to stop in one place for more than 5 minutes without starting a conversation with somebody.</p>  <p>And not only conversation, but genuinely interesting conversation (for me anyway) on so many fronts with so many diverse people, this conference was great because of that – the level of understanding throughout was staggering, I must admit I felt intimidated at times by the sheer wall of intellect I was encountering (countered by the friendliness).</p>  <p>With this, I am going to extend a massive thank-you to @ayende for trusting me with his baby at this event, and @<a href="https://twitter.com/#!/michaeltiberg">michaeltiberg</a> also for helping me get there.</p>  <p>I am going&nbsp; to make a serious effort to get to the next one (either as speaker or attendee), and to keep in touch with a number of the people I met, I know I’m not very good at that aspect of my life so I’ll do my best and see where that gets us.</p>  <p><em>[Usual RavenDB posts are en-route, entries are queued already, written on the plane and in sleepless nights!]</em></p>
	]]></description><link>http://codeofrob.com/entries/oredev---post-conference-review.html</link><guid isPermaLink="true">http://codeofrob.com/entries/oredev---post-conference-review.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 15 Nov 2010 15:45:00 GMT</pubDate></item><item><title><![CDATA[RavenDB-The Image Gallery Project (XV) - Improving Tag Search with AutoComplete]]></title><description><![CDATA[
		<p>In the last entry we set up a basic search as you type search, but the user experience was still left rather wanting – what we could do with is the ability to get a list of tags starting with the current text, and for an added degree of complexity it would be nice if the tags were sorted by how many times they were used as well, so the most common ones appeared first.</p>  <p><strong>This calls for a Map/Reduce Index</strong></p>  <p>The great thing about indexes is that they don’t necessarily have to just map data into indexes, they can also pick a field or a collection of fields to group the mapped data by, and optionally perform some calculations at the same time. You don’t have to understand how this works in order to use it and I therefore won’t get into too much detail on that front.</p>  <p>What we need:</p>  <ul>   <li>All of the unique tags in the system </li>    <li>A count of how many times that tag appears in the system </li> </ul>  <p>It is quite clear that the ‘tag’ is the field we’ll group by, and every time we come across a tag we need to add ‘1’ to a total.</p>  <p><strong>Solving this with an ordinary LINQ query</strong></p>  <p>Assuming we had a collection of ImageDocuments in a list called images like so:</p>  <div class="csharpcode">   <pre class="alt">List&lt;ImageDocument&gt; images = GetAllTheImagesFromSomewhere();</pre>
</div>
<style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>And we wanted to query this collection to ask it “What are the unique tags in this collection, and how many times do they appear?” – a simple LINQ query might look like this:</p>

<div class="csharpcode">
  <pre class="alt">        List&lt;ImageDocument&gt; images = GetAllTheImagesFromSomewhere();</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">        var allTags = from image <span class="kwrd">in</span> images</pre>

  <pre>                        from tag <span class="kwrd">in</span> image.Tags</pre>

  <pre class="alt">                        group tag by tag.Name into g</pre>

  <pre>                        select <span class="kwrd">new</span></pre>

  <pre class="alt">                        {</pre>

  <pre>                            Name = g.Key,</pre>

  <pre class="alt">                            Count = g.Count()</pre>

  <pre>                        };</pre>
</div>

<p></p><style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Now imagine instead of a collection we were querying against a DataContext in Linq2Sql or Entity Framework or whatever data wrapper you use, performing this kind of query against an actual database every-time the user changes the content of the text box would leave most DBAs in tears. </p>

<p>But the knowledge of how we build this query maps almost directly across into RavenDB.</p>

<p><strong>Our View</strong></p>

<p>We’ll build a generic view that we can use for purposes like this, and it will be very basic like so:</p>

<div class="csharpcode">
  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> ImageTagCollectionView</pre>

  <pre>    {</pre>

  <pre class="alt">        <span class="kwrd">public</span> IEnumerable&lt;ImageTagCollectionItem&gt; Items { get; <span class="kwrd">private</span> set; }</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">        <span class="kwrd">public</span> ImageTagCollectionView(IEnumerable&lt;ImageTagCollectionItem&gt; items)</pre>

  <pre>        {</pre>

  <pre class="alt">            <span class="kwrd">this</span>.Items = items;</pre>

  <pre>        }</pre>

  <pre class="alt">    }</pre>
</div>
<style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<div class="csharpcode">
  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> ImageTagCollectionItem</pre>

  <pre>    {</pre>

  <pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">string</span> Name { get; <span class="kwrd">private</span> set; }</pre>

  <pre>        <span class="kwrd">public</span> <span class="kwrd">int</span> Count { get; set; }</pre>

  <pre class="alt">&nbsp;</pre>

  <pre>        <span class="kwrd">public</span> ImageTagCollectionItem(<span class="kwrd">string</span> name, <span class="kwrd">int</span> count)</pre>

  <pre class="alt">        {</pre>

  <pre>            <span class="kwrd">this</span>.Name = name;</pre>

  <pre class="alt">            <span class="kwrd">this</span>.Count = count;</pre>

  <pre>        }</pre>

  <pre class="alt">    }</pre>
</div>
<style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Our map can therefore look something like this:</p>

<div class="csharpcode">
  <pre class="alt">                Map = docs =&gt; from doc <span class="kwrd">in</span> docs</pre>

  <pre>                              from tag <span class="kwrd">in</span> doc.Tags</pre>

  <pre class="alt">                              select <span class="kwrd">new</span></pre>

  <pre>                              {</pre>

  <pre class="alt">                                  tag.Name,</pre>

  <pre>                                  Count = 1</pre>

  <pre class="alt">                              },</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style><style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>We’re just doing a select many to get all of the tags in the system, just like we did in the original LINQ query</p>

<p>The reduce is *<strong>exactly</strong>* the same as in the original LINQ query:</p>

<div class="csharpcode">
  <pre class="alt">                Reduce = results =&gt; from result <span class="kwrd">in</span> results</pre>

  <pre>                                    group result by result.Name into g</pre>

  <pre class="alt">                                 select <span class="kwrd">new</span></pre>

  <pre>                                 {</pre>

  <pre class="alt">                                     Name = g.Key,</pre>

  <pre>                                     Count = g.Sum(x=&gt;x.Count)</pre>

  <pre class="alt">                                 }</pre>
</div>
<style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>&nbsp;</p>

<p><strong>Note</strong>: The shape of the map component must be identical to the shape of the reduce component.</p>

<p>Putting&nbsp; all of this together into an AbstractIndexCreationTask, we get:</p>

<div class="csharpcode">
  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> ImageTags_GroupByTagName : AbstractIndexCreationTask&lt;ImageDocument, ImageTagCollectionItem&gt;</pre>

  <pre>    {</pre>

  <pre class="alt">        <span class="kwrd">public</span> ImageTags_GroupByTagName()</pre>

  <pre>        {</pre>

  <pre class="alt">            Map = docs =&gt; from doc <span class="kwrd">in</span> docs</pre>

  <pre>                          from tag <span class="kwrd">in</span> doc.Tags</pre>

  <pre class="alt">                          select <span class="kwrd">new</span></pre>

  <pre>                          {</pre>

  <pre class="alt">                              tag.Name,</pre>

  <pre>                              Count = 1</pre>

  <pre class="alt">                          };</pre>

  <pre>            Reduce = results =&gt; from result <span class="kwrd">in</span> results</pre>

  <pre class="alt">                                group result by result.Name into g</pre>

  <pre>                                select <span class="kwrd">new</span></pre>

  <pre class="alt">                                {</pre>

  <pre>                                    Name = g.Key,</pre>

  <pre class="alt">                                    Count = g.Sum(x =&gt; x.Count)</pre>

  <pre>                                };</pre>

  <pre class="alt">            SortOptions.Add(</pre>

  <pre>                x =&gt; x.Count, Raven.Database.Indexing.SortOptions.Int);</pre>

  <pre class="alt">        }</pre>

  <pre>    }</pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style><style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style><style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style><style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>That simple – we use the View we created before as the second generic argument to our&nbsp; IndexDefinition and use that to perform our reduce/grouping statement, the essence of this is exactly the same query as we would use in an ordinary LINQ job.</p>

<p>As an extra, we also specify to RavenDB that when ordering by Count that we want it treated as an integer – this is required if sorting is to be done on any of the indexed fields.</p>

<p><strong>The View Factory</strong></p>

<p>The input for my view factory is going to consist of just the text we’re looking for matching tags for, to keep things simple</p>

<div class="csharpcode">
  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> ImageTagCollectionInputModel</pre>

  <pre>    {</pre>

  <pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">string</span> SearchText { get; set; }</pre>

  <pre>    }</pre>
</div>
<style type="text/css">![CDATA[




.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>I’ll write some tests for this in the usual manner, again this is a bit too wordy to just paste in the blog post, so can be found on Github, the tests themselves look like this though:</p>

<div class="csharpcode">
  <pre class="alt">        [Test]</pre>

  <pre>        [TestCase(<span class="str">"So"</span>, 4)]</pre>

  <pre class="alt">        [TestCase(<span class="str">"SomeTag3"</span>, 1)]</pre>

  <pre>        [TestCase(<span class="str">"SomeO"</span>, 2)]</pre>

  <pre class="alt">        [TestCase(<span class="str">"Ano"</span>, 1)]</pre>

  <pre>        <span class="kwrd">public</span> <span class="kwrd">void</span> WhenLoadIsInvokedWithSearchText_ExpectedNumberOfResultsAreReturned(<span class="kwrd">string</span> searchTerm, <span class="kwrd">int</span> expectedCount)</pre>

  <pre class="alt">        {</pre>

  <pre>            PopulateData();</pre>

  <pre class="alt">            var results = ViewFactory.Load(<span class="kwrd">new</span> ImageTagCollectionInputModel() { SearchText = searchTerm });</pre>

  <pre>            Assert.AreEqual(expectedCount, results.Items.Count());</pre>

  <pre class="alt">        }</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">        [Test]</pre>

  <pre>        [TestCase(<span class="str">"SomeTag1"</span>, 1)]</pre>

  <pre class="alt">        [TestCase(<span class="str">"SomeTag3"</span>, 1)]</pre>

  <pre>        [TestCase(<span class="str">"SomeOtherTag1"</span>, 2)]</pre>

  <pre class="alt">        [TestCase(<span class="str">"SomeOtherTag2"</span>, 2)]</pre>

  <pre>        [TestCase(<span class="str">"AnotherTagEntirely"</span>, 1)]</pre>

  <pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">void</span> WhenLoadIsInvokedWithNoSearchText_ModelContainsItemsWithCorrectInstanceCounts(<span class="kwrd">string</span> searchTerm, <span class="kwrd">int</span> expectedCount)</pre>

  <pre>        {</pre>

  <pre class="alt">            var results = ViewFactory.Load(<span class="kwrd">new</span> ImageTagCollectionInputModel());</pre>

  <pre>            var specificResult = results.Items.Where(x =&gt; x.Name == searchTerm).FirstOrDefault();</pre>

  <pre class="alt">            Assert.AreEqual(expectedCount, specificResult.Count);</pre>

  <pre>        }</pre>
</div>
<style type="text/css">![CDATA[




.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Not the most efficient tests, and I might revisit that later in the series as a topic in its own right</p>

<p>The implementation of the view factory looks like the following:</p>

<div class="csharpcode">
  <pre class="alt">&nbsp;</pre>

  <pre>        <span class="kwrd">public</span> ImageTagCollectionView Load(ImageTagCollectionInputModel input)</pre>

  <pre class="alt">        {</pre>

  <pre>            var query = <span class="kwrd">this</span>.documentSession.Query&lt;ImageTagCollectionItem, ImageTags_GroupByTagName&gt;()</pre>

  <pre class="alt">                .OrderByDescending(x=&gt;x.Count)</pre>

  <pre>                .Take(25);</pre>

  <pre class="alt">&nbsp;</pre>

  <pre>            <span class="kwrd">if</span> (!<span class="kwrd">string</span>.IsNullOrEmpty(input.SearchText))</pre>

  <pre class="alt">            {</pre>

  <pre>                query = query.Where(x =&gt; x.Name.StartsWith(input.SearchText));</pre>

  <pre class="alt">            }</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">            var results = query.ToArray();</pre>

  <pre>            <span class="kwrd">return</span> <span class="kwrd">new</span> ImageTagCollectionView(results);                </pre>

  <pre class="alt">        }</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p><strong>Note: </strong>We’re not querying ImageDocument, as although it was used to create the map/reduce index, it isn’t what we are looking at – instead we use the ImageTagCollectionItem which we used to create the Reduce function in the first place, as it contains the same fields and will therefore result in the correct query.</p>

<p><strong>Implementing this in Web</strong></p>

<p>As before, I’m just going to expose this via a JSON service directly like so:</p>

<div class="csharpcode">
  <pre class="alt">        <span class="kwrd">public</span> ActionResult _GetTags(ImageTagCollectionInputModel input)</pre>

  <pre>        {</pre>

  <pre class="alt">            var model = viewRepository.Load&lt;ImageTagCollectionInputModel, ImageTagCollectionItem&gt;(input);</pre>

  <pre>            <span class="kwrd">return</span> Json(model, JsonRequestBehavior.AllowGet);</pre>

  <pre class="alt">        }</pre>
</div>
<style type="text/css">![CDATA[




.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Setting this up in my already created textbox using jQuery Autocomplete, I get a awesome user experience like this:</p>

<p><a href="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBTheImageGalleryProjectXVIImprovin_122DC/image_2.png"><img style="background-image: none; border-right-width: 0px; margin: ;padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px;" title="image" border="0" alt="image" src="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBTheImageGalleryProjectXVIImprovin_122DC/image_thumb.png" width="391" height="285"></a></p>

<p><strong>The great thing about doing this is…</strong></p>

<p>We can run this query over and over again, it’s looking up a pre-computed index and that’s a cheap operation – we’re getting really good performance out of RavenDB and not really having to learn anything&nbsp; too different from what we’ve learned from doing LINQ in the past.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb-the-image-gallery-project-xv---improving-tag-search-with-autocomplete.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb-the-image-gallery-project-xv---improving-tag-search-with-autocomplete.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 24 Oct 2010 15:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - The Image Gallery Project (XIV) - Implementing a real-time tag search]]></title><description><![CDATA[
		<p>The code for this and all other entries in this series can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a></p>  <p>We don’t currently have any search functionality in the image browser which means the browser is all but useless, so let’s look at adding that with some RavenDB magic.</p>  <p>In a RDBMS project, performing loose searches on tags and other fields of our documents would be a non-trivial operation both in implementation and execution – in RavenDB we can just execute a LINQ query and know an index will be created in the background to make this operation ludicrously fast.</p>  <p><strong>Some background: The Web bit</strong></p>  <p>In order to demo the kind of functionality we can get from RavenDB, I’m going to implement a search as you type system which constantly asks RavenDB for the search results for a given term.</p>  <p>Because I’m trying to do this as a more real-world example, I’m not going to cheat by doing partial page updates and passing XHTML all over the show with JavaScript, I’m going to rip apart my original controller action and make it return just the view.</p>  <p>Instead, I am going to use some client-side templating with jquery-tmpl, and a call to a service to get the relevant view as a blob of JSON will be used, any changes to the textbox will just mean this initial call will get made again and the view re-populated.</p>  <div class="csharpcode">   <pre class="alt">        <span class="kwrd">public</span> ActionResult Browse()</pre>

  <pre>        {</pre>

  <pre class="alt">            <span class="kwrd">return</span> View();</pre>

  <pre>        }</pre>

  <pre class="alt">&nbsp;</pre>

  <pre>        <span class="kwrd">public</span> ActionResult _GetBrowseData(ImageBrowseInputModel input)</pre>

  <pre class="alt">        {</pre>

  <pre>            var model = viewRepository.Load&lt;ImageBrowseInputModel, ImageBrowseView&gt;(input);</pre>

  <pre class="alt">            <span class="kwrd">return</span> Json(model, JsonRequestBehavior.AllowGet);</pre>

  <pre>        }</pre>
</div>

<p><font size="1">(*Microsoft in their infinite wisdom don’t allow GET requests for JSON by default, to protect us from our own stupidity, AGH!!!)<style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style></font></p>

<p>Along with:</p>

<div class="csharpcode">
  <pre class="alt">    &lt;script id=<span class="str">"browsing-image-template"</span> type=<span class="str">"text/x-jquery-tmpl"</span> &gt;</pre>

  <pre>        &lt;div <span class="kwrd">class</span>=<span class="str">"browsing-image"</span>&gt;</pre>

  <pre class="alt">             &lt;h4&gt;${Title}&lt;/h4&gt;</pre>

  <pre>             &lt;img src=<span class="str">"/Resources/Image/${Filename}"</span> alt={Title}<span class="str">" /&gt;</span></pre>

  <pre class="alt">        &lt;/div&gt;    </pre>

  <pre>    &lt;/script&gt;    </pre>

  <pre class="alt">    &lt;div id="image-browser"&gt;</pre>

  <pre>        </pre>

  <pre class="alt">    &lt;/div&gt;</pre>
</div>

<p></p><style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>and

<div class="csharpcode">
  <pre class="alt">    populateImageBrowser: function (page, pageSize, searchText) {</pre>

  <pre>        var query = <span class="str">'?page='</span> + page</pre>

  <pre class="alt">                + <span class="str">'&amp;pageSize='</span> + pageSize</pre>

  <pre>                + <span class="str">'&amp;searchText='</span> + searchText;</pre>

  <pre class="alt">&nbsp;</pre>

  <pre>        $.ajax({</pre>

  <pre class="alt">            dataType: <span class="str">"json"</span>,</pre>

  <pre>            url: <span class="str">'/Image/_GetBrowseData'</span> + query,</pre>

  <pre class="alt">            error:function (xhr, ajaxOptions){</pre>

  <pre>                alert(xhr.status + <span class="str">':'</span> + xhr.responseText);</pre>

  <pre class="alt">                },</pre>

  <pre>            success: function (data) {</pre>

  <pre class="alt">                $(<span class="str">'#browsing-image-template'</span>)</pre>

  <pre>                    .tmpl(data.Items)</pre>

  <pre class="alt">                    .appendTo(<span class="str">'#image-browser'</span>);</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">            }</pre>

  <pre>        });</pre>
</div>
<style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>I’m going to have a textbox on the page which I listen for changes from every time the keyboard is pressed, and I’ll just call that method again to do the search every time the request is made – I’ll not bother covering that though, it’s common enough functionality – I just wanted to show what I’m doing with my view now I’ve moved to JSON instead of server-side HTML.</p>

<p><strong>Querying a document with collections in RavenDB using LINQ</strong></p>

<p>I’ve added SearchText to my InputModel so that gets bound automatically via the query string, so all we need to do now is create an index that actually allows SearchText to be used.</p>

<p>I’ve added a test for this new SearchText property in the view factory integration test which looks something like this</p>

<div class="csharpcode">
  <pre class="alt">        [Test]</pre>

  <pre>        <span class="kwrd">public</span> <span class="kwrd">void</span> WhenLoadIsInvokedWithTagSearch_ExpectedResultsAreReturned()</pre>

  <pre class="alt">        {</pre>

  <pre>            PopulateStore();</pre>

  <pre class="alt">            var result = <span class="kwrd">this</span>.ViewFactory.Load(<span class="kwrd">new</span> ImageBrowseInputModel()</pre>

  <pre>            {</pre>

  <pre class="alt">                Page = 0,</pre>

  <pre>                PageSize = 100,</pre>

  <pre class="alt">                SearchText = <span class="str">"tag5"</span></pre>

  <pre>            }).Items.FirstOrDefault();</pre>

  <pre class="alt">            WaitForIndexing();</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">            Assert.AreEqual(<span class="str">"Title5"</span>, result.Title);</pre>

  <pre>        }</pre>
</div>
<style type="text/css">![CDATA[





.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>PopulateStore just throws a hundred documents in with various tags, and I know that one of the documents has a tag with name ‘tag5’ and a title of ‘Title5’. If I run this, it fails because I haven’t updated the code to fit our new requirements.</p>

<p>Here is the code that implements the desired functionality</p>

<div class="csharpcode">
  <pre class="alt">        <span class="kwrd">public</span> ImageBrowseView Load(ImageBrowseInputModel input)</pre>

  <pre>        {</pre>

  <pre class="alt">            <span class="rem">// Adjust the model appropriately</span></pre>

  <pre>            input.PageSize = input.PageSize == 0 || input.PageSize &gt; 20 ? 20 : input.PageSize;</pre>

  <pre class="alt">&nbsp;</pre>

  <pre>            <span class="rem">// Perform the paged query</span></pre>

  <pre class="alt">            var query = documentSession.Query&lt;ImageDocument&gt;()</pre>

  <pre>                    .Skip(input.Page * input.PageSize)</pre>

  <pre class="alt">                    .Take(input.PageSize);</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">            <span class="rem">// Add a clause for search text if necessary</span></pre>

  <pre>            <span class="kwrd">if</span>(!<span class="kwrd">string</span>.IsNullOrEmpty(input.SearchText)){</pre>

  <pre class="alt">                query = query.Where(x=&gt;x.Tags.Any(tag=&gt;tag.Name.StartsWith(input.SearchText)));</pre>

  <pre>            }</pre>

  <pre class="alt">&nbsp;</pre>

  <pre>            <span class="rem">// And enact this query</span></pre>

  <pre class="alt">            var items = query              </pre>

  <pre>                .ToArray()</pre>

  <pre class="alt">                .Select(x =&gt; <span class="kwrd">new</span> ImageBrowseItem(x.Title, x.Filename));</pre>

  <pre>               </pre>

  <pre class="alt">            <span class="kwrd">return</span> <span class="kwrd">new</span> ImageBrowseView(</pre>

  <pre>                input.Page,</pre>

  <pre class="alt">                input.PageSize,</pre>

  <pre>                items);</pre>

  <pre class="alt">        }</pre>
</div>
<style type="text/css">![CDATA[





.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>&nbsp;</p>

<p>The important bit to take away here, is that we add a Where clause where Any Tag has a name that starts with the search text passed in – this <em>just works</em>. We don’t add that clause if we haven’t got any search text, because asking for any documents with an empty tag would most likely yield in no results. (Yeah, I have tests for that too)</p>

<p><strong>The index that was created for us</strong></p>

<p>As mentioned in the previous entry, when performing ad-hoc queries against RavenDB, indexes are created for us in the background, so here is what the above index would look like if we had created it ourselves.</p>

<div class="csharpcode">
  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> Images_ByTag : AbstractIndexCreationTask&lt;ImageDocument&gt;</pre>

  <pre>    {</pre>

  <pre class="alt">        <span class="kwrd">public</span> Images_ByTag()</pre>

  <pre>        {</pre>

  <pre class="alt">            Map = docs =&gt; from doc <span class="kwrd">in</span> docs</pre>

  <pre>                          from tag <span class="kwrd">in</span> doc.Tags</pre>

  <pre class="alt">                          select <span class="kwrd">new</span></pre>

  <pre>                          {</pre>

  <pre class="alt">                              tag.Name</pre>

  <pre>                          };</pre>

  <pre class="alt">        }</pre>

  <pre>    }</pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style><style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>When creating our mapping, we effectively say “Get all the documents, get all their tags, create an index entry for each of those tags”, a search for “Name” via this index will result in RavenDB searching the index and collating that into a document look up. This is a flattening of the document and is what happens whenever we look at specific properties within collections</p>

<p><strong>What this has given us</strong></p>

<p><em>As the user types,</em> images with tags that match the current search text are displayed within the search results area – Lucene indexes are seriously fast and this is a good demonstration of that</p>

<p><a href="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBTheImageGalleryProjectXIII_C8ED/image_2.png"><img style="background-image: none; border-right-width: 0px; margin: ;padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px;" title="image" border="0" alt="image" src="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBTheImageGalleryProjectXIII_C8ED/image_thumb.png" width="533" height="518"></a></p>

<p><strong>There are still some improvements that could be made at this time.</strong></p>

<p>This could be made more user friendly by&nbsp; showing suggestions as the user types by listing tags in the system that start with the current text <em>(auto-complete)</em>, and we could also search the title and description (if there was a description).</p>

<p>We are also still returning the entire document each time and then just plucking the relevant fields from it – this is rather heavy weight with all that data travelling across the wire and still needs changing so that we only transmit the fields from the document that we want in our end view model. <em>(Projections)</em></p>

<p>That makes clear what we’ll be doing next…</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---the-image-gallery-project-xiv---implementing-a-real-time-tag-search.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---the-image-gallery-project-xiv---implementing-a-real-time-tag-search.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 21 Oct 2010 08:37:00 GMT</pubDate></item><item><title><![CDATA[RavenDB-Image Gallery Project (XIII)- Understanding Indexes]]></title><description><![CDATA[
		<p>The code for this and all other entries in this series can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a></p>  <p>So far our image browser view just retrieves *all* of the documents from the document store, and allows paging through them. In other previous entries we have also written simple LINQ queries to check the existence of users and authenticate via username and password.</p>  <p>RavenDB makes it very easy for us to query our documents and not think about what is going on under the hood, and that can get us very far indeed before we have to do any manual work ourselves, but that can make the leap to advanced functionality quite a big one.</p>  <p>So, before we get that far it would be best to explain what is going on when you perform these basic queries against the document store. </p>  <p><strong>A basic query against a single property</strong></p>  <p>In RavenDB we can query a property on our document like so:</p>  <div class="csharpcode">   <pre class="alt">var query = documentSession.Query&lt;ImageDocument&gt;() </pre>

  <pre>        .Where(x=&gt;x.Title == <span class="str">"Something"</span>) </pre>

  <pre class="alt">        .ToArray(); </pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>In order for RavenDB to process this query, it must first create an Lucene index, which contains only the relevant properties copied from the document in question.</p>

<p>This takes place as another LINQ expression, which simply <strong><em>maps</em></strong> the properties from the document into a projection from that document. </p>

<div class="csharpcode">
  <pre class="alt">from doc <span class="kwrd">in</span> docs </pre>

  <pre>                              select <span class="kwrd">new</span> </pre>

  <pre class="alt">                              { </pre>

  <pre>                                  doc.Title </pre>

  <pre class="alt">                              }</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>As new documents are added to the document store, or removed from the document store, these entries in the index are added and removed as the expression is invoked on those documents. This happens as a background process so there can be a small delay in documents being added to the store and being indexed, but it means that writes are really fast all the time, and that queries are incredibly cheap (as they are coming from a pre-computed index).</p>

<p>When performing an ad-hoc query against the document store, RavenDB is clever enough to extrapolate what this index should look like, and create it <em>if it does not already exist</em>.&nbsp; This temporary index will persist and the next call will re-use it and after the index has been re-used enough within a configured amount of time, it will be promoted into a permanent index and will therefore be available across server restarts.</p>

<p><strong>Pre-defining those indexes</strong></p>

<p>For the vast majority of queries, it is simply not necessary to pre-define those indexes, and it is best to just leave RavenDB to do what it wants to do – however it is beneficial to understand how to pre-define those indexes and understand how they work.</p>

<p>The .NET API allows us to pre-define an index in the following manner</p>

<div class="csharpcode">
  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> Images_ByTitle : AbstractIndexCreationTask&lt;ImageDocument&gt;</pre>

  <pre>    {</pre>

  <pre class="alt">        <span class="kwrd">public</span> Images_ByTitle()</pre>

  <pre>        {</pre>

  <pre class="alt">            Map = docs =&gt; from doc <span class="kwrd">in</span> docs</pre>

  <pre>                          select <span class="kwrd">new</span></pre>

  <pre class="alt">                          {</pre>

  <pre>                              doc.Title</pre>

  <pre class="alt">                          };</pre>

  <pre>        }</pre>

  <pre class="alt">    }</pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style><style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>On start-up, we can register this (and any other indexes in the same assembly) by making a call to CreateIndexes against the document store:</p>

<p>IndexCreation.CreateIndexes(typeof(Images_ByTitle).Assembly, documentStore);</p>

<p>When querying, we can specify that we wish to use this index by including it as a parameter in the Query method like so</p>

<div class="csharpcode">
  <pre class="alt">documentSession.Query&lt;ImageDocument, Images_ByTitle&gt;() </pre>

  <pre>                    .Where(x=&gt;x.Title == <span class="str">"Something"</span>) </pre>

  <pre class="alt">                    .ToArray();</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Of course, now we are specifying which index to use, RavenDB can only query any properties that have been mapped into that index, so these pre-computed indexes are largely inappropriate for general use.</p>

<p>As many or as few properties can be mapped into an index as is desired, and as many or as few of these properties can be used in a query against that index, but you cannot query any properties that don’t exist in that index.</p>

<p>In order for LINQ to be used to query that index, there is a convention that the properties in the anonymous object created by the map expression should have the same name as the properties in the original document, but this is not entirely necessary – later in the series we might discuss some use cases for this and we can query without using the LINQ provider.</p>

<p>For the next few entries, any ad-hoc queries will also be accompanied with an explanation of the underlying index that will be created, so that when we reach the point where we <em>need</em> to create an index it should be easily understandable.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb-image-gallery-project-xiii--understanding-indexes.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb-image-gallery-project-xiii--understanding-indexes.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 19 Oct 2010 10:03:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - The Image Gallery Project (XII) - Integrating our view with ASP.NET MVC]]></title><description><![CDATA[
		<p>The code for this and all other entries in this series can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a></p>  <p>Before improving the view, we’ll first just make sure everything works as planned by displaying a list of images on a page, I’ll not bore with the tests (although I can assure you that they exist)</p>  <p>Here is my controller action</p>  <div class="csharpcode">   <pre class="alt">        <span class="kwrd">public</span> ActionResult Browse(ImageBrowseInputModel input)</pre>

  <pre>        {</pre>

  <pre class="alt">            var model = viewRepository.Load&lt;ImageBrowseInputModel, ImageBrowseView&gt;(input);</pre>

  <pre>            <span class="kwrd">return</span> View(model);</pre>

  <pre class="alt">        }</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>The default model binder will take in parameters from the query string (in this case, pagesize and page), populate the model and pass it into the action. We could perform some validation on it in a validator and reject it, or we can do some sanity checking in the view factory and override any dodgy values (I plump for the latter, although there is no reason why we couldn’t combine the two).</p>

<p>My design skills are non-existent, so my view is very simple</p>

<div class="csharpcode">
  <pre class="alt">    &lt;h2&gt;Browse Images&lt;/h2&gt;</pre>

  <pre>    &lt;p&gt;Page &lt;%: Model.Page %&gt;, showing &lt;%: Model.PageSize %&gt; items per page&lt;/p&gt;</pre>

  <pre class="alt">    </pre>

  <pre>    &lt;div <span class="kwrd">class</span>=<span class="str">"image-browser"</span>&gt;</pre>

  <pre class="alt">        &lt;%<span class="kwrd">foreach</span>(var item <span class="kwrd">in</span> Model.Items){ %&gt;</pre>

  <pre>        &lt;div <span class="kwrd">class</span>=<span class="str">"browsing-image"</span>&gt;</pre>

  <pre class="alt">                &lt;h4&gt;&lt;%: item.Title %&gt;&lt;/h4&gt;</pre>

  <pre>                 &lt;img src=<span class="str">"&lt;%= this.ResolveUrl(String.Format("</span>/Resources/Image/{0}<span class="str">", Url.Encode(item.Filename))) %&gt;"</span> /&gt;</pre>

  <pre class="alt">        &lt;/div&gt;</pre>

  <pre>        &lt;%} %&gt;</pre>

  <pre class="alt">    &lt;/div&gt;</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>I’m pointing all the image endpoints at an action which is going to fetch that image from storage for us and return with the appropriate mime-type.</p>

<p><strong>Note: </strong><em>Pulling lots of attachments from RavenDB this way is probably not recommended if you want a site that scales and performs well, there will most likely be a refactor job as a later part in the series demoing how we might migrate from this system to another.</em></p>

<p>This is the action, and as you can see I’ve added another method to the file storage service (because I now need it, I don’t write code until I need it)</p>

<div class="csharpcode">
  <pre class="alt">        <span class="kwrd">public</span> ActionResult Image(<span class="kwrd">string</span> filename)</pre>

  <pre>        {</pre>

  <pre class="alt">            Byte[] fileBytes = fileStorageService.RetrieveFile(filename);</pre>

  <pre>            <span class="kwrd">return</span> File(fileBytes, <span class="str">"image/jpeg"</span>);           </pre>

  <pre class="alt">        }</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Writing a test in the same vein as the previous file command code, we end up with</p>

<div class="csharpcode">
  <pre class="alt">        [Test]</pre>

  <pre>        <span class="kwrd">public</span> <span class="kwrd">void</span> WhenRetrieveFileInvokedWithValidArguments_AttachmentIsReturnedFromRaven()</pre>

  <pre class="alt">        {</pre>

  <pre>            Byte[] fileBytes = <span class="kwrd">new</span> Byte[] { 3, 1, 4, 1, 5, 9 };</pre>

  <pre class="alt">            String filename = <span class="str">"images/mySuperDuperFile"</span>;</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">            <span class="kwrd">this</span>.Store.DatabaseCommands.PutAttachment(filename, <span class="kwrd">null</span>, fileBytes, <span class="kwrd">new</span> Newtonsoft.Json.Linq.JObject());</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">            RavenFileStorageService storage = <span class="kwrd">new</span> RavenFileStorageService(<span class="kwrd">this</span>.Store);</pre>

  <pre>            var retrievedAttachment = storage.RetrieveFile(filename);</pre>

  <pre class="alt">            Assert.AreEqual(fileBytes, retrievedAttachment);</pre>

  <pre>        }</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>and</p>

<div class="csharpcode">
  <pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">byte</span>[] RetrieveFile(<span class="kwrd">string</span> filename)</pre>

  <pre>        {</pre>

  <pre class="alt">            var file = documentStore.DatabaseCommands.GetAttachment(filename);</pre>

  <pre>            <span class="kwrd">return</span> file != <span class="kwrd">null</span> ? file.Data : <span class="kwrd">null</span>;</pre>

  <pre class="alt">        }</pre>
</div>

<p>&nbsp;</p>

<p>The output of that gives us something that looks like this.</p>

<p><a href="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBTheImageGalleryProjectXIIImprovin_14B6B/image_2.png"><img style="background-image: none; border-right-width: 0px; margin: ;padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px;" title="image" border="0" alt="image" src="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBTheImageGalleryProjectXIIImprovin_14B6B/image_thumb.png" width="536" height="532"></a></p><style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>&nbsp;</p>

<p>Note the query string parameters which are automatically being bound to the InputModel with very little code we’ve ended up with a <strong>very </strong>rudimentary image gallery where we can register/logon/upload images/browse images. From this point on we’ll be looking at ways to improve what we have in terms of performance, best practises and perhaps reversing some of our earlier design decisions if they prove to be untenable. (Always guided by tests though). </p>

<p>Oh, and adding some functionality and showing off various features in RavenDB to make your life easy, that’s the purpose of this blog series after all.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---the-image-gallery-project-xii---integrating-our-view-with-asp.net-mvc.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---the-image-gallery-project-xii---integrating-our-view-with-asp.net-mvc.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 17 Oct 2010 15:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - The Image Gallery Project (XI) - Our First View]]></title><description><![CDATA[
		<p>The code for this and all other entries in this series can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a></p>  <p>So far we’ve concentrated on writing to RavenDB via our entities. Traditionally although it has been frowned on (especially of late), when constructing view models with an ORM like NHibernate, it has been common practise to pull the entities/POCOS from the repositories, and either include them directly on the ViewModel or project them onto a custom view model.</p>  <p>The more savvy users would go a step further and perform queries against the object model and with a minimal number of database queries pull back just the data that they need for the view model, and for even , or in some cases they may well write code which pre-creates these view models so getting a view out is a very simple query – this can be a lot of work though.</p>  <p>We can strike a balance in RavenDB at the more elegant end of this spectrum by creating indexes against the stored documents and querying those to get the data out that is required. This can be as simple as executing a dynamic query against the document store (ala what we’ve seen so far in registration/authentication) or as complicated as pre-defining indexes as part of the application code base. I’ll explain a bit more about that </p>  <p><strong>Defining the view</strong></p>  <p>We’ll start with the basics first, as I haven’t fully explained how I’m currently getting to my view layer, first off, I decide what data I want to be able to browse/filter/sort on in my basic view, in order to keep things simple my only input for now will be the paging information required to browse through the images effectively. Here is the class that we’ll use for input into our view factory.</p>  <div class="csharpcode">   <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> ImageBrowseInputModel</pre>

  <pre>    {</pre>

  <pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">int</span> Page { get; set; }</pre>

  <pre>        <span class="kwrd">public</span> <span class="kwrd">int</span> PageSize { get; set; }</pre>

  <pre class="alt">    }</pre>
</div>
<style type="text/css">![CDATA[







.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>And of course the view that we’re going to create</p>

<div class="csharpcode">
  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> ImageBrowseView</pre>

  <pre>    {</pre>

  <pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">int</span> PageSize</pre>

  <pre>        {</pre>

  <pre class="alt">            get;</pre>

  <pre>            <span class="kwrd">private</span> set;</pre>

  <pre class="alt">        }</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">int</span> Page</pre>

  <pre>        {</pre>

  <pre class="alt">            get;</pre>

  <pre>            <span class="kwrd">private</span> set;</pre>

  <pre class="alt">        }</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">        <span class="kwrd">public</span> IEnumerable&lt;ImageBrowseItem&gt; Items</pre>

  <pre>        {</pre>

  <pre class="alt">            get;</pre>

  <pre>            <span class="kwrd">private</span> set;</pre>

  <pre class="alt">        }</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">        <span class="kwrd">public</span> ImageBrowseView(<span class="kwrd">int</span> page, <span class="kwrd">int</span> pageSize, IEnumerable&lt;ImageBrowseItem&gt; items)</pre>

  <pre>        {</pre>

  <pre class="alt">            <span class="kwrd">this</span>.Page = page;</pre>

  <pre>            <span class="kwrd">this</span>.PageSize = PageSize;</pre>

  <pre class="alt">            <span class="kwrd">this</span>.Items = items;</pre>

  <pre>        }</pre>

  <pre class="alt">    }</pre>
</div>
<style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>And the items on that view</p>

<div class="csharpcode">
  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> ImageBrowseItem</pre>

  <pre>    {</pre>

  <pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">string</span> Title</pre>

  <pre>        {</pre>

  <pre class="alt">            get;</pre>

  <pre>            <span class="kwrd">private</span> set;</pre>

  <pre class="alt">        }</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">string</span> Filename</pre>

  <pre>        {</pre>

  <pre class="alt">            get;</pre>

  <pre>            <span class="kwrd">private</span> set;</pre>

  <pre class="alt">        }</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">        <span class="kwrd">public</span> ImageBrowseItem(<span class="kwrd">string</span> title, <span class="kwrd">string</span> filename)</pre>

  <pre>        {</pre>

  <pre class="alt">            <span class="kwrd">this</span>.Title = title;</pre>

  <pre>            <span class="kwrd">this</span>.Filename = filename;</pre>

  <pre class="alt">        }</pre>

  <pre>    }</pre>
</div>
<style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Of note here, is that the actual items included on the main model don’t contain all of the information contained within the document, just the data that we need to display on the browsing page.</p>

<p>I then define an instance of the relevant view factory that can take this in and use it to generate the appropriate view “somehow”</p>

<div class="csharpcode">
  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> ImageBrowseViewFactory : IViewFactory&lt;ImageBrowseInputModel, ImageBrowseView&gt;</pre>

  <pre>    {</pre>

  <pre class="alt">        <span class="kwrd">private</span> IDocumentSession documentSession;</pre>

  <pre>&nbsp;</pre>

  <pre class="alt">        <span class="kwrd">public</span> ImageBrowseViewFactory(IDocumentSession documentSession)</pre>

  <pre>        {</pre>

  <pre class="alt">            <span class="kwrd">this</span>.documentSession = documentSession;</pre>

  <pre>        }</pre>

  <pre class="alt">        <span class="kwrd">public</span> ImageBrowseView Load(ImageBrowseInputModel input)</pre>

  <pre>        {</pre>

  <pre class="alt">            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();</pre>

  <pre>        }</pre>

  <pre class="alt">    }</pre>
</div>
<style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Rather than inject a repository into this factory and do a query on the entities and flattening their data across the view, the IDocumentSession is injected directly into the factory so we can attempt to get only the information we need, in the most direct way possible.</p>

<p>Obviously this requires some tests, but as those tests are a little bit verbose you can just go and look at them on Github!</p>

<div class="csharpcode">
  <pre class="alt">        <span class="kwrd">public</span> ImageBrowseView Load(ImageBrowseInputModel input)</pre>

  <pre>        {</pre>

  <pre class="alt">            <span class="rem">// Adjust the model appropriately</span></pre>

  <pre>            input.PageSize = input.PageSize == 0 || input.PageSize &gt; 20 ? 20 : input.PageSize;</pre>

  <pre class="alt">&nbsp;</pre>

  <pre>            var items = documentSession.Query&lt;ImageDocument&gt;(<font color="#006080">)</font></pre>

  <pre>                .Skip(input.Page * input.PageSize)</pre>

  <pre class="alt">                .Take(input.PageSize)</pre>

  <pre>                .ToArray()</pre>

  <pre class="alt">                .Select(x =&gt; <span class="kwrd">new</span> ImageBrowseItem(x.Title, x.Filename));</pre>

  <pre>               </pre>

  <pre class="alt">            <span class="kwrd">return</span> <span class="kwrd">new</span> ImageBrowseView(</pre>

  <pre>                input.Page,</pre>

  <pre class="alt">                input.PageSize,</pre>

  <pre>                items);</pre>

  <pre class="alt">        }</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>There, that’s all there is to it, this will give us a paged list of ImageDocuments from RavenDB and project that into the view we wish to return.</p>

<p><strong>So surely that’s done then?</strong></p>

<p>This is sub-par for several reasons, the two most important ones are</p>

<ul>
  <li>We’re currently pulling down all the information for the documents and only using two fields </li>

  <li>We’re not currently applying any filtering to this, so there isn’t any real functionality here </li>
</ul>

<p>In the next entries we’ll be looking at the different ways of pulling this information out, and how this view is used within our ASP.NET MVC View</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---the-image-gallery-project-xi---our-first-view.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---the-image-gallery-project-xi---our-first-view.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 14 Oct 2010 08:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - Photo Gallery Project (X)-File Storage]]></title><description><![CDATA[
		<p>The code for this and all other entries can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a>&nbsp;</p>  <p>In the last entry we discussed the actual model being used to store information about uploaded images, and left an interface ready to fill out for dealing with the actual persistence of file data.</p>  <p>We can’t store the file data as part of the document (We could, but it would be a really bad place to put it), and we would most likely place the image data on a dedicated server or shift it off to the cloud using whatever is cool at the moment. </p>  <p>Because this is a blog series about RavenDB we’ll use that RavenDB to do it and see how that plays out, so I’ve created an instance of IFileStorageService called RavenFileStorageService for that purpose.</p>  <p>As I’m once again dealing with RavenDB, let’s go and create the test for this in the Integration test assembly created in the last blog entry.</p>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span>    [TestFixture]</pre>

  <pre><span class="lnum">   2:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> RavenFileStorageServiceTests : LocalRavenTest</pre>

  <pre class="alt"><span class="lnum">   3:  </span>    {</pre>

  <pre><span class="lnum">   4:  </span>        [Test]</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> WhenStoreFileInvokedWithValidArguments_AttachmentIsCreatedInRaven()</pre>

  <pre><span class="lnum">   6:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            Byte[] fileBytes = <span class="kwrd">new</span> Byte[] { 3,1,4,1,5,9};</pre>

  <pre><span class="lnum">   8:  </span>            String filename = <span class="str">"images/mySuperDuperFile"</span>;</pre>

  <pre class="alt"><span class="lnum">   9:  </span>            RavenFileStorageService storage = <span class="kwrd">new</span> RavenFileStorageService(<span class="kwrd">this</span>.Store);</pre>

  <pre><span class="lnum">  10:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  11:  </span>            storage.StoreFile(filename, fileBytes);</pre>

  <pre><span class="lnum">  12:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  13:  </span>            var retrievedAttachment = <span class="kwrd">this</span>.Store.DatabaseCommands.GetAttachment(filename);</pre>

  <pre><span class="lnum">  14:  </span>            Assert.AreEqual(fileBytes, retrievedAttachment.Data);</pre>

  <pre class="alt"><span class="lnum">  15:  </span>        }</pre>

  <pre><span class="lnum">  16:  </span>    }</pre>

  <pre>&nbsp;</pre>

  <pre>&nbsp;</pre>
</div>

<p>We don’t deal with the Unit of Work when uploading attachments, so we talk to the IDocumentStore directly (IE, they are outside the scope of the normal document session transaction). Retrieving an attachment as seen above is just a case of calling GetAttachment with the ‘key’ that it was uploaded with (in this case a path with a folder in it).</p>

<p>Storing the file happens in much the same way, so we inject the IDocumentStore into our RavenFileStorageService and get on with looking at how we do this.</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> RavenFileStorageService : IFileStorageService</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">private</span> IDocumentStore documentStore;</pre>

  <pre><span class="lnum">   4:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">public</span> RavenFileStorageService(IDocumentStore documentStore)</pre>

  <pre><span class="lnum">   6:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            <span class="kwrd">this</span>.documentStore = documentStore;</pre>

  <pre><span class="lnum">   8:  </span>        }</pre>

  <pre class="alt"><span class="lnum">   9:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> StoreFile(<span class="kwrd">string</span> filename, <span class="kwrd">byte</span>[] bytes)</pre>

  <pre><span class="lnum">  10:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  11:  </span>            documentStore.DatabaseCommands.PutAttachment(filename, <span class="kwrd">null</span>, bytes, <span class="kwrd">new</span> Newtonsoft.Json.Linq.JObject());</pre>

  <pre><span class="lnum">  12:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  13:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[






.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>There, a simple call to PutAttachment is all it takes. We ignore the e-tag argument because we not performing an update and we don’t care about overwriting what is there, and we provide an empty JObject for the meta-data argument. Theoretically we could include other data about the file here, and could open up this ability to the application… but we don’t need that yet and therefore have not. (woo, YAGNI in practise).</p>

<p>With all this in place, we now have the ability to upload the actual images - (Take it as a read that I’ve done the boring web bit unless you really want to see it in which case I’ll write an entry on the subject). Our next items of functionality are the ability to actually list and page through these images whilst applying some sort of filter to those searches. This means we finally get to look at generating views and what features of RavenDB are available to do that with.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---photo-gallery-project-x-file-storage.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---photo-gallery-project-x-file-storage.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 12 Oct 2010 10:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - Image Gallery Project (IX)-The Basic Image Model]]></title><description><![CDATA[
		<p>The code for this and all other entries can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a>&nbsp;</p>  <p>Let’s think of a few pieces of (basic) functionality our image gallery will <strong><em>need</em></strong> at least in order to be classified as a functional image gallery</p>  <ul>   <li>Ability to upload a new image      <ul>       <li>Must be associated with user who uploaded it </li>        <li>Must keep the date + time it was uploaded </li>        <li>Must have a&nbsp; title </li>        <li>Must contain a reference to the data that was uploaded for this image          <ul>           <li>Haven’t decided where the data gets stored yet </li>         </ul>       </li>        <li>Must be able to add tags to the image </li>     </ul>   </li>    <li>Ability to browse/page through a list of uploaded images      <ul>       <li>Filterable by user </li>        <li>Order by datetime </li>        <li>Orderable by user </li>        <li>Order by datetime </li>        <li>Search by tags </li>     </ul>   </li>    <li>Ability to modify any mutable properties on the image </li>    <li>Ability to view an individual uploaded image alongside information about who uploaded </li> </ul>  <p>Starting with this simplicity, it’s fairly obvious that Image is going to be a first class citizen in our application we can safely create the document and entity in the standard manner</p>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> ImageDocument</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> Id</pre>

  <pre><span class="lnum">   4:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            get;</pre>

  <pre><span class="lnum">   6:  </span>            set;</pre>

  <pre class="alt"><span class="lnum">   7:  </span>        }</pre>

  <pre><span class="lnum">   8:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">   9:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> OwnerUserId</pre>

  <pre><span class="lnum">  10:  </span>        { </pre>

  <pre class="alt"><span class="lnum">  11:  </span>            get; </pre>

  <pre><span class="lnum">  12:  </span>            set; </pre>

  <pre class="alt"><span class="lnum">  13:  </span>        }</pre>

  <pre><span class="lnum">  14:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  15:  </span>        <span class="kwrd">public</span> DateTime DateUploaded</pre>

  <pre><span class="lnum">  16:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  17:  </span>            get;</pre>

  <pre><span class="lnum">  18:  </span>            set;</pre>

  <pre class="alt"><span class="lnum">  19:  </span>        }</pre>

  <pre><span class="lnum">  20:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  21:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> Title</pre>

  <pre><span class="lnum">  22:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  23:  </span>            get;</pre>

  <pre><span class="lnum">  24:  </span>            set;</pre>

  <pre class="alt"><span class="lnum">  25:  </span>        }</pre>

  <pre><span class="lnum">  26:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  27:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> Filename</pre>

  <pre><span class="lnum">  28:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  29:  </span>            get;</pre>

  <pre><span class="lnum">  30:  </span>            set;</pre>

  <pre class="alt"><span class="lnum">  31:  </span>        }</pre>

  <pre><span class="lnum">  32:  </span>        </pre>

  <pre class="alt"><span class="lnum">  33:  </span>        <span class="kwrd">public</span> List&lt;ImageTagDocument&gt; Tags</pre>

  <pre><span class="lnum">  34:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  35:  </span>            get;</pre>

  <pre><span class="lnum">  36:  </span>            set;</pre>

  <pre class="alt"><span class="lnum">  37:  </span>        }</pre>

  <pre><span class="lnum">  38:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  39:  </span>        <span class="kwrd">public</span> ImageDocument() { Tags = <span class="kwrd">new</span> List&lt;ImageTagDocument&gt;(); }</pre>

  <pre><span class="lnum">  40:  </span>    }</pre>

  <pre>&nbsp;</pre>
</div>

<div class="csharpcode">
  <div class="csharpcode">
    <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> ImageTagDocument</pre>

    <pre><span class="lnum">   2:  </span>    {</pre>

    <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> Name</pre>

    <pre><span class="lnum">   4:  </span>        {</pre>

    <pre class="alt"><span class="lnum">   5:  </span>            get;</pre>

    <pre><span class="lnum">   6:  </span>            set;</pre>

    <pre class="alt"><span class="lnum">   7:  </span>        }</pre>

    <pre><span class="lnum">   8:  </span>    }</pre>
  </div>
  <style type="text/css">![CDATA[





.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style><style type="text/css">![CDATA[





.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style></div>

<p></p><style type="text/css">![CDATA[





.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style><style type="text/css">![CDATA[





.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>I’ve included the id of the user as the owner on the ImageDocument, and created an entity and repository to go along with it in the same fashion as the User entity/document/repository. 

<p><strong>Note</strong>: I’ve included a list of tags on my document, and I haven’t had to do anything special, they will get saved along with the entire ImageDocument automatically</p>

<p><strong>The interaction</strong></p>

<p>Ignoring the process of how we upload the image within our actual MVC2 project (this series is about RavenDB!), assume a command has been sent containing the user id, title, tags and actual bytes for the file upload. </p>

<p>I’ve defined a service called&nbsp; ImageUploaderService who takes in the relevant information to be able to do something about this file upload problem.</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">interface</span> IImageUploaderService</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">void</span> UploadUserImage(User user, <span class="kwrd">string</span> title, <span class="kwrd">string</span>[] tags, Byte[] data);</pre>

  <pre><span class="lnum">   4:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[





.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>When I come to implement that in the default implementation (called ImageUploaderService), it is obvious that two things need to happen; it will need to process the image data appropriately and put it somewhere for storage, and it will need to create the actual entity containing the information about this image.</p>

<p>I’m going to delegate the problem of “where to put files” to yet another service that I place in a new area of my project called “infrastructure”, and I christen it “IFileStorageService” </p>

<div class="csharpcode">&nbsp;</div>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">interface</span> IFileStorageService</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">void</span> StoreFile(<span class="kwrd">string</span> filename, Byte[] bytes);</pre>

  <pre><span class="lnum">   4:  </span>    }</pre>
</div>

<p>With that done, we can safely ignore this problem and focus on creating the new Image entity and persisting that, so let’s start with the constructor:</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span> <span class="kwrd">public</span> Image(User owner, <span class="kwrd">string</span> title, <span class="kwrd">string</span> filename)</pre>

  <pre><span class="lnum">   2:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>            innerDocument = <span class="kwrd">new</span> ImageDocument()</pre>

  <pre><span class="lnum">   4:  </span>            {</pre>

  <pre class="alt"><span class="lnum">   5:  </span>                DateUploaded = DateTime.Now,</pre>

  <pre><span class="lnum">   6:  </span>                OwnerUserId = owner.UserId,</pre>

  <pre class="alt"><span class="lnum">   7:  </span>                Title = title,</pre>

  <pre><span class="lnum">   8:  </span>                Filename = filename</pre>

  <pre class="alt"><span class="lnum">   9:  </span>            };</pre>

  <pre><span class="lnum">  10:  </span>        }</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>This is borderline ‘move it to a factory’ material, but nothing is majorly different here to how we constructed the User entity, other than we take <em>in</em> a User entity and copy its id across to our document so we know who created it. </p>

<p>As shown here, I’m not against adding properties to my entities to expose data so long as they’re read only and actually needed – I don’t consider this to be a waste of time as we’ll see when we reach the ‘Views’ in our application we hardly ever need data from the entities themselves. What I don’t do is go through and create properties to mirror what I’m storing in the document itself, that would be time consuming and pointless.</p>

<p>My ImageUploaderService in the meantime has been left with no implementation, so after writing the tests (which I have done), with our existing infrastructure it looks something like this</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> ImageUploaderService : IImageUploaderService</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">private</span> IFileStorageService fileStorageService;</pre>

  <pre><span class="lnum">   4:  </span>        <span class="kwrd">private</span> IImageRepository imageRepository;</pre>

  <pre class="alt"><span class="lnum">   5:  </span>&nbsp;</pre>

  <pre><span class="lnum">   6:  </span>        <span class="kwrd">public</span> ImageUploaderService(IFileStorageService fileStorageService, IImageRepository imageRepository)</pre>

  <pre class="alt"><span class="lnum">   7:  </span>        {</pre>

  <pre><span class="lnum">   8:  </span>            <span class="kwrd">this</span>.fileStorageService = fileStorageService;</pre>

  <pre class="alt"><span class="lnum">   9:  </span>            <span class="kwrd">this</span>.imageRepository = imageRepository;</pre>

  <pre><span class="lnum">  10:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  11:  </span>&nbsp;</pre>

  <pre><span class="lnum">  12:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> UploadUserImage(User user, <span class="kwrd">string</span> title, <span class="kwrd">string</span>[] tags, <span class="kwrd">byte</span>[] data)</pre>

  <pre class="alt"><span class="lnum">  13:  </span>        {</pre>

  <pre><span class="lnum">  14:  </span>            <span class="kwrd">string</span> filename = String.Format(<span class="str">"Images/{0}"</span>, Guid.NewGuid().ToString());</pre>

  <pre class="alt"><span class="lnum">  15:  </span>            fileStorageService.StoreFile(filename, data);</pre>

  <pre><span class="lnum">  16:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  17:  </span>            Image newImage = <span class="kwrd">new</span> Image(user, filename, title);</pre>

  <pre><span class="lnum">  18:  </span>            <span class="kwrd">foreach</span> (var tag <span class="kwrd">in</span> tags)</pre>

  <pre class="alt"><span class="lnum">  19:  </span>            {</pre>

  <pre><span class="lnum">  20:  </span>                newImage.AddTag(tag);</pre>

  <pre class="alt"><span class="lnum">  21:  </span>            }</pre>

  <pre><span class="lnum">  22:  </span>            imageRepository.Add(newImage);</pre>

  <pre class="alt"><span class="lnum">  23:  </span>        }</pre>

  <pre><span class="lnum">  24:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>This is a good thing, we’ve got all the required behaviour nicely wrapped up and we’re still not worrying about persistence (I like not worrying about persistence) and although it’s simplistic, the entities are responsible for enacting change and therefore guarding the state of the underlying documents.</p>

<p>In the next entry we’ll look at how we actually store that file using the RavenDB attachments API.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---image-gallery-project-ix-the-basic-image-model.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---image-gallery-project-ix-the-basic-image-model.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 10 Oct 2010 15:00:00 GMT</pubDate></item><item><title><![CDATA[#NhDay - A post-mortem debugging session]]></title><description><![CDATA[
		<p>Warning: This is an un-edited dump of words because Twitter isn’t sufficient</p>  <p><strong>Everybody who attended and organised</strong></p>  <p>Well - that was fun, I am really thankful to those who voted for my session and for Simone for inviting me to speak in the first place – I was apprehensive about coming to speak in a country whose language I knew precisely zero words of (not to mention having to get about in the first place), but everybody was so helpful that it wasn’t a problem at all. I did ask the tourist information office for the translations to three useful words so I could at least pretend I’d made an effort (“Hello”, “Thank-you” and “Sorry” will get you everywhere in life <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none;" class="wlEmoticon wlEmoticon-winkingsmile" alt="Winking smile" src="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/NhDay_D85D/wlEmoticon-winkingsmile_2.png">)</p>  <p>A <em>massive</em> thanks to everybody who contributed to my food bills over the weekend (I was all ready to pay for dinner in our informal post-event meal but I was forbidden from doing so – wowee!). Also, the NHibernate t-shirt looks great, and I’m proud to be wearing my allegiance to this fabulous ORM – especially as it has my name on it.</p>  <p>The Alt.net community in Italy (and Simone) deserve a massive congratulations for a very well organised event, and also a massive cheer for managing to get so many people to attend probably what is the first single OSS product oriented conference for .NET ever. I was amazed by the turnout and also pleased by the quality of developer who turned up to see the talks and ask discuss software outside of the sessions.</p>  <p>Getting Fabio and Oren to do a Q&amp;A session at the end of the day was a stroke of genius, and I really enjoyed listening to the discussion ebb and flow whilst I sat at the back writing RavenDB code! </p>  <p>Oh yes, in the periphery of the event you could barely get me to shut up about RavenDB, and it was a good opportunity to catch up with Oren and rapid-fire through ideas for improving the developer experience (two very late nights later and I’m now amazed at how different RavenDB is already, although I suspect I was more of a hindrance than help towards that aim!).</p>  <p><strong>I shouldn’t be allowed out by myself</strong></p>  <p>Can’t write a blog entry of thanks without tipping my metaphorical hat at the passport officer who helped me renew my passport in time for the event – it was touch and go after over the phone I was told it would take a week and I’d have to miss the event, turns out if you ask nicely enough and are polite, that bureaucracy can be circumvented even in the London Passport Office. <strong>*sweet*.</strong></p>  <p>Onto the subject of <em>my</em> talk – what can I say but apologies for being so disorganised, I’ve just bought a new laptop bag and I forgot to pack my VGA/DVI adapter, I had to borrow an foreign laptop for the talk which had some crazy key placement (four keys just to output a curly brace!) AND re-sharper installed (which I don’t use, yes I know). Oh, and my talk was set up to use MySQL and I had to change my configuration to point at an MS-SQL database, with so many things different I ended up overrunning and making a bit of a meal of things.</p>  <p>I got a lot of laughter from the audience as I tried to work my way around these issues, and I apologise that no doubt it got a bit old towards the end of the session – I hope that people still got something out of it!</p>  <p> Ending on another note of If you’re going to stay up until 4am writing code in a hotel lobby, make sure you d o it in <em>your</em> hotel, trying to get back into your hotel room at that time in a locked compound when you don’t speak the native language is pretty damned hard – especially when your swipe card has stopped working because the automated system has decided that at 4am on the morning of your departure you shouldn’t be trying to get into your room! Oh well, I managed to get a couple of hours sleep thanks to hotel security opening my door for me.</p>  <p>Basically were it not for the kindness of strangers the weekend could have been very different indeed, it’s a miracle that I even manage to tie my shoelaces in the morning!</p>  <p><strong>The actual content</strong></p>  <p>I enjoyed the talks, and I was pleased to see the second track was actually very busy and full of good content, and the main track was also of a good quality, definitely a good mix of technical and high level overviews and from the sound of things using the #nhday hashtag I wasn’t alone in thinking this. </p>  <p><strong>The desert</strong></p>  <p>Mmmmmmmm</p>
	]]></description><link>http://codeofrob.com/entries/nhday---a-post-mortem-debugging-session.html</link><guid isPermaLink="true">http://codeofrob.com/entries/nhday---a-post-mortem-debugging-session.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 10 Oct 2010 13:10:00 GMT</pubDate></item><item><title><![CDATA[Upcoming talks (mostly on RavenDB)]]></title><description><![CDATA[
		<p>I’ve put myself out a bit to see and I’ve a couple left to confirm, but the current list as it stands looks like this:</p>  <p><strong>Confirmed</strong></p>  <ul>   <li>9th October 2010 - Bologna, Italy (Model-first with FluentNHibernate) </li>    <li>2nd November 2010 – Oxford NxtGenUG- RavenDB Walkthrough </li>    <li>3rd November 2010 – Woking DevEvening- RavenDB Walkthrough </li>    <li>9th November 2010 – Øredev -Malmö, Sweden – RavenDB Workshop </li>    <li>12th November 2010 - Øredev -Malmö, Sweden – Pluggable web applications in ASP.NET MVC</li>    <li>20th November 2010 – Dundee NoSQL Day - RavenDB Deepdive </li>    <li>15th December 2010 - Manchester NxtGenUG- RavenDB Walkthrough </li>    <li>20th January 2011 - Southampton NxtGenUG- RavenDB Walkthrough </li>    <li>25th January 2011 -&nbsp; Cambridge NxtGenUG- RavenDB Walkthrough </li> 
<li>14th March 2011 - Hereford NxtGenUG - RavenDB Walkthrough</li>

</ul>  <p><strong>Still to be confirmed</strong></p>  <ul>    <li>29th January 2011 – Reading DDD9 - RavenDB or Structuremap <em><strong>IF</strong></em> my session gets accepted </li> </ul>  <p>So basically, if you want to learn about RavenDB and haven’t had time to do it yourself,&nbsp; catch me at the dates above for a code-heavy walkthrough and a good chin wag after.</p>  <p>If anybody else runs a user group or other developer oriented group and wants some RavenDB action then don’t hesitate to grab me on Twitter ( <a href="http://twitter.com/robashton">@robashton</a> ) or comments or however else you want to get in touch.</p>
	]]></description><link>http://codeofrob.com/entries/upcoming-talks-mostly-on-ravendb.html</link><guid isPermaLink="true">http://codeofrob.com/entries/upcoming-talks-mostly-on-ravendb.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 07 Oct 2010 07:43:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - Image Gallery Project (VIII) - Signing In + RavenDB Testing]]></title><description><![CDATA[
		<p>The code for this and all other entries can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a>&nbsp;</p>  <p>With registration conquered, the next challenge is to allow users to sign in and out, authenticating against RavenDB’s document store and telling ASP.NET who the current user is. This should be a breeze now everything else is in place.</p>  <p><strong>Post-registration log-on</strong></p>  <p>This is a simplistic system, and we just want the ability to log in for now, so we’re not going to bother with user e-mail address validation or OpenId, although that might be something we could visit later, the ability to log in and out is a fairly fundamental blocker when it comes to adding the rest of the functionality.</p>  <p>First thing we need to do disassociate ourselves from the FormsAuthentication static class or anything like it, out of principle I don’t use any of the built in provider garbage in MS-MVC, implementing enormous interfaces isn’t my idea of fun and I’ve never managed to work out what else it gives me. I do however like to use FormsAuthentication to manage cookies for me.</p>  <p>I just want to be able to test if I want to, and I do want to test – even if it’s just for simple interaction.</p>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">interface</span> IAuthenticationService</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">void</span> SignIn(<span class="kwrd">string</span> username, <span class="kwrd">bool</span> persistent);</pre>

  <pre><span class="lnum">   4:  </span>        <span class="kwrd">void</span> SignOut();</pre>

  <pre class="alt"><span class="lnum">   5:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[







.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<div class="csharpcode">&nbsp;</div>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> AuthenticationService : IAuthenticationService</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> SignIn(<span class="kwrd">string</span> username, <span class="kwrd">bool</span> persistent)</pre>

  <pre><span class="lnum">   4:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            FormsAuthentication.SetAuthCookie(username, persistent);</pre>

  <pre><span class="lnum">   6:  </span>        }</pre>

  <pre class="alt"><span class="lnum">   7:  </span>&nbsp;</pre>

  <pre><span class="lnum">   8:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> SignOut()</pre>

  <pre class="alt"><span class="lnum">   9:  </span>        {</pre>

  <pre><span class="lnum">  10:  </span>            FormsAuthentication.SignOut();</pre>

  <pre class="alt"><span class="lnum">  11:  </span>        }</pre>

  <pre><span class="lnum">  12:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[







.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>This is just an implementation detail and not worth going into further, the thrust of this now is that straight after registration, we’re going to log in. We’re not going to wait for the user document to get indexed into any views and we’re not going to wait for confirmation that all went well – the command didn’t throw an exception and that’s good enough for us.</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>       [AcceptVerbs(HttpVerbs.Post)]</pre>

  <pre><span class="lnum">   2:  </span>        <span class="kwrd">public</span> ActionResult Register(UserRegisterViewModel model)</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        {</pre>

  <pre><span class="lnum">   4:  </span>            <span class="kwrd">if</span> (ModelState.IsValid)</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            {</pre>

  <pre><span class="lnum">   6:  </span>                commandInvoker.Execute(<span class="kwrd">new</span> RegisterNewUserCommand(model.Username, model.Password));</pre>

  <pre class="alt"><span class="lnum">   7:  </span>                authenticationService.SignIn(model.Username, model.StayLoggedIn);</pre>

  <pre><span class="lnum">   8:  </span>                <span class="kwrd">return</span> RedirectToAction(<span class="str">"Index"</span>, <span class="str">"Home"</span>);</pre>

  <pre class="alt"><span class="lnum">   9:  </span>            }</pre>

  <pre><span class="lnum">  10:  </span>            <span class="kwrd">else</span></pre>

  <pre class="alt"><span class="lnum">  11:  </span>            {</pre>

  <pre><span class="lnum">  12:  </span>                <span class="kwrd">return</span> View(model);</pre>

  <pre class="alt"><span class="lnum">  13:  </span>            }            </pre>

  <pre><span class="lnum">  14:  </span>        }</pre>
</div>
<style type="text/css">![CDATA[







.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>For those who have asked, while I am employing TDD whilst writing the entire application (I have tests for the above action that I wrote before I wrote the action), I’m not talking about them as they aren’t directly or indirectly related with RavenDB.</p>

<p><strong>Returning visitor sign-in</strong></p>

<p>As before I have created a view model (with Username, Password and StayLoggedIn on it) and a form that uses this on the SignIn page. I am going to use the validator to check the credentials along with other logic. </p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>   <span class="kwrd">public</span> <span class="kwrd">class</span> UserSignInViewModelValidator : AbstractValidator&lt;UserSignInViewModel&gt;</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> UserSignInViewModelValidator(IUserService userService)</pre>

  <pre><span class="lnum">   4:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            <span class="kwrd">this</span>.RuleFor(x =&gt; x.Username)</pre>

  <pre><span class="lnum">   6:  </span>                .NotEmpty()</pre>

  <pre class="alt"><span class="lnum">   7:  </span>                .Must((model, property) =&gt; userService.DoesUserExistWithUsernameAndPassword(model.Username, model.Password))</pre>

  <pre><span class="lnum">   8:  </span>                    .WithMessage(<span class="str">"User/password combination does not exist in our system"</span>);</pre>

  <pre class="alt"><span class="lnum">   9:  </span>&nbsp;</pre>

  <pre><span class="lnum">  10:  </span>            <span class="kwrd">this</span>.RuleFor(x =&gt; x.Password)</pre>

  <pre class="alt"><span class="lnum">  11:  </span>                .NotEmpty();</pre>

  <pre><span class="lnum">  12:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  13:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[







.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>As you can see, I’ve added another method to our service IUserService, this still doesn’t feel right but I’m confident I’ll come up with a better solution so I keep on going and write a test for that as I did before.</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>        [Test]</pre>

  <pre><span class="lnum">   2:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> WhenUserExists_DoesUserExistWithUsernameAndPassword_ReturnsTrue()</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        {</pre>

  <pre><span class="lnum">   4:  </span>            <span class="kwrd">using</span> (var session = Store.OpenSession())</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            {</pre>

  <pre><span class="lnum">   6:  </span>                session.Store(<span class="kwrd">new</span> UserDocument()</pre>

  <pre class="alt"><span class="lnum">   7:  </span>                {</pre>

  <pre><span class="lnum">   8:  </span>                    PasswordHash = HashUtil.HashPassword(<span class="str">"password"</span>),</pre>

  <pre class="alt"><span class="lnum">   9:  </span>                    Username = <span class="str">"testUser"</span></pre>

  <pre><span class="lnum">  10:  </span>                });</pre>

  <pre class="alt"><span class="lnum">  11:  </span>                session.SaveChanges();</pre>

  <pre><span class="lnum">  12:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  13:  </span>                UserService service = <span class="kwrd">new</span> UserService(session);</pre>

  <pre><span class="lnum">  14:  </span>                <span class="kwrd">bool</span> result = service.DoesUserExistWithUsernameAndPassword(<span class="str">"testUser"</span>, <span class="str">"password"</span>);</pre>

  <pre class="alt"><span class="lnum">  15:  </span>                Assert.True(result);</pre>

  <pre><span class="lnum">  16:  </span>            }</pre>

  <pre class="alt"><span class="lnum">  17:  </span>        }</pre>

  <pre><span class="lnum">  18:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  19:  </span>        [Test]</pre>

  <pre><span class="lnum">  20:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> WhenUserDoesNotExist_DoesUserExistWithUsernameAndPassword_ReturnsFalse()</pre>

  <pre class="alt"><span class="lnum">  21:  </span>        {</pre>

  <pre><span class="lnum">  22:  </span>            <span class="kwrd">using</span> (var session = Store.OpenSession())</pre>

  <pre class="alt"><span class="lnum">  23:  </span>            {</pre>

  <pre><span class="lnum">  24:  </span>                session.Store(<span class="kwrd">new</span> UserDocument()</pre>

  <pre class="alt"><span class="lnum">  25:  </span>                {</pre>

  <pre><span class="lnum">  26:  </span>                    PasswordHash = HashUtil.HashPassword(<span class="str">"password"</span>),</pre>

  <pre class="alt"><span class="lnum">  27:  </span>                    Username = <span class="str">"testUser"</span></pre>

  <pre><span class="lnum">  28:  </span>                });</pre>

  <pre class="alt"><span class="lnum">  29:  </span>                session.SaveChanges();</pre>

  <pre><span class="lnum">  30:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  31:  </span>                UserService service = <span class="kwrd">new</span> UserService(session);</pre>

  <pre><span class="lnum">  32:  </span>                <span class="kwrd">bool</span> result = service.DoesUserExistWithUsernameAndPassword(<span class="str">"testUser"</span>, <span class="str">"password2"</span>);</pre>

  <pre class="alt"><span class="lnum">  33:  </span>                Assert.False(result);</pre>

  <pre><span class="lnum">  34:  </span>            }</pre>

  <pre class="alt"><span class="lnum">  35:  </span>        }</pre>
</div>
<style type="text/css">![CDATA[







.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Again this means that all I have to do in my controller is check for a valid model state before authenticating against the service we created earlier</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>       [AcceptVerbs(HttpVerbs.Post)]</pre>

  <pre><span class="lnum">   2:  </span>        <span class="kwrd">public</span> ActionResult SignIn(UserSignInViewModel model)</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        {</pre>

  <pre><span class="lnum">   4:  </span>            <span class="kwrd">if</span> (ModelState.IsValid)</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            {</pre>

  <pre><span class="lnum">   6:  </span>                authenticationService.SignIn(model.Username, model.StayLoggedIn);</pre>

  <pre class="alt"><span class="lnum">   7:  </span>                <span class="kwrd">return</span> RedirectToAction(<span class="str">"Index"</span>, <span class="str">"Home"</span>);</pre>

  <pre><span class="lnum">   8:  </span>            }</pre>

  <pre class="alt"><span class="lnum">   9:  </span>            <span class="kwrd">else</span></pre>

  <pre><span class="lnum">  10:  </span>            {</pre>

  <pre class="alt"><span class="lnum">  11:  </span>                <span class="kwrd">return</span> View(model);</pre>

  <pre><span class="lnum">  12:  </span>            }          </pre>

  <pre class="alt"><span class="lnum">  13:  </span>        }</pre>
</div>
<style type="text/css">![CDATA[







.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p><strong>Hang on a second, you keep writing your tests against an actual RavenDB instance</strong></p>

<p>I’ve only actually shown a couple of tests so far, because we’ve only had a small amount of direct interaction with RavenDB, the problem is that when testing queries the only reliable way to see if they work is to execute them in the system under test (an integration test effectively). I could be really clever here and write a Linq provider that substitutes RavenDB for an in memory lucene index or something radical like that, but I’m not that bright and wouldn’t know where to begin, so I keep on starting up RavenDB in the tests that need it by inheriting from the following test class:</p>

<div class="csharpcode">
  <pre class="alt">    <span class="kwrd">public</span> <span class="kwrd">class</span> LocalRavenTest</pre>

  <pre>    {</pre>

  <pre class="alt">        <span class="kwrd">private</span> EmbeddableDocumentStore store;</pre>

  <pre>        <span class="kwrd">public</span> EmbeddableDocumentStore Store { get { <span class="kwrd">return</span> store; } }</pre>

  <pre class="alt">&nbsp;</pre>

  <pre>        [SetUp]</pre>

  <pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">void</span> CreateStore()</pre>

  <pre>        {</pre>

  <pre class="alt">            store = <span class="kwrd">new</span> EmbeddableDocumentStore</pre>

  <pre>            {</pre>

  <pre class="alt">                Configuration = <span class="kwrd">new</span> RavenConfiguration</pre>

  <pre>                {</pre>

  <pre class="alt">                    RunInMemory = <span class="kwrd">true</span></pre>

  <pre>                }</pre>

  <pre class="alt">            };</pre>

  <pre>            store.Initialize();</pre>

  <pre class="alt">            IndexCreation.CreateIndexes(<span class="kwrd">typeof</span>(ImageTags_GroupByTagName).Assembly, store);</pre>

  <pre>        }</pre>

  <pre class="alt">&nbsp;</pre>

  <pre>        [TearDown]</pre>

  <pre class="alt">        <span class="kwrd">public</span> <span class="kwrd">void</span> DestroyStore()</pre>

  <pre>        {</pre>

  <pre class="alt">            store.Dispose();</pre>

  <pre>        }</pre>

  <pre class="alt">&nbsp;</pre>

  <pre>        <span class="kwrd">public</span> <span class="kwrd">void</span> WaitForIndexing()</pre>

  <pre class="alt">        {</pre>

  <pre>            <span class="kwrd">while</span> (store.DocumentDatabase.Statistics.StaleIndexes.Length &gt; 0)</pre>

  <pre class="alt">            {</pre>

  <pre>                Thread.Sleep(100);</pre>

  <pre class="alt">            }</pre>

  <pre>        }</pre>

  <pre class="alt">    }</pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p></p><style type="text/css">![CDATA[


.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>This is pretty cool, RavenDB can run in memory which means not having to perform masses of IO during testing – this keeps our tests nice and fast and allows us to write tests against all of our&nbsp; RavenDB integration. (A preference when developing against the unstable branch)

<p>I take some time out of this busy development schedule to create a new Assembly, <strong>RavenGallery.Core.Tests.Integration.dll</strong> and move those tests to it. They might be <em>fast</em>, but fast is relative and I still don’t want to be waiting for these every time I want to test my other code.</p>

<p>In the next instalment, we’ll look at our document model for storing images with some rudimentary support for tagging and labelling, it’s about to get interesting.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---image-gallery-project-viii---signing-in-+-ravendb-testing.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---image-gallery-project-viii---signing-in-+-ravendb-testing.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 07 Oct 2010 06:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - Image Gallery Project (VII) - User Registration]]></title><description><![CDATA[
		<p>The code for this and all other entries can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a>&nbsp;</p>  <p>Now we’re here, let’s talk about registration using the system outlined on the previous pages when combined with RavenDB.</p>  <p><strong>Registration Validation</strong></p>  <p>We’re going to assume we have a form which can be represented by the following view model:</p>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> UserRegisterViewModel</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        [DisplayName(<span class="str">"Username"</span>)]</pre>

  <pre><span class="lnum">   4:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> Username</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        {</pre>

  <pre><span class="lnum">   6:  </span>            get;</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            set;</pre>

  <pre><span class="lnum">   8:  </span>        }</pre>

  <pre class="alt"><span class="lnum">   9:  </span>&nbsp;</pre>

  <pre><span class="lnum">  10:  </span>         [DisplayName(<span class="str">"Password"</span>)]</pre>

  <pre class="alt"><span class="lnum">  11:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> Password</pre>

  <pre><span class="lnum">  12:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  13:  </span>            get;</pre>

  <pre><span class="lnum">  14:  </span>            set;</pre>

  <pre class="alt"><span class="lnum">  15:  </span>        }</pre>

  <pre><span class="lnum">  16:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  17:  </span>        [DisplayName(<span class="str">"Stay logged in"</span>)]</pre>

  <pre><span class="lnum">  18:  </span>        <span class="kwrd">public</span> Boolean StayLoggedIn</pre>

  <pre class="alt"><span class="lnum">  19:  </span>        {</pre>

  <pre><span class="lnum">  20:  </span>            get;</pre>

  <pre class="alt"><span class="lnum">  21:  </span>            set;</pre>

  <pre><span class="lnum">  22:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  23:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[










.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>There, that was easy – but remember on the previous page where I said we only needed views for views and entities for behaviour?&nbsp; There are always exceptions, and for validation purposes I’m going to define an interface called IUserService which we can ask if users exist or not.</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span> <span class="kwrd">public</span> <span class="kwrd">class</span> UserRegisterViewModelValidator : AbstractValidator&lt;UserRegisterViewModel&gt;</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> UserRegisterViewModelValidator(IUserService userService)</pre>

  <pre><span class="lnum">   4:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            <span class="kwrd">this</span>.RuleFor(x =&gt; x.Username).NotEmpty().Must(x =&gt; !userService.DoesUserExistWithUsername(x));</pre>

  <pre><span class="lnum">   6:  </span>            <span class="kwrd">this</span>.RuleFor(x =&gt; x.Password).NotEmpty();</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            <span class="kwrd">this</span>.RuleFor(x =&gt; x.StayLoggedIn).NotEmpty();</pre>

  <pre><span class="lnum">   8:  </span>        }</pre>

  <pre class="alt"><span class="lnum">   9:  </span>    }</pre>
</div>

<div class="csharpcode">&nbsp;</div>

<div class="csharpcode">So, we have</div>

<div class="csharpcode">&nbsp;</div>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> UserService : IUserService</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> <span class="kwrd">bool</span> DoesUserExistWithUsername(<span class="kwrd">string</span> username)</pre>

  <pre><span class="lnum">   4:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            <span class="kwrd">throw</span> <span class="kwrd">new</span> NotImplementedException();</pre>

  <pre><span class="lnum">   6:  </span>        }</pre>

  <pre class="alt"><span class="lnum">   7:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[










.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style><style type="text/css">![CDATA[










.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>I am just going to hard code the query into this service, and I really need an integration test for this, so that’s what I’m going to do, I’m going to fire up a local instance of RavenDB, populate it with some data and run some tests against it. I always write integration tests against RavenDB, even for trivial things like this – just in case RavenDB changes or I make a whoopsee somewhere down the line.</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    [TestFixture]</pre>

  <pre><span class="lnum">   2:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> UserServiceTests : LocalRavenTest</pre>

  <pre class="alt"><span class="lnum">   3:  </span>    {</pre>

  <pre><span class="lnum">   4:  </span>        [Test]</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> WhenUserExists_DoesUserExistWithUsername_ReturnsTrue()</pre>

  <pre><span class="lnum">   6:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            <span class="kwrd">using</span> (var session = Store.OpenSession())</pre>

  <pre><span class="lnum">   8:  </span>            {</pre>

  <pre class="alt"><span class="lnum">   9:  </span>                session.Store(<span class="kwrd">new</span> UserDocument()</pre>

  <pre><span class="lnum">  10:  </span>                {</pre>

  <pre class="alt"><span class="lnum">  11:  </span>                     PasswordHash = <span class="str">"pass"</span>,</pre>

  <pre><span class="lnum">  12:  </span>                     Username = <span class="str">"testUser"</span></pre>

  <pre class="alt"><span class="lnum">  13:  </span>                });</pre>

  <pre><span class="lnum">  14:  </span>                session.SaveChanges();</pre>

  <pre class="alt"><span class="lnum">  15:  </span>&nbsp;</pre>

  <pre><span class="lnum">  16:  </span>                UserService service = <span class="kwrd">new</span> UserService(session);</pre>

  <pre class="alt"><span class="lnum">  17:  </span>                <span class="kwrd">bool</span> result = service.DoesUserExistWithUsername(<span class="str">"testUser"</span>);</pre>

  <pre><span class="lnum">  18:  </span>                Assert.True(result);</pre>

  <pre class="alt"><span class="lnum">  19:  </span>            }</pre>

  <pre><span class="lnum">  20:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  21:  </span>&nbsp;</pre>

  <pre><span class="lnum">  22:  </span>        [Test]</pre>

  <pre class="alt"><span class="lnum">  23:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> WhenUserDoesNotExist_DoesUserExistWithUsername_ReturnsFalse()</pre>

  <pre><span class="lnum">  24:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  25:  </span>            <span class="kwrd">using</span> (var session = Store.OpenSession())</pre>

  <pre><span class="lnum">  26:  </span>            {</pre>

  <pre class="alt"><span class="lnum">  27:  </span>                session.Store(<span class="kwrd">new</span> UserDocument()</pre>

  <pre><span class="lnum">  28:  </span>                {</pre>

  <pre class="alt"><span class="lnum">  29:  </span>                    PasswordHash = <span class="str">"pass"</span>,</pre>

  <pre><span class="lnum">  30:  </span>                    Username = <span class="str">"testUser"</span></pre>

  <pre class="alt"><span class="lnum">  31:  </span>                });</pre>

  <pre><span class="lnum">  32:  </span>                session.SaveChanges();</pre>

  <pre class="alt"><span class="lnum">  33:  </span>&nbsp;</pre>

  <pre><span class="lnum">  34:  </span>                UserService service = <span class="kwrd">new</span> UserService(session);</pre>

  <pre class="alt"><span class="lnum">  35:  </span>                <span class="kwrd">bool</span> result = service.DoesUserExistWithUsername(<span class="str">"testOtherUser"</span>);</pre>

  <pre><span class="lnum">  36:  </span>                Assert.False(result);</pre>

  <pre class="alt"><span class="lnum">  37:  </span>            }</pre>

  <pre><span class="lnum">  38:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  39:  </span>    }</pre>
</div>

<p></p><style type="text/css">![CDATA[










.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>LocalRavenTest just creates a document store in the local directory and takes care of clearing it up again. As you can see, we have just come across the functionality of saving documents to RavenDB for the first time, and it couldn’t be any simpler. </p>

<ul>
  <li>Store.OpenSession opens an IDocumentSession as described earlier in the series </li>

  <li>IDocumentSession.Store() takes an entirely arbitrary POCO and saves it to RavenDB </li>

  <li>IDocumentSession.SaveChanges() flushes any changes (in this case, our saved POCO) to RavenDB </li>

  <li>Unless SaveChanges is invoked, nothing happens </li>
</ul>

<p>We pass the IDocumentSession into the UserService and then test the functionality of UserService. Predictably our tests fail because we haven’t written the code yet!</p>

<p>Oh wait, here we go</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> UserService : IUserService</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> IDocumentSession documentSession;</pre>

  <pre><span class="lnum">   4:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">public</span> UserService(IDocumentSession documentSession)</pre>

  <pre><span class="lnum">   6:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            <span class="kwrd">this</span>.documentSession = documentSession;</pre>

  <pre><span class="lnum">   8:  </span>        }</pre>

  <pre class="alt"><span class="lnum">   9:  </span>&nbsp;</pre>

  <pre><span class="lnum">  10:  </span>        <span class="kwrd">public</span> <span class="kwrd">bool</span> DoesUserExistWithUsername(<span class="kwrd">string</span> username)</pre>

  <pre class="alt"><span class="lnum">  11:  </span>        {</pre>

  <pre><span class="lnum">  12:  </span>            <span class="kwrd">return</span> documentSession.DynamicQuery&lt;User&gt;()</pre>

  <pre class="alt"><span class="lnum">  13:  </span>                .Where(x =&gt; x.Username == username)</pre>

  <pre><span class="lnum">  14:  </span>                .Any();</pre>

  <pre class="alt"><span class="lnum">  15:  </span>        }</pre>

  <pre><span class="lnum">  16:  </span>    }</pre>
</div>

<p></p><style type="text/css">![CDATA[










.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>And this is how we query the documents stored inside Raven, a simple LINQ query! This time when we run the tests they pass -&nbsp; which means we have a controller action complete with a validated model ready for processing. I’m still not happy with where that functionality has been placed, but until a better solution presents itself it’ll do as a way of letting us get on.

<p><strong>Registration Command</strong></p>

<p>So, with the above taken place, we have arrived inside the Register action and we know if the model state is valid or not so we send&nbsp; the appropriate command through our command invoker like so</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>        [AcceptVerbs(HttpVerbs.Post)]</pre>

  <pre><span class="lnum">   2:  </span>        <span class="kwrd">public</span> ActionResult Register(UserRegisterViewModel model)</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        {</pre>

  <pre><span class="lnum">   4:  </span>            <span class="kwrd">if</span> (ModelState.IsValid)</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            {</pre>

  <pre><span class="lnum">   6:  </span>                <span class="rem">// Send command</span></pre>

  <pre class="alt"><span class="lnum">   7:  </span>                commandInvoker.Execute(<span class="kwrd">new</span> RegisterNewUserCommand(model.Username, model.Password));</pre>

  <pre><span class="lnum">   8:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">   9:  </span>                <span class="rem">// Go back to home</span></pre>

  <pre><span class="lnum">  10:  </span>                <span class="kwrd">return</span> RedirectToAction(<span class="str">"Index"</span>, <span class="str">"Home"</span>);</pre>

  <pre class="alt"><span class="lnum">  11:  </span>            }</pre>

  <pre><span class="lnum">  12:  </span>            <span class="kwrd">else</span></pre>

  <pre class="alt"><span class="lnum">  13:  </span>            {</pre>

  <pre><span class="lnum">  14:  </span>                <span class="rem">// Return back to the page</span></pre>

  <pre class="alt"><span class="lnum">  15:  </span>                <span class="kwrd">return</span> View();</pre>

  <pre><span class="lnum">  16:  </span>            }            </pre>

  <pre class="alt"><span class="lnum">  17:  </span>        }</pre>
</div>

<p>And receive it through our command handler like so:</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> RegisterNewUserCommandHandler : ICommandHandler&lt;RegisterNewUserCommand&gt;</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">private</span> IUserRepository userRepository;</pre>

  <pre><span class="lnum">   4:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">public</span> RegisterNewUserCommandHandler(IUserRepository userRepository)</pre>

  <pre><span class="lnum">   6:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            <span class="kwrd">this</span>.userRepository = userRepository;</pre>

  <pre><span class="lnum">   8:  </span>        }</pre>

  <pre class="alt"><span class="lnum">   9:  </span>&nbsp;</pre>

  <pre><span class="lnum">  10:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> Handle(RegisterNewUserCommand command)</pre>

  <pre class="alt"><span class="lnum">  11:  </span>        {</pre>

  <pre><span class="lnum">  12:  </span>            User newUser = <span class="kwrd">new</span> User(command.Username, command.Password);</pre>

  <pre class="alt"><span class="lnum">  13:  </span>            userRepository.Save(newUser);</pre>

  <pre><span class="lnum">  14:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  15:  </span>    }</pre>
</div>

<p>That’s it, job done – we have an entire piece of functionality written with barely any fuss at all. </p>

<p>Tests for the above are all present in the github repository, left out of this post with the exception of the RavenDB interaction</p>

<p>In the next install, we’ll add the sign-in/sign-out functionality to our system.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---image-gallery-project-vii---user-registration.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---image-gallery-project-vii---user-registration.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 05 Oct 2010 10:00:00 GMT</pubDate></item><item><title><![CDATA[Working with RavenDB Documents + Entities  - The Debate]]></title><description><![CDATA[
		<p>Okay, fine – hands up – I knew that what I was doing with my entities would stir up some lively debate – thankfully the vast majority of which has not been centered around whether or not entities should have behaviour, but over whether or not the solution provided is optimal given the aims of the project.&nbsp; If you’re not that familiar with RavenDB then some of this discussion might not be that easy to understand -&nbsp; although largely it’s just a lateral step from the old debate with ORMs like NHibernate.</p>  <p><strong>An introduction</strong></p>  <p>I’m a big fan of the <em>concept </em>and <em>intent</em> of CQRS, and firmly believe that separating the responsibility of querying (views) from the responsibility of enacting change (commands/entities) is a <em>good thing</em>. This topic has been done to death, and if you haven’t heard of this concept at all, I advise you go and google “CQRS” and read what Greg Young and his cohort have to say about it. </p>  <p>I’m also a big fan of DDD, although I feel that it is not generally suited for incredibly simple projects like RavenGallery, I do maintain some of the programmatic consequences of utilising DDD are valuable, such as encapsulating as much behaviour as possible in my entities.</p>  <p>We will approach this discussion with the general acceptance that </p>  <ul>   <li>Behaviour in entities is a good&nbsp; thing, </li>    <li>Change should be enacted by the root aggregate of the entity relationship</li>    <li>One RavenDB document ~= one root aggregate</li>    <li>Entities themselves shouldn’t be used directly in view models</li>    <li>Change shouldn’t be enacted on entities by any other means than calling a method that specifies the intent of that change</li>    <li>It shouldn’t ideally be possible to construct entities in an invalid state</li> </ul>  <p>None of this is really under discussion, but the nature of the solution implemented definitely is, now let’s look at the options we have when treating RavenDB documents as aggregate roots in this scenario.</p>  <p>Let’s also step away from RavenGallery for a moment, and assume we are building a much larger, more complex system with a lot of business logic and a large team of developers with the typical range of ability you tend to find in typical software departments. As stated before, it is my intent for RavenGallery to not just be “<em>another project that cuts corners in order to demo one single piece of&nbsp; technology</em>”.</p>  <p><strong>Use the documents as entities and let all state be exposed via public getters/setters</strong></p>  <p>As I understand it, this is @ayende’s stance, and it was my initial direction too - I would have most likely gone for if I wasn’t doing this “as if I was working in a production environment”.</p>  <p>This system creates a few truths</p>  <ul>   <li>We can still perform LINQ queries on the documents when constructing the Views</li>    <li>Anybody <strong><em>can</em></strong> modify state, either from a command handler, service,factory or whatever so long as they have an entity</li>    <li>De-normalized state that is not necessary part of the entity gets exposed on the entity itself</li>    <li>Creating test data for the query layer is easy because we can set any data on the document</li> </ul>  <p>Technically, all this system needs is a well disciplined team who have been educated not to directly meddle with entities, but instead to always encapsulate behaviour in the entity. </p>  <p>The state that is being exposed on the entity that is not technically a part of that entity should not really ever be touched by domain logic if we work in this way.</p>  <p><strong>Use the documents as entities but hide all state behind public getters/private setters</strong></p>  <p>This is just a variation of the above, the only difference is that we prevent people from changing state from outside of the entity, I prefer this but it does mean creating test data is a bit tricky when testing the view layer (because we can’t construct the document whichever way we like)</p>  <ul>   <li>We can still perform LINQ queries on the documents when constructing the Views</li>    <li><strike>Anybody <strong><em>can</em></strong> modify state, either from a command handler, service,factory or whatever so long as they have an entity</strike></li>    <li>De-normalized state that is not necessary part of the entity gets exposed on the entity itself</li>    <li><strike>Creating test data for the query layer is easy because we can set any data on the document</strike></li> </ul>  <p>You win some, you lose some.</p>  <p><strong>Use the documents as entities, but hide all state in private fields with no public properties</strong></p>  <p>This is nice and pure, we can use a serializer that serializes private state, not expose any state directly</p>  <ul>   <li><strike>We can still perform LINQ queries on the documents when constructing the Views</strike></li>    <li><strike>Anybody <strong><em>can</em></strong> modify state, either from a command handler, service,factory or whatever so long as they have an entity</strike></li>    <li><strike>De-normalized state that is not necessary part of the entity gets exposed on the entity itself</strike></li>    <li><strike>Creating test data for the query layer is easy because we can set any data on the document</strike></li> </ul>  <p>Unfortunately by closing down the document/entity in this manner, we actually make it almost impossible to query the document store and get meaningful data back, unless we set all the fields to ‘stored’ and use projections for<em> every single view</em>.</p>  <p>Very pure, but on the whole quite hard to work with.</p>  <p><strong>Wrap the documents in the entities,&nbsp; expose behaviour on entities, allow view layer to go directly to the documents</strong></p>  <p>This is the controversial approach I went for, this gives us</p>  <ul>   <li>We can still perform LINQ queries on the documents when constructing the Views</li>    <li><strike>Anybody <strong><em>can</em></strong> modify state, either from a command handler, service,factory or whatever so long as they have an entity</strike>*</li>    <li><strike>De-normalized state that is not necessary part of the entity gets exposed on the entity itself</strike></li>    <li>Creating test data for the query layer is easy because we can set any data on the document</li> </ul>  <p><em><font size="1">*We are assuming here that Views in RavenDB are analogous to direct SQL access in NHibernate for generating views, theoretically they *could* modify state, but there is no reason for them to so it’s not likely to happen. The important point here is that the ‘write’ layer has no direct access to the data.</font></em></p>  <p>The major downside to this is that we start seeing a bit of seemingly superfluous ceremony in our repository when we come to create entities wrapped around the documents. The major up-shot is that it’s very pure, and still gives us a lot of options in the future for changing strategies with regards to how we store the data or retrieve views.</p>  <p><strong>Okay then, so which one do we go for?</strong></p>  <p>My personal opinion is the first one for simple projects that you know are going to remain simple, and the last one for projects that you know are going to get large and complex.</p>  <p>We make trade-offs by using a single data store for both storing the domain state, and for retrieving views of that data. It’s quite a good trade-off because we get really fast reads and really fast writes for free because RavenDB gives that to us, but it’s an awkward trade off because you can end up with a structure that doesn’t quite mesh with the behaviour that you want in your domain.</p>  <p><strong>Summary</strong></p>  <p>The full discussion can be found <a href="http://groups.google.com/group/ravendb/browse_thread/thread/6d7fd996ab031386/546372f3fae21ed4">here</a>, in the Google Groups, many thanks so far to those who have participated so far, I’ve had a number of people come out in favour of the wrapping approach, and a number of people come out in favour of exposing all state and just getting on with things.</p>  <p>The question at the end of the day seems to revolve around quite how anally retentive you can be over a simple design decision, I’m anal and I don’t mind a bit of ceremony, so sue me – I’m not going to say you’re wrong for opting for the more free and open approach – I only wish I was brave enough to.</p>  <p><strong>PS</strong></p>  <p>I’ll be reducing the ceremony once I know exactly how I use my objects, there are a number of options available to me, I’m just leaving it until I have a better grasp of what I need.</p>
	]]></description><link>http://codeofrob.com/entries/working-with-ravendb-documents-+-entities----the-debate.html</link><guid isPermaLink="true">http://codeofrob.com/entries/working-with-ravendb-documents-+-entities----the-debate.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 04 Oct 2010 12:34:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - Image Gallery Application (VI) - Entities, Repositories and Commands]]></title><description><![CDATA[
		<p>The code for this and all other entries can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a>&nbsp;</p>  <p>In order to add our first piece of functionality (registration), we’ll need the ability to store and retrieve User Entities, and that means creating an underlying document as well as the entity itself, along with a repository for dealing with the users and the IDocumentSession.</p>  <p><strong>The Document</strong></p>  <p>For now there is very little we need on the User document, we need to be able to identify the user and we need to be able to authenticate them, the following simple document model will be used for now therefore.</p>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> UserDocument</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> Id { get; set; }</pre>

  <pre><span class="lnum">   4:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> Username { get; set; }</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> PasswordHash { get; set; }</pre>

  <pre><span class="lnum">   6:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p><strong>The Entity</strong></p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> User : IEntity&lt;UserDocument&gt;</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">private</span> UserDocument innerUser;        </pre>

  <pre><span class="lnum">   4:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">public</span> User(UserDocument innerUser)</pre>

  <pre><span class="lnum">   6:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            <span class="kwrd">this</span>.innerUser = innerUser;</pre>

  <pre><span class="lnum">   8:  </span>        }</pre>

  <pre class="alt"><span class="lnum">   9:  </span>&nbsp;</pre>

  <pre><span class="lnum">  10:  </span>        UserDocument IEntity&lt;UserDocument&gt;.GetInnerDocument()</pre>

  <pre class="alt"><span class="lnum">  11:  </span>        {</pre>

  <pre><span class="lnum">  12:  </span>            <span class="kwrd">return</span> innerUser;</pre>

  <pre class="alt"><span class="lnum">  13:  </span>        }</pre>

  <pre><span class="lnum">  14:  </span>    }</pre>
</div>

<p>Further constructors can be added as needed (if the process of construction is simple then a command could invoke the constructor manually, and if it is complicated, it could resort to a factory), but the above pattern is how I’m going to be creating the rest of my entities and documents.</p>

<p><strong>The Repository</strong></p>

<p>The base functionality for the repository can actually be carried out via a handy base class that implements the interface for us, and that is what I have done:</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">abstract</span> <span class="kwrd">class</span> EntityRepository&lt;TEntity, TDoc&gt; : IEntityRepository&lt;TEntity, TDoc&gt; <span class="kwrd">where</span> TEntity : IEntity&lt;TDoc&gt;</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">private</span> IDocumentSession documentSession;</pre>

  <pre><span class="lnum">   4:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">public</span> EntityRepository(IDocumentSession documentSession)</pre>

  <pre><span class="lnum">   6:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            <span class="kwrd">this</span>.documentSession = documentSession;</pre>

  <pre><span class="lnum">   8:  </span>        }</pre>

  <pre class="alt"><span class="lnum">   9:  </span>&nbsp;</pre>

  <pre><span class="lnum">  10:  </span>        <span class="kwrd">public</span> TEntity Load(<span class="kwrd">string</span> id)</pre>

  <pre class="alt"><span class="lnum">  11:  </span>        {</pre>

  <pre><span class="lnum">  12:  </span>            <span class="kwrd">return</span> Create(<span class="kwrd">this</span>.documentSession.Load&lt;TDoc&gt;(id));</pre>

  <pre class="alt"><span class="lnum">  13:  </span>        }</pre>

  <pre><span class="lnum">  14:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  15:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> Add(TEntity entity)</pre>

  <pre><span class="lnum">  16:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  17:  </span>            <span class="kwrd">this</span>.documentSession.Store(entity.GetInnerDocument());</pre>

  <pre><span class="lnum">  18:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  19:  </span>&nbsp;</pre>

  <pre><span class="lnum">  20:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> Remove(TEntity entity)</pre>

  <pre class="alt"><span class="lnum">  21:  </span>        {</pre>

  <pre><span class="lnum">  22:  </span>            <span class="kwrd">this</span>.documentSession.Delete(entity.GetInnerDocument());</pre>

  <pre class="alt"><span class="lnum">  23:  </span>        }</pre>

  <pre><span class="lnum">  24:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  25:  </span>        <span class="kwrd">protected</span> <span class="kwrd">abstract</span> TEntity Create(TDoc doc);</pre>

  <pre><span class="lnum">  26:  </span>    }</pre>
</div>

<p>The only piece of functionality we can’t easily keep common is the process of creating the entity from the document, so we leave that responsibility to the individual repositories for now.</p>

<p>The user repository therefore looks like this:</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">interface</span> IUserRepository : IEntityRepository&lt;User, UserDocument&gt;</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>&nbsp;</pre>

  <pre><span class="lnum">   4:  </span>    }</pre>
</div>

<p></p><style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>with

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> UserRepository : EntityRepository&lt;User, UserDocument&gt;</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> UserRepository(IDocumentSession documentSession) : <span class="kwrd">base</span>(documentSession) { }</pre>

  <pre><span class="lnum">   4:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">protected</span> <span class="kwrd">override</span> User Create(UserDocument doc)</pre>

  <pre><span class="lnum">   6:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            <span class="kwrd">return</span> <span class="kwrd">new</span> User(doc);</pre>

  <pre><span class="lnum">   8:  </span>        }</pre>

  <pre class="alt"><span class="lnum">   9:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>Other methods could be added to IUserRepository to do user-specific request operations, and any consumer of the user repository need only ask for an IUserRepository via their constructor in order for StructureMap to provide it via its default conventions. 

<p><strong>The Command Invoker</strong></p>

<p>The implementation of this is very simple, here it is without any error handling</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> CommandInvoker : ICommandInvoker</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">private</span> IContainer container;</pre>

  <pre><span class="lnum">   4:  </span>        <span class="kwrd">private</span> IDocumentSession documentSession;</pre>

  <pre class="alt"><span class="lnum">   5:  </span>&nbsp;</pre>

  <pre><span class="lnum">   6:  </span>        <span class="kwrd">public</span> CommandInvoker(IContainer container, IDocumentSession documentSession)</pre>

  <pre class="alt"><span class="lnum">   7:  </span>        {</pre>

  <pre><span class="lnum">   8:  </span>            <span class="kwrd">this</span>.container = container;</pre>

  <pre class="alt"><span class="lnum">   9:  </span>            <span class="kwrd">this</span>.documentSession = documentSession;</pre>

  <pre><span class="lnum">  10:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  11:  </span>&nbsp;</pre>

  <pre><span class="lnum">  12:  </span>        <span class="kwrd">public</span> <span class="kwrd">void</span> Execute&lt;T&gt;(T command)</pre>

  <pre class="alt"><span class="lnum">  13:  </span>        {</pre>

  <pre><span class="lnum">  14:  </span>            var handler = container.GetInstance&lt;ICommandHandler&lt;T&gt;&gt;();</pre>

  <pre class="alt"><span class="lnum">  15:  </span>            handler.Handle(command);</pre>

  <pre><span class="lnum">  16:  </span>            documentSession.SaveChanges();</pre>

  <pre class="alt"><span class="lnum">  17:  </span>        }</pre>

  <pre><span class="lnum">  18:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[


.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>As we can see, if the application sends a command, an appropriate handler will be located and assuming nothing goes wrong, SaveChanges will be invoked and the transaction will be flushed. If something does go wrong, the transaction will go ignored. This should be adequate for now.</p>

<p>The code covered here should give us the ability to save/retrieve/modify entities – and also the ability to send neatly packaged commands from the controller after validation has taken place, in the next entry we’ll use the above framework to add functionality to register a new user.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---image-gallery-application-vi---entities,-repositories-and-commands.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---image-gallery-application-vi---entities,-repositories-and-commands.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 03 Oct 2010 16:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - Image Gallery Project (V) - The Structure]]></title><description><![CDATA[
		<p>The code for this and all other entries can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a>&nbsp;</p>  <p>Disclaimer: The structure of this application will be as simple as I can get it whilst still maintaining some semblance of maintainability going forward, any complaints can be directed at the comments field below if you think I’m committing some heinous crimes with the contents of this entry. The beauty of writing code with a high separation of concerns is that any of this can change without too much fuss if the initial code proves unworthy. This is all largely irrelevant anyway, but as the following entries will all utilise code using this structure, I thought it best to write an entry describing the basic principles of how the system works.</p>  <p><strong>Views vs Entities</strong></p>  <p>We have one data storage system, it stores documents and allows us to query those documents. Those documents are generally a lot flatter than those we have been used to in the past, and that allows us to store all the information required for a single entity in a single document (for the most part). A couple of assumptions therefore</p>  <ul>   <li>When dealing with behaviour or units of work, we’re dealing with entities and by therefore the underlying documents that represent those entities. </li>    <li>When dealing with pages of information, or views – we’re dealing with indexes across those documents, rather than complete documents themselves </li> </ul>  <p>It makes sense therefore to separate these two concerns into two different systems</p>  <p><strong>Views</strong></p>  <p>Without getting into the detail of how we get these views out yet, views are something we need. In our application here, a view is a single class containing all the information required to render a page of information. Generally, some information will be required to know what data is required for that view – that might just be an ID, or it might be the type of view and some information about how many items are to be displayed, some search terms to look for and a few other snippets beyond that.</p>  <p>We therefore have two types to be aware of, the input type containing information about the view we want, and the view itself.</p>  <p>I’m going to be brave and define an interface here, I can always change it later on it if proves unworthy of our love</p>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">interface</span> IViewRepository</pre>

  <pre><span class="lnum">   2:  </span>{</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        TOutput Load&lt;TInput, TOutput&gt;(TInput input);</pre>

  <pre><span class="lnum">   4:  </span>}</pre>
</div>
<style type="text/css">![CDATA[














.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>&nbsp;</p>
And with that, an interface for our view factories to implement: 

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">interface</span> IViewFactory&lt;TInput, TOutput&gt;</pre>

  <pre><span class="lnum">   2:  </span>{</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        TOutput Load(TInput input);</pre>

  <pre><span class="lnum">   4:  </span>}</pre>
</div>
<style type="text/css">![CDATA[













.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>If a controller action takes in a TInput as a parameter, then it can go ahead, request the view and return that for delivery. We’ll talk more about how we’ll get hold of these views later, as there are numerous ways to go about it. They could be pre-computed manually, they could be composed by aggregating multiple documents together or they could come from somewhere else entirely; they are read only.</p>

<p><strong>Entities</strong></p>

<p>Here is where I might make a few enemies, I won’t count the documents themselves as my entities, documents are just how I talk to the data store, have getters/setters all over them and don’t contain any behaviour&nbsp; – I’ll be creating entities that wrap up the documents and provide behaviour around them. This will follow the pattern of</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> WrappingEntity : IEntity&lt;WrappedDocument&gt;</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">private</span> WrappedDocument innerDocument;</pre>

  <pre><span class="lnum">   4:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">public</span> WrappingEntity(<span class="kwrd">string</span> someProperty, <span class="kwrd">string</span> someOtherProperty)</pre>

  <pre><span class="lnum">   6:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            innerDocument = <span class="kwrd">new</span> WrappedDocument()</pre>

  <pre><span class="lnum">   8:  </span>            {</pre>

  <pre class="alt"><span class="lnum">   9:  </span>                SomeProperty = someProperty,</pre>

  <pre><span class="lnum">  10:  </span>                SomeOtherProperty = someOtherProperty</pre>

  <pre class="alt"><span class="lnum">  11:  </span>            };</pre>

  <pre><span class="lnum">  12:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  13:  </span>&nbsp;</pre>

  <pre><span class="lnum">  14:  </span>        <span class="kwrd">public</span> WrappingEntity(WrappedDocument innerDocument)</pre>

  <pre class="alt"><span class="lnum">  15:  </span>        {</pre>

  <pre><span class="lnum">  16:  </span>            innerDocument = innerDocument;</pre>

  <pre class="alt"><span class="lnum">  17:  </span>        }</pre>

  <pre><span class="lnum">  18:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  19:  </span>        <span class="kwrd">private</span> WrappedDocument IEntity&lt;WrappedDocument&gt;.GetInnerDocument()</pre>

  <pre><span class="lnum">  20:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  21:  </span>            <span class="kwrd">return</span> innerDocument;</pre>

  <pre><span class="lnum">  22:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  23:  </span>&nbsp;</pre>

  <pre><span class="lnum">  24:  </span>        <span class="kwrd">public</span> <span class="kwrd">virtual</span> <span class="kwrd">void</span> PerformSomeAction()</pre>

  <pre class="alt"><span class="lnum">  25:  </span>        {</pre>

  <pre><span class="lnum">  26:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  27:  </span>        }</pre>

  <pre><span class="lnum">  28:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  29:  </span>        <span class="kwrd">public</span> <span class="kwrd">virtual</span> <span class="kwrd">void</span> PerformSomeOtherAction()</pre>

  <pre><span class="lnum">  30:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  31:  </span>&nbsp;</pre>

  <pre><span class="lnum">  32:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  33:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[










.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>&nbsp;</p>

<p>Because we shouldn’t ever need to query for entities, the interface for getting/saving/deleting entities will be very simple and look something like this:</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">interface</span> IEntityRepository&lt;TEntity, TDocument&gt; <span class="kwrd">where</span> TEntity : IEntity&lt;TDocument&gt;</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        TEntity Load(<span class="kwrd">string</span> id);</pre>

  <pre><span class="lnum">   4:  </span>        <span class="kwrd">void</span> Add(TEntity entity);</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="kwrd">void</span> Remove(TEntity entity);</pre>

  <pre><span class="lnum">   6:  </span>    }</pre>
</div>

<ul>
  <li></li><style type="text/css">![CDATA[










.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>The repository will be responsible for loading a document by id and creating the appropriate entity type around that document, and saving/deleting entities by passing their inner documents to the IDocumentSession. The entities will be responsible for enacting change to those documents; they are <em>effectively</em> write-only.<style type="text/css">![CDATA[










.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style> 

  <li>Since our entities themselves aren’t about state and don’t contain state (they only enact change to the document themselves), subsequent calls to the repository for the same entity won’t result in any adverse side effects as they’ll be working on the same underlying document. </li>

  <li>We already have the necessary data to enact commands on the entity from the views, so there is generally no need to expose state through these entities, and it means that if we have to store additional data on the underlying document that doesn’t belong to this entity, our entity doesn’t suffer from this. </li>

  <li>We could have achieved the same by sticking our behaviour on the documents, but then we have to go through some hoop jumping to make sure the entity state remains valid, to create test data (if we make the state itself private) and to serialize/de-serialize the documents. </li>

  <li>This is a case of my experience with teams of developers who if they “can” do something the easy way, they “will”, there is nothing to stop you and nothing wrong with just having public gets/sets on your documents AND having behaviour on them – this is probably more appropriate for this kind of project anyway</li>
</ul>

<p>Note, on a simple project like this, there would probably be no problem with just using the documents directly and enacting change on them via separate “scripts” within a transaction – I choose to do this because I want to show I’d use RavenDB to solve a more complicated problem/project.</p>

<p><strong>Unit of work</strong></p>

<p>I mentioned in the previous entry that I was going to leave committing changes to the application itself, I’m going to assume that in our application we’ll be able to represent all of the changes required by a HTTP post action with a single class structure, and for ease of understanding we’ll call that a Command. For now we’ll go ahead with the understanding that we can fire off a command to a magical interface and that interface will take care of the unit of work.</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">interface</span> ICommandInvoker</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">void</span> Execute&lt;T&gt;(T command);</pre>

  <pre><span class="lnum">   4:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[








.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>The command invoker will look for an appropriate handler (seen below) and pass the command to that for processing (most likely it will retrieve entities by ID and call methods on them)</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">interface</span> ICommandHandler&lt;T&gt;</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">void</span> Handle(T command);</pre>

  <pre><span class="lnum">   4:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[








.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p><span class="lnum"></span>The Command Invoker implementation will be responsible for finding the appropriate command handler to execute and calling SaveChanges at the end of this process, flushing any changes through to the underlying store.</p>

<p><strong>Implementation of the above</strong></p>

<p>The above all uses StructureMap magic to locate the appropriate handlers/view factories in much the same way we’ll be using StructureMap to find validators, model binders and other such niceties.</p>

<p>In the next instalment of this series, we’ll create our user document, our user entity and the necessary infrastructure required to create/retrieve user entities from the repository, as well as demonstrating the functionality of the ICommandInvoker that we’ll be using throughout this series.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---image-gallery-project-v---the-structure.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---image-gallery-project-v---the-structure.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 01 Oct 2010 11:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - Image Gallery Project (IV) -Tracking Documents]]></title><description><![CDATA[
		<p>The code for this and all other entries can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a>&nbsp;</p>  <p>Apologies for yesterday, something happened to my post and it got swallowed up into the ether, it might be worth going back and reading it if you wanted why it ended so abruptly: <a href="http://codeofrob.com/archive/2010/09/29/ravendb-image-gallery-project-iii-the-application-lifecycle.aspx">The Application Lifecycle</a></p>  <p>Before continuing on, I want to make it clear how RavenDB and basic interaction with RavenDB works, I’m not going to dwell on this as the focus of this series is how RavenDB works within the larger scale of an application, but knowing how to save/retrieve/modify documents is definitely important.</p>  <p>The following examples use this document model:</p>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> Image</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> Id</pre>

  <pre><span class="lnum">   4:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            get;</pre>

  <pre><span class="lnum">   6:  </span>            set;</pre>

  <pre class="alt"><span class="lnum">   7:  </span>        }</pre>

  <pre><span class="lnum">   8:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">   9:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> Name</pre>

  <pre><span class="lnum">  10:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  11:  </span>            get;</pre>

  <pre><span class="lnum">  12:  </span>            set;</pre>

  <pre class="alt"><span class="lnum">  13:  </span>        }</pre>

  <pre><span class="lnum">  14:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  15:  </span>        <span class="kwrd">public</span> Tag[] Tags</pre>

  <pre><span class="lnum">  16:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  17:  </span>            get;</pre>

  <pre><span class="lnum">  18:  </span>            set;</pre>

  <pre class="alt"><span class="lnum">  19:  </span>        }</pre>

  <pre><span class="lnum">  20:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[









.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style><style type="text/css">![CDATA[










.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<div class="csharpcode">&nbsp;</div>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> Tag</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> <span class="kwrd">string</span> Name</pre>

  <pre><span class="lnum">   4:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            get;</pre>

  <pre><span class="lnum">   6:  </span>            set;</pre>

  <pre class="alt"><span class="lnum">   7:  </span>        }</pre>

  <pre><span class="lnum">   8:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[










.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p><strong>Saving a new document</strong></p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">using</span> (var s = store.OpenSession())</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="rem">// Create the image</span></pre>

  <pre><span class="lnum">   4:  </span>        var image = <span class="kwrd">new</span> Image()</pre>

  <pre class="alt"><span class="lnum">   5:  </span>        {</pre>

  <pre><span class="lnum">   6:  </span>            Name = <span class="str">"SomeImage"</span>,</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            Tags = <span class="kwrd">new</span> Tag[]{</pre>

  <pre><span class="lnum">   8:  </span>                <span class="kwrd">new</span> Tag() { Name = <span class="str">"SomeTag"</span> },</pre>

  <pre class="alt"><span class="lnum">   9:  </span>                <span class="kwrd">new</span> Tag() { Name = <span class="str">"SomeOtherTag"</span> }</pre>

  <pre><span class="lnum">  10:  </span>            }</pre>

  <pre class="alt"><span class="lnum">  11:  </span>        };</pre>

  <pre><span class="lnum">  12:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  13:  </span>        <span class="rem">// Store the image</span></pre>

  <pre><span class="lnum">  14:  </span>        s.Store(image);</pre>

  <pre class="alt"><span class="lnum">  15:  </span>                    </pre>

  <pre><span class="lnum">  16:  </span>        <span class="rem">// The act of storing the image has given us an id to work with</span></pre>

  <pre class="alt"><span class="lnum">  17:  </span>        <span class="kwrd">string</span> documentId = image.Id;</pre>

  <pre><span class="lnum">  18:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  19:  </span>        <span class="rem">// Only when this is called are the changes flushed to the server</span></pre>

  <pre><span class="lnum">  20:  </span>        s.SaveChanges();                  </pre>

  <pre class="alt"><span class="lnum">  21:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[









.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p><strong>Getting a document out by Id</strong></p>

<p>Now we have an id, we can request a document by id in a completely different session:</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>   <span class="kwrd">using</span>(var s = store.OpenSession())</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="rem">// Load an image by id</span></pre>

  <pre><span class="lnum">   4:  </span>        var image = s.Load&lt;Image&gt;(documentId);</pre>

  <pre class="alt"><span class="lnum">   5:  </span>&nbsp;</pre>

  <pre><span class="lnum">   6:  </span>        <span class="rem">// Do stuff with that image</span></pre>

  <pre class="alt"><span class="lnum">   7:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[









.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>&nbsp;</p>

<p><strong>Querying for a document using standard queries</strong></p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>        <span class="kwrd">using</span>(var s = store.OpenSession())</pre>

  <pre><span class="lnum">   2:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>            <span class="rem">// Find an image by name</span></pre>

  <pre><span class="lnum">   4:  </span>            var image = s.Query&lt;Image&gt;()</pre>

  <pre class="alt"><span class="lnum">   5:  </span>                .Where(x=&gt;x.Name== <span class="str">"SomeImage"</span>)</pre>

  <pre><span class="lnum">   6:  </span>                .SingleOrDefault();</pre>

  <pre class="alt"><span class="lnum">   7:  </span>        }</pre>
</div>
<style type="text/css">![CDATA[









.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p><strong>Modifying a document and persisting those changes</strong></p>

<p>Both the above examples of retrieving documents from the store have something in common, the RavenDB client will track those loaded documents and any changes to them automatically. Thus the following code will just work</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>        <span class="kwrd">using</span>(var s = store.OpenSession())</pre>

  <pre><span class="lnum">   2:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>            <span class="rem">// Find an image by name</span></pre>

  <pre><span class="lnum">   4:  </span>            var image = s.Query&lt;Image&gt;()</pre>

  <pre class="alt"><span class="lnum">   5:  </span>                .Where(x=&gt;x.Name== <span class="str">"SomeImage"</span>)</pre>

  <pre><span class="lnum">   6:  </span>                .SingleOrDefault();</pre>

  <pre class="alt"><span class="lnum">   7:  </span>&nbsp;</pre>

  <pre><span class="lnum">   8:  </span>            <span class="rem">// Change the name</span></pre>

  <pre class="alt"><span class="lnum">   9:  </span>            image.Name = <span class="str">"NewName"</span>;</pre>

  <pre><span class="lnum">  10:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  11:  </span>            <span class="rem">// Commit any changes</span></pre>

  <pre><span class="lnum">  12:  </span>            s.SaveChanges();</pre>

  <pre class="alt"><span class="lnum">  13:  </span>        }</pre>
</div>
<style type="text/css">![CDATA[









.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p><strong>How this fits into our structure</strong></p>

<p>If a repository takes responsibility for saving new documents and retrieving those documents, responsibility for actually persisting those changes can be given to another part of our application, the rest of the application doesn’t have to care about IDocumentSession or RavenDB, it can just work on those documents and accept any changes that are made will get flushed at the end of the unit of work.</p>

<p>In the following blog entries if anything is unclear, refer back to this page to try and understand what is going on.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---image-gallery-project-iv--tracking-documents.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---image-gallery-project-iv--tracking-documents.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 30 Sep 2010 11:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - Image Gallery Project (III) - The Application Lifecycle]]></title><description><![CDATA[
		<p>The code for this and all other entries can be found here: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a>&nbsp;</p>  <p>As discussed in the previous entry, I have decided to host RavenDB within the application itself, this is a decision that lends itself very easily to the early stages of a development project against RavenDB, as there is no need to remember to run RavenDB before running the application, and it is a decision that providing you write your code properly can be changed later on in development when it becomes useful to have RavenDB running on another server or just as a separate process. </p>  <p>Before writing any code, we have to understand the basic components at play when communicating with RavenDB.</p>  <ul>   <li>IDocumentStore      <ul>       <li>This is the main port of call for communicating with a RavenDB server </li>        <li>This is also the main port of call for starting up a RavenDB server if running locally (DocumentStore) </li>        <li>One of these should exist <em>per application – </em>IE, create on start-up and persist </li>     </ul>   </li>    <li>IDocumentSession      <ul>       <li>This is created via IDocumentStore and provides interfaces for querying the document store </li>        <li>This controls the unit of work, tracks loaded documents, keeps a cache etc </li>        <li>This should be created <em>per-unit-of-work</em> (Typically one per HTTP request, or one per transaction) </li>        <li>NB: Whilst RavenDB supports transactions across requests, typically we avoid this and try to commit all changes once per unit of work </li>     </ul>   </li> </ul>  <p><strong>On start-up</strong></p>  <p>So, on start-up we need to create a document store and make that available for creating document sessions when necessary (and maybe other purposes).</p>  <p>This is what I’ve come up with:</p>  <p>Bootstrapper.cs</p>  <p>&nbsp;</p>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span> <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">class</span> Bootstrapper</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">void</span> Startup()</pre>

  <pre><span class="lnum">   4:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            var documentStore = <span class="kwrd">new</span> EmbeddableDocumentStore</pre>

  <pre><span class="lnum">   6:  </span>            {</pre>

  <pre class="alt"><span class="lnum">   7:  </span>                Configuration = <span class="kwrd">new</span> RavenConfiguration</pre>

  <pre><span class="lnum">   8:  </span>                {</pre>

  <pre class="alt"><span class="lnum">   9:  </span>                    DataDirectory = <span class="str">"App_Data\\RavenDB"</span>,</pre>

  <pre><span class="lnum">  10:  </span>                }</pre>

  <pre class="alt"><span class="lnum">  11:  </span>            };</pre>

  <pre><span class="lnum">  12:  </span>            documentStore.Initialize();</pre>

  <pre class="alt"><span class="lnum">  13:  </span>&nbsp;</pre>

  <pre><span class="lnum">  14:  </span>            ObjectFactory.Initialize(config =&gt;</pre>

  <pre class="alt"><span class="lnum">  15:  </span>            {</pre>

  <pre><span class="lnum">  16:  </span>                config.AddRegistry(<span class="kwrd">new</span> CoreRegistry(documentStore));</pre>

  <pre class="alt"><span class="lnum">  17:  </span>            });</pre>

  <pre><span class="lnum">  18:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  19:  </span>    }</pre>
</div>

<div class="csharpcode">&nbsp;</div>

<div class="csharpcode"><style type="text/css">![CDATA[




















.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style></div>

<p>This is invoked from Global.asax.cs via Application_Start – we create the DocumentStore and pass it into a StructureMap registry which then sets up the container. If I wanted to switch to a different mechanism for dealing with RavenDB I could change it here and the rest of my application wouldn’t be any the wiser. I could even load the settings from a file here, but I’m not going to – so there.</p>

<p>Inside CoreRegistry.cs we have</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>    <span class="kwrd">public</span> <span class="kwrd">class</span> CoreRegistry : Registry</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="kwrd">public</span> CoreRegistry(IDocumentStore documentStore)</pre>

  <pre><span class="lnum">   4:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   5:  </span>            For&lt;IDocumentStore&gt;().Use(documentStore);</pre>

  <pre><span class="lnum">   6:  </span>        }</pre>

  <pre class="alt"><span class="lnum">   7:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[




















.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>There we go, anything that requests IDocumentStore will be given documentStore 

<p><strong>Per request 
    <br></strong>Until we find a reason not to, we will create RavenDB sessions per request and secretly store them in the HttpContext.Items collection so they can be used through-out the rest of the request, of course we’ll use StructureMap to manage that for us. 

  <br>CoreRegistry.cs now looks like this:</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> CoreRegistry(IDocumentStore documentStore)</pre>

  <pre><span class="lnum">   2:  </span> {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>&nbsp; For&lt;IDocumentStore&gt;().Use(documentStore);</pre>

  <pre><span class="lnum">   4:  </span>  For&lt;IDocumentSession&gt;()</pre>

  <pre class="alt"><span class="lnum">   5:  </span>     .HttpContextScoped()</pre>

  <pre><span class="lnum">   6:  </span>      .Use(x =&gt;</pre>

  <pre class="alt"><span class="lnum">   7:  </span>          {</pre>

  <pre><span class="lnum">   8:  </span>              var store = x.GetInstance&lt;IDocumentStore&gt;();</pre>

  <pre class="alt"><span class="lnum">   9:  </span>              <span class="kwrd">return</span> store.OpenSession();</pre>

  <pre><span class="lnum">  10:  </span>          });</pre>

  <pre class="alt"><span class="lnum">  11:  </span>}</pre>
</div>
<style type="text/css">![CDATA[








.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>Of course this is leaking sessions because StructureMap won’t dispose of any of our created sessions unless we tell it to, so into Global.asax.cs I go once more and add the following line: </p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>        <span class="kwrd">protected</span> <span class="kwrd">void</span> Application_EndRequest()</pre>

  <pre><span class="lnum">   2:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>            ObjectFactory.ReleaseAndDisposeAllHttpScopedObjects();</pre>

  <pre><span class="lnum">   4:  </span>        }</pre>
</div>
<style type="text/css">![CDATA[







.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>This will do for now, I could have done this using a HttpModule or whatever I preferred, but that gets the concepts across. 
  <br>In the next entry I’ll give a refresh on how documents are created/modified/queried in order to lay the groundwork for the structure of the rest of the application.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---image-gallery-project-iii---the-application-lifecycle.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---image-gallery-project-iii---the-application-lifecycle.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 29 Sep 2010 11:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB-Image Gallery Project (II) - Setting Up]]></title><description><![CDATA[
		<p>As with all entries in this series, the up to date code&nbsp; and history can be found in Github at <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a></p>  <p><strong>Where do I get RavenDB?</strong></p>  <p>RavenDB can be downloaded from a number of places, you can download the stable binaries, the unstable binaries or go direct to Github and use whatever fork you find there.</p>  <p>I personally run off my own fork which is updated very frequently from Ayende’s code – as it means I can rapidly add any missing features and push them back or fix bugs when I find them.</p>  <p>For this project I’ll be doing just that, and the binaries found in the Image Gallery project will be from my fork found at <a href="http://github.com/robashton/Ravendb">http://github.com/robashton/Ravendb</a></p>  <p>This is because I’ll be utilising functionality that is on the bleeding edge of RavenDB, of course by the time most of you read this they’ll be in the released binaries, so we’ll move to those now.</p>  <p><strong>Released builds (Unstable)</strong></p>  <p>Next up on the stability list are the recent builds, which can be found on the Hibernating Rhinos site <a href="http://builds.hibernatingrhinos.com/builds/RavenDB-Unstable">http://builds.hibernatingrhinos.com/builds/RavenDB-Unstable</a>, this is probably safer than constantly pulling from Ayende’s fork and represent the latest changes that have made it through code review. </p>  <p><strong>Released builds (Commercial)</strong></p>  <p>At time of writing, these are about 20 builds behind the Unstable branch, and as such miss out on some of the functionality that can be enjoyed in the Unstable and code versions of RavenDB. Unless you are planning on releasing software in the next week or two, I don’t really advocate using this branch for development.</p>  <p><strong>Why unstable?</strong></p>  <p>RavenDB is changing constantly, breaking changes still happen, API changes still happen, functionality is being added constantly – I have a suite of tests for all my projects that utilise RavenDB and I test all of my interaction with RavenDB. </p>  <p>By updating regularly I ensure that the amount of work needed to fix any breaking changes is kept to a minimum, as opposed to waiting 30 builds and finding out that half of my entire test suite fails. </p>  <p>That’s not to say that Raven isn’t ready for production because I believe that the stable branch is indeed stable, but because I’m in development and I haven’t got imminent release to look forward to I’m happy to put up with a few bugs in order to get the latest and greatest functionality.</p>  <p><strong>The Project itself</strong></p>  <ul>   <li>I’ve made an MVC2 project in VS2010 and removed all the default garbage that gets provided with it, apart from the JavaScript files, the CSS and the master page. I’m starting from a blank slate and removing all the code because I know how much that offends people. </li>    <li>I’ve downloaded the following libraries: Moq, NUnit, StructureMap and shoved them in a folder called _Libs along with the RavenDB binaries. </li>    <li>Oh yes, I’ve got a basic StructureMapControllerFactory that I’ll be using to create controllers with dependencies injected (in case anybody asks later on) </li>    <li>I’ve got two additional projects (class libraries) which are named RavenGallery.Core and RavenGallery.Core.Tests </li>    <li>I’ve gone through the project settings and ensured their .NET profile is set to .NET Framework 4 </li> </ul>  <p>Here is my solution</p>  <p><a href="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBImageGalleryProjectIISettingUp_1512C/solution_2.png"><img style="background-image: none; border-right-width: 0px; margin: ;padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px;" title="solution" border="0" alt="solution" src="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBImageGalleryProjectIISettingUp_1512C/solution_thumb.png" width="301" height="548"></a></p>  <p>And this is what I meant by setting the .NET profile</p>  <p><a href="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBImageGalleryProjectIISettingUp_1512C/targetframework_2.png"><img style="background-image: none; border-right-width: 0px; margin: ;padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px;" title="targetframework" border="0" alt="targetframework" src="http://codeofrob.com/images/codeofrob_com/WindowsLiveWriter/RavenDBImageGalleryProjectIISettingUp_1512C/targetframework_thumb.png" width="715" height="226"></a></p>  <p>&nbsp;</p>  <p><strong>Which RavenDB Binaries to use?</strong></p>  <p>Once you’ve selected which binary drop to use, you have to make a decision as to which Raven.Client to use, and this is where I tell you why I made sure my Target Framework was set to 4</p>  <ul>   <li>Raven.Client.Lightweight.dll      <ul>       <li>This is for when you are using .NET Framework 4 Client Profile </li>        <li>This doesn’t require any of the other binaries (Lucene/etc) </li>        <li>This doesn’t allow you to host RavenDB within your application </li>        <li>This is therefore a pure client </li>     </ul>   </li>    <li>Raven.Client.3.5.dll      <ul>       <li>As the name suggests, this is for when you are still on the .NET 2.0 runtime (using the .NET 3.5 framework) </li>        <li>This doesn’t require any of the other binaries (Lucene/etc) </li>        <li>This doesn’t allow you to host RavenDB within your application </li>        <li>This is therefore a pure client for older versions of the .NET framework </li>     </ul>   </li>    <li>Raven.Client.Embedded.dll      <ul>       <li>This is the full, heavyweight client for .NET 4.0 (<strong>not client profile!)</strong> </li>        <li>This requires all of the other binaries (Lucene.NET, Esent, etc)&nbsp; - these must <strong>all</strong> be referenced! </li>        <li>This allows you to host RavenDB within your application </li>        <li>This is a mixed client + server </li>     </ul>   </li> </ul>  <p>As my choice of target framework will tell you, I have chosen to host RavenDB internally as part of the web application, and I will take the responsibility for starting up and shutting it down as part of the application lifecycle.</p>  <p>The .NET Framework 4 profile is important, as it is a common gotcha for people to link the wrong binaries and wonder why they are still getting reference errors.</p>  <p>That’s set-up covered, in the next entry I shall cover how we’ll be hosting RavenDB in the application and managing our sessions with it.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb-image-gallery-project-ii---setting-up.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb-image-gallery-project-ii---setting-up.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 28 Sep 2010 11:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - Image Gallery Project (I)]]></title><description><![CDATA[
		<p>With a work project slowly drawing to a close I’m beginning to get a bit of “free” time in my evenings, and I’ve had a few complaints that with the rapid advancement of RavenDB my previous blog entries are now dated and unhelpful as anything other than a rough guide as to how RavenDB actually functions.</p>  <p>Let us rectify this.</p>  <p>Found on Github at the following location: <a href="http://github.com/robashton/RavenGallery/">http://github.com/robashton/RavenGallery/</a> is a new project that is going to be written using ASP.NET MVC2 and RavenDB. Over the coming entries we’ll go through the features of RavenDB one by one, starting with the basics using the technology that has the lowest entry level, and then moving into more advanced topics whilst revisiting&nbsp; the older pieces of functionality to spruce them up with the knowledge that we’ve gained as we go through.</p>  <p><strong>What this will be</strong></p>  <p>This will be a project written for the sole purpose of demonstrating how to use RavenDB and how to write testable code against RavenDB – this will be demonstrated by utilising some basic TDD principles in order to drive the code surrounding the RavenDB infrastructure and usage.</p>  <p><strong>What this will not be (a disclaimer)</strong></p>  <p>Rather than clutter up the project with code wizardry I am not going to be practising TDD on peripheral code such as validators, controllers (<em>except where RavenDB is concerned</em>), model binders, file handling etc.&nbsp; I am not going to be talking about those things unless they directly or indirectly impact on the actual subject of RavenDB usage.</p>  <p>Anyway, the next entry in this series is about setting up the project and some gotchas that should be watched out for when doing so.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---image-gallery-project-i.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---image-gallery-project-i.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 27 Sep 2010 22:24:00 GMT</pubDate></item><item><title><![CDATA[DDD9 Announced]]></title><description><![CDATA[
		<p>Just a quick hello to point out that <a href="http://developerdeveloperdeveloper.com/ddd9/ProposedSessions.aspx">DDD9</a> has been announced for the 29th of January 2011 - and I've already submitted a couple of what I think are useful sessions for it.</p>

<p>I'm also due to talk at <a href="http://nhday.eu/en.aspx">NHDay</a> in Bologna on the 9th of October on the subject of model-first development on top of NHibernate/FluentNHibernate, and at Cheltenham <a href="http://grou.ps/digitalks/talks/5059459">DigiTalks</a> on the 5th of October, covering RavenDB in 15 minutes (by request, it'll be very toned down though).</p>

<p>Product at work is nearly done and I'll be returning to blog duties when that has come to a close</p>
	]]></description><link>http://codeofrob.com/entries/ddd9-announced.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ddd9-announced.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 20 Sep 2010 11:23:00 GMT</pubDate></item><item><title><![CDATA[TwitterFS - A HackCamp 2010 Production]]></title><description><![CDATA[
		<p>I’ve just spent the weekend at the Google offices in London, taking part in HackCamp, which was a replacement event for BarCamp which was cancelled due to problems with the venue.</p>
<p>I went not knowing what I’d be doing or what I’d be doing it with, and after a presentation by @themattharris on Twitter annotations at the start of the day, @JHollingworth and I decided that with an absence of good ideas it would be fun to abuse a new feature (annotations) by doing something pointless and absolutely useless to anybody, even ourselves.</p>
<p>Hence the idea of TwitterFS was born.</p>
<p><strong>The setup</strong></p>
<ul>
    <li>With twitter annotations, we now have the ability to store 512 bytes of arbitrary data against each tweet </li>
    <li>Each tweet has a unique identifier assigned to it on save </li>
    <li>Each tweet can have 140 additional characters stored in the content of the tweet itself </li>
    <li>Tweets cannot be modified once written </li>
</ul>
<p>With twitter annotations, it became obvious that the thing that we needed to do was create a low availability, low consistency and low performance file system against Twitter.</p>
<p>Twitter could then be used as an “in the cloud store” of arbitrary data which could then be synched between machines ala drop box. (TwitterBox?)</p>
<p><strong>So what do we have?</strong></p>
<p>Effectively, in our file system each tweet is an inode, an an inode contains the data for that inode and a link to the next inode (if the data is too large to be stored on a single inode).</p>
<ul>
    <li>Directories can be implemented as a sequence of inodes which contain a list of ids for other inodes </li>
    <li>Files can be implemented as a sequence of inodes which contain the data for that file </li>
</ul>
<p>In an ordinary file system, we have a finite amount of space and when files are deleted or modified, any freed up inodes need re-allocating so they can be written to again when more data is added.</p>
<p>This is not the case with Twitter as we cannot re-allocate tweets, but we can therefore treat Twitter as an append-only <em>infinite sized </em>hard drive. </p>
<ul>
    <li>Adding a file means
    <ul>
        <li>breaking up the file into separate inodes </li>
        <li>writing them all to twitter (backwards) </li>
        <li>writing the last written inode into the directory the file belongs to </li>
        <li>re-writing any directories in the tree for that file (up to and including the “root” directory) </li>
    </ul>
    </li>
    <li>Deleting a file means
    <ul>
        <li>Removing the reference from the directory it belongs to </li>
        <li>re-writing any directories in the tree for that directory (up to and including the “root” directory) </li>
    </ul>
    </li>
    <li>Editing a file means
    <ul>
        <li>Deleting the file </li>
        <li>Adding the file </li>
    </ul>
    </li>
</ul>
<p>The same goes for directories.</p>
<p>On top of this, a file system watcher was written which would detect changes on the hard drive, add/remove files/directories to the in-memory store and flush the changes to twitter when they were made. (And detect changes to twitter and perform the reverse operation).</p>
<p>Obviously loading the entire tweet stream would defeat the point of storing the data on twitter, so a look-ahead/caching algorithm was implemented, pulling back 200 nodes when 1 was requested and keeping our requests to a minimum.</p>
<p><strong>What the code looks like</strong></p>
<p>This is a bit of code that loads two files into the root directory, a directory and another file so you can see that the act of dealing with Twitter is not the concern of the application. In one of our tests, data was a byte array loaded from an image on the hard drive and that worked fine too.</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span>  persister = TwitterPersister.<span class="kwrd">new</span></pre>
<pre><span class="lnum">   2:  </span>&nbsp;</pre>
<pre class="alt"><span class="lnum">   3:  </span>    fs = FileSystem.<span class="kwrd">new</span> persister, :isnew =&gt; <span class="kwrd">true</span></pre>
<pre><span class="lnum">   4:  </span>    root = fs.root</pre>
<pre class="alt"><span class="lnum">   5:  </span>    </pre>
<pre><span class="lnum">   6:  </span>    documenta = Document.<span class="kwrd">new</span>(fs, :title =&gt; <span class="str">"Document A"</span>, :data =&gt;  <span class="str">"Some Data (a)"</span>)</pre>
<pre class="alt"><span class="lnum">   7:  </span>    documentb = Document.<span class="kwrd">new</span>(fs, :title =&gt; <span class="str">"Document B"</span>, :data =&gt; <span class="str">"Some other data (b)"</span>)</pre>
<pre><span class="lnum">   8:  </span>    </pre>
<pre class="alt"><span class="lnum">   9:  </span>    root.add_documents([documenta, documentb])</pre>
<pre><span class="lnum">  10:  </span>    </pre>
<pre class="alt"><span class="lnum">  11:  </span>    dir = Directory.<span class="kwrd">new</span>(fs, nil)</pre>
<pre><span class="lnum">  12:  </span>    documentc = Document.<span class="kwrd">new</span>(fs, :title =&gt; <span class="str">"Document C"</span>, :data =&gt; <span class="str">"Some lovely data (c)"</span>)</pre>
<pre class="alt"><span class="lnum">  13:  </span>    dir.add_document(documentc)</pre>
<pre><span class="lnum">  14:  </span>    </pre>
<pre class="alt"><span class="lnum">  15:  </span>    root.add_directory(dir)</pre>
<pre><span class="lnum">  16:  </span>    </pre>
<pre class="alt"><span class="lnum">  17:  </span>    fs.flush()</pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<p>&nbsp;</p>
<p><strong>How did it go?</strong></p>
<p>Implementing a file system against a persistence store that is unreliable was always going to cause problems, when it came to do the presentation we still didn’t have access to the annotations feature due to Twitter falling over all weekend, so we had to start cramming the file data into the tweet itself (70 bytes per inode – ouch!), and then Twitter itself went down anyway.</p>
<p>I doubt we’ve won anything (although we got some laughter), but I’m overall quite impressed with how far we got (all the above has been written and tested)</p>
<p><em><strong>(Edit, okay – we won “Stupidest hack most likely to win a million dollars of VC funding”, sweet!)</strong></em></p>
<ul>
    <li>The slides for our 1-minute presentation can be found <a href="http://docs.google.com/present/edit?id=0AbzpogpN8bB-ZGhnNDN0cjlfN2Y2ZnZocmZk&amp;hl=en">here</a> </li>
    <li>The code for TwitterFS and the commit history for the weekend can be found <a href="http://github.com/jhollingworth/TwitterFS/commits/master">here</a> </li>
    <li>The account we used for testing can be found <a href="http://twitter.com/tweeterfs">here</a> </li>
</ul>
<p>We ended up writing the whole thing in Ruby because we’re C# developers by day and as we were doing something ultimately pointless we tried to give it a bit of a point by working in something we were unfamiliar with for education purposes.</p>
<p>My opinion on that? I really liked working within another dynamic language, our tests were a bit crap because we were unfamiliar with the frameworks and it was a pain to get working properly on my windows laptop (I ended up using cygwin for *everything*), but it’s given me some enthusiasm for going and giving Rails a second glance.</p>
<p>Anyway, normal service will resume tomorrow and I’ll be pushing out another RavenDB/CouchDB entry or two this week, just in case you were wondering where they had gotten to :)</p>
	]]></description><link>http://codeofrob.com/entries/twitterfs---a-hackcamp-2010-production.html</link><guid isPermaLink="true">http://codeofrob.com/entries/twitterfs---a-hackcamp-2010-production.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 13 Jun 2010 14:11:00 GMT</pubDate></item><item><title><![CDATA[Sqlite-Csharp and NHibernate]]></title><description><![CDATA[
		<p>Taking a brief&nbsp; interlude from my RavenDB series, I was doing some work on an internal project tonight with the build scripts and test-runner and I finally got bored of having to deal with un-managed SQLite dependencies with a project which other than that was platform agnostic.</p>  <p>The problem with having un-managed dependencies in a managed project is that Visual Studio quite frankly sucks at it, you can set up certain projects (in this case the tests) to be x86 only, and remove their Any CPU configuration – but as soon as you add a new project to the solution it decides to re-add the old configuration and potentially break things again. </p>  <p>This doesn't really rear any problems until you write a build script and things start falling over as your test runner tries to run as an x64 process and tries to load in the x86 dependency, or any number of combinations where this kind of thing can blow up. If it can happen, it will happen and it’s just something I’d rather not deal with.</p>  <p>So I had a look at <a href="http://code.google.com/p/csharp-sqlite/">Sqlite-Csharp</a>, the code is atrocious as far as natively written C# libraries go (that’s not the point though, it’s a *port*), but it looks to be a superb direct-port of a C project (Sqlite) and passes most of the tests that it needs to in order for it to be viable for use in at least our in-memory tests.</p>  <p>Anyway, you can’t download binaries, so you have to build it – but no changes are required so just do it.</p>  <p>I’m not going to cover the process of setting up in-memory databases for testing with SQLite as that’s an easily Google-able topic, but there are a few differences between doing it with the unmanaged libraries and with the pure managed libraries.</p>  <p>This is what my FluentNHibernate configuration looks like:</p>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span>Fluently.Configure()</pre>

  <pre><span class="lnum">   2:  </span>            .Database(</pre>

  <pre class="alt"><span class="lnum">   3:  </span>                 SQLiteConfiguration.Standard.ConnectionString(</pre>

  <pre><span class="lnum">   4:  </span>                      x =&gt; x.Is(mConnectionString)).Driver&lt;SqliteDriver&gt;());</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p></p>

<p>I’ve had to create a driver to make this work properly as there isn’t one provided as stock in NHibernate, the code for this is as simple as this:</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> SqliteDriver : ReflectionBasedDriver</pre>

  <pre><span class="lnum">   2:  </span>    {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>        <span class="rem">/// &lt;summary&gt;</span></pre>

  <pre><span class="lnum">   4:  </span>        <span class="rem">/// Initializes a new instance of &lt;see cref="SQLiteDriver"/&gt;.</span></pre>

  <pre class="alt"><span class="lnum">   5:  </span>        <span class="rem">/// &lt;/summary&gt;</span></pre>

  <pre><span class="lnum">   6:  </span>        <span class="rem">/// &lt;exception cref="HibernateException"&gt;</span></pre>

  <pre class="alt"><span class="lnum">   7:  </span>        <span class="rem">/// Thrown when the &lt;c&gt;Community.CsharpSqlite.SQLiteClient&lt;/c&gt; assembly can not be loaded.</span></pre>

  <pre><span class="lnum">   8:  </span>        <span class="rem">/// &lt;/exception&gt;</span></pre>

  <pre class="alt"><span class="lnum">   9:  </span>        <span class="kwrd">public</span> SqliteDriver()</pre>

  <pre><span class="lnum">  10:  </span>            : <span class="kwrd">base</span>(</pre>

  <pre class="alt"><span class="lnum">  11:  </span>                <span class="str">"Community.CsharpSqlite.SQLiteClient"</span>,</pre>

  <pre><span class="lnum">  12:  </span>                <span class="str">"Community.CsharpSqlite.SQLiteClient.SqliteConnection"</span>,</pre>

  <pre class="alt"><span class="lnum">  13:  </span>                <span class="str">"Community.CsharpSqlite.SQLiteClient.SqliteCommand"</span>)</pre>

  <pre><span class="lnum">  14:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  15:  </span>        }</pre>

  <pre><span class="lnum">  16:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  17:  </span>        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> UseNamedPrefixInSql</pre>

  <pre><span class="lnum">  18:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  19:  </span>            get { <span class="kwrd">return</span> <span class="kwrd">true</span>; }</pre>

  <pre><span class="lnum">  20:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  21:  </span>&nbsp;</pre>

  <pre><span class="lnum">  22:  </span>        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> UseNamedPrefixInParameter</pre>

  <pre class="alt"><span class="lnum">  23:  </span>        {</pre>

  <pre><span class="lnum">  24:  </span>            get { <span class="kwrd">return</span> <span class="kwrd">true</span>; }</pre>

  <pre class="alt"><span class="lnum">  25:  </span>        }</pre>

  <pre><span class="lnum">  26:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  27:  </span>        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">string</span> NamedPrefix</pre>

  <pre><span class="lnum">  28:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  29:  </span>            get { <span class="kwrd">return</span> <span class="str">"@"</span>; }</pre>

  <pre><span class="lnum">  30:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  31:  </span>&nbsp;</pre>

  <pre><span class="lnum">  32:  </span>        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> SupportsMultipleOpenReaders</pre>

  <pre class="alt"><span class="lnum">  33:  </span>        {</pre>

  <pre><span class="lnum">  34:  </span>            get { <span class="kwrd">return</span> <span class="kwrd">false</span>; }</pre>

  <pre class="alt"><span class="lnum">  35:  </span>        }</pre>

  <pre><span class="lnum">  36:  </span>&nbsp;</pre>

  <pre class="alt"><span class="lnum">  37:  </span>        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">bool</span> SupportsMultipleQueries</pre>

  <pre><span class="lnum">  38:  </span>        {</pre>

  <pre class="alt"><span class="lnum">  39:  </span>            get { <span class="kwrd">return</span> <span class="kwrd">true</span>; }</pre>

  <pre><span class="lnum">  40:  </span>        }</pre>

  <pre class="alt"><span class="lnum">  41:  </span>    }</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p></p>

<p>Yeah, not terribly exciting – just add a reference to Community.CsharpSqlite.SQLiteClient and this will work.</p>

<p>The other major difference is the delimiter between connection string components is a comma and the method of selecting an in-memory database looks different. This is my connection string:</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span><span class="str">"uri=file://:memory:,Version=3"</span>;</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>And this is the code I use to create the connection:</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">private</span> SqliteConnection GetConnection()</pre>

  <pre><span class="lnum">   2:  </span>        {</pre>

  <pre class="alt"><span class="lnum">   3:  </span>            <span class="kwrd">if</span> (mConnection == <span class="kwrd">null</span>) {</pre>

  <pre><span class="lnum">   4:  </span>                mConnection = <span class="kwrd">new</span> SqliteConnection(mConnectionString);</pre>

  <pre class="alt"><span class="lnum">   5:  </span>                mConnection.Open();</pre>

  <pre><span class="lnum">   6:  </span>            }</pre>

  <pre class="alt"><span class="lnum">   7:  </span>            <span class="kwrd">return</span> mConnection;</pre>

  <pre><span class="lnum">   8:  </span>        }</pre>
</div>

<p></p><style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>And this is therefore the code I use to create a session factory:</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>mFactory.OpenSession(GetConnection());</pre>
</div>

<div class="csharpcode">&nbsp;</div>

<p><strong>A word of warning</strong></p>

<p>Mileage may vary, I had 11 tests from about 300 fail, mostly due to unrecognised types/null values and exceptions that were different in this version of Sqlite, I’m submitting some code fixes for the unrecognised types and null values and modifying my tests to take into account the new exception types.</p>

<p>Also, I can’t guarantee I’ve done it right, so let me know if I’ve done something stupid.</p>

<p>All of my tests are now Any CPU and my build process is suddenly a lot simpler, I’ll take the hit of having to submit and change a bit of code in order to get that.</p>
	]]></description><link>http://codeofrob.com/entries/sqlite-csharp-and-nhibernate.html</link><guid isPermaLink="true">http://codeofrob.com/entries/sqlite-csharp-and-nhibernate.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 07 Jun 2010 20:44:00 GMT</pubDate></item><item><title><![CDATA[RavenDB & CouchDB - Map and Reduce]]></title><description><![CDATA[
		<p><strong>Previous entries in the series</strong></p>  <ul>   <li><a href="http://codeofrob.com/archive/2010/05/31/ravendb-whats-the-difference.aspx">RavenDB – What’s the difference?</a> </li>    <li><a href="http://codeofrob.com/archive/2010/06/02/ravendb-amp-couchdb-ndash-basic-queries.aspx">RavenDB &amp; CouchDB – Simple Queries</a> </li> </ul>  <p>One of the recurring features present in the popular document databases is the use of map-reduce functions as the primary way to create views on the stored data.</p>  <p><strong>Map Reduce</strong></p>  <p>At this point, I could go into a long description of what map/reduce actually is but that kind of thing is available via the use of a convenient <a href="http://www.google.com/search?sourceid=chrome&amp;ie=UTF-8&amp;q=map+reduce">google search</a>.</p>  <p>The short of it is that you map some data from each document into a structure to be queried on, and then run (and re-run) a reduce function over the mapped data in order to group it by some key.</p>  <p>Now, these map functions can get quite complicated, but the concept remains the same from the most basic versions up to the more complicated reports on the data.</p>  <p>Let’s look at the standard example of getting the number of comments across all the blog entries by a certain author.</p>  <p>Here is the structure of our example document:</p>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span>{</pre>

  <pre><span class="lnum">   2:  </span>    title: <span class="str">'robashton'</span>,</pre>

  <pre class="alt"><span class="lnum">   3:  </span>    category: <span class="str">'tech'</span>,</pre>

  <pre><span class="lnum">   4:  </span>    content: <span class="str">'blah blah blah'</span>,</pre>

  <pre class="alt"><span class="lnum">   5:  </span>    comments: [</pre>

  <pre><span class="lnum">   6:  </span>        { author: <span class="str">'anon'</span>, content: <span class="str">'blah'</span> },</pre>

  <pre class="alt"><span class="lnum">   7:  </span>        { author: <span class="str">'anon'</span>, content: <span class="str">'more blah'</span> }</pre>

  <pre><span class="lnum">   8:  </span>    ]</pre>

  <pre class="alt"><span class="lnum">   9:  </span>}</pre>
</div>

<div class="csharpcode">&nbsp;</div>

<div class="csharpcode">&nbsp;</div>

<p>The important data here is ‘author’ and the length of the comments array, so naturally we would map these in our map function.</p>

<p><strong>In RavenDB</strong></p>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>from doc <span class="kwrd">in</span> docs</pre>

  <pre><span class="lnum">   2:  </span>select <span class="kwrd">new</span></pre>

  <pre class="alt"><span class="lnum">   3:  </span>{</pre>

  <pre><span class="lnum">   4:  </span>     author = doc.author,</pre>

  <pre class="alt"><span class="lnum">   5:  </span>     count = doc.comments.Length</pre>

  <pre><span class="lnum">   6:  </span>}</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p><strong>In CouchDB</strong></p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">function</span>(doc) {</pre>

  <pre><span class="lnum">   2:  </span>  emit(doc.author, doc.comments.length);</pre>

  <pre class="alt"><span class="lnum">   3:  </span>}</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>There isn’t anything much to say about these, the RavenDB map function just returns the mapped data, and the CouchDB function emits the mapped field(s) as a key alongside the value(s) associated with that key.</p>

<p>The reduction will therefore take place on ‘author’ (the key), and we would sum all the comment counts (the value) for that author in the reduce function.</p>

<p><strong>In RavenDB</strong></p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>from result <span class="kwrd">in</span> results</pre>

  <pre><span class="lnum">   2:  </span>group result by result.author into g</pre>

  <pre class="alt"><span class="lnum">   3:  </span>select <span class="kwrd">new</span> </pre>

  <pre><span class="lnum">   4:  </span>{</pre>

  <pre class="alt"><span class="lnum">   5:  </span>     author = g.Key,</pre>

  <pre><span class="lnum">   6:  </span>     count = g.Sum(x =&gt; x.count)</pre>

  <pre class="alt"><span class="lnum">   7:  </span>}</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>&nbsp;</p>

<p><strong>In CouchDB</strong></p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">function</span> (key, values, rereduce) {</pre>

  <pre><span class="lnum">   2:  </span>   <span class="kwrd">return</span> sum(values);    </pre>

  <pre class="alt"><span class="lnum">   3:  </span>}</pre>
</div>
<style type="text/css">![CDATA[



.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>&nbsp;</p>

<p>The structure of these two functions immediately strike us as being very different and questions are therefore raised by that.</p>

<ul>
  <li>In RavenDB the reduce function is handed a selection of mapped values and its job is to group them by some key and return a new set of mapped values. </li>

  <li>In CouchDB, the map function emits the key to reduce on, and a separate value to be combined by the reduce method. This means that when the reduce method is called, it might have a collection of those values, but they’re <em>already grouped by key</em>. </li>

  <li>in RavenDB, the input of the reduce function must consume the output of the Map function, and then re-output the input of the reduce function. What this roughly equates to is <em>the reduce function and map function must return the same result shape.</em> </li>

  <li>In CouchDB , the result shape of the map and reduce functions don’t <em>have</em> to bear any relation to each other, and of course emit can be called multiple times per document. This is slightly more complicated, and while it can be more flexible, it also leads to a greater amount of complexity in the reduce function because the input can be different depending on the context in which it is called. </li>
</ul>

<p>The reduce function can be called more than once for a set of documents (and this holds true for both Raven + Couch, that’s&nbsp; the whole point of map/reduce), and in CouchDB an extra parameter is present called “rereduce”, which specifies whether this is the first pass or a subsequent pass. If the result shapes differ between the map function and reduce function, a check is required so different logic can be performed based on this.</p>

<p>For those of you who skipped that big body of text, the important thing to take away is that <em><strong>in RavenDB the responsibility of deciding what to group the documents on falls to the Reduce function, and in CouchDB the responsibility falls to the Map function.</strong></em></p>

<p>So, these are two rather different ways of thinking about MapReduce and this is definitely something to be aware of when trying to jump between the two.</p>

<p>This was quite a long entry with a really short summary, so in the next entry, I’ll be listing and explaining some of the actual functionality differences between CouchDB and RavenDB.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb-&amp;-couchdb---map-and-reduce.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb-&amp;-couchdb---map-and-reduce.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 06 Jun 2010 19:15:00 GMT</pubDate></item><item><title><![CDATA[RavenDB & CouchDB - Basic Queries]]></title><description><![CDATA[
		<p><strong>Previous entries in the series</strong></p>
<ul>
    <li><a href="http://codeofrob.com/archive/2010/05/31/ravendb-whats-the-difference.aspx">RavenDB – What’s the difference</a></li>
</ul>
<p>Once you have a number of documents in the database, you soon want to do more complex operations than simply retrieving a list of them.</p>
<p>Consider therefore the following and rather over-used example document:</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span>{</pre>
<pre><span class="lnum">   2:  </span>    title: <span class="str">"Another blog entry"</span>,</pre>
<pre class="alt"><span class="lnum">   3:  </span>    content: <span class="str">'blah blah blah'</span>,</pre>
<pre><span class="lnum">   4:  </span>    category: <span class="str">'code'</span>,</pre>
<pre class="alt"><span class="lnum">   5:  </span>    author: <span class="str">'robashton'</span></pre>
<pre><span class="lnum">   6:  </span>}</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<p>Our example query would be to get all of the documents from the database that were written by a particular author AND in a certain category.</p>
<p>Obviously querying all the blogs written by a single author, or all the blogs in a certain category would be fairly expected queries too.</p>
<p><strong>Indexes in RavenDB</strong></p>
<p>In order to perform any queries whatsoever in RavenDB, we first need to create an index.</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span>from doc <span class="kwrd">in</span> docs</pre>
<pre><span class="lnum">   2:  </span>select <span class="kwrd">new</span> {</pre>
<pre class="alt"><span class="lnum">   3:  </span>     doc.author,</pre>
<pre><span class="lnum">   4:  </span>     doc.category</pre>
<pre class="alt"><span class="lnum">   5:  </span>};</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<p>This is effectively a map function written as a LINQ query which returns a single value, an object that is a map of the values to be indexed.</p>
<p><em>Get all the documents by author and category</em></p>
<p>indexes/entriesByAuthorAndCategory?query=category:tech AND author:robashton</p>
<p><em>Get all the documents by category</em></p>
<p>indexes/entriesByAuthorAndCategory?query=category:tech</p>
<p><em>Get all the documents by author</em></p>
<p>indexes/entriesByAuthorAndCategory?query=author:robashton</p>
<p>Those queries will return a list of whole documents which match the queries passed in.</p>
<p><strong>Indexes in CouchDB</strong></p>
<p>
The same goes for CouchDB, only map functions in CouchDB have two outputs, and are written in JavaScript.</p>
<div class="csharpcode">
<pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">function</span>(doc) {</pre>
<pre><span class="lnum">   2:  </span>  emit([doc.category, doc.author], doc);</pre>
<pre class="alt"><span class="lnum">   3:  </span>}</pre>
</div>
<style type="text/css">![CDATA[

.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<p>  </p>
<p>Return values are specified by calling emit, and emit can be called more than once for each document, thus multiple keys can be created for each document with a single map function. The first parameter in Emit is the “key” to be searched on, and the second parameter is the data associated with that key (in this case, the document).</p>
<p><em>Get all the documents by author and category</em></p>
<p>blogs/_view/byAuthorAndCategory?startkey=["tech","robashton"]</p>
<p><em>Get all the documents by category</em></p>
<p>blogs/_view/byAuthorAndCategory?startkey=["tech"]</p>
<p><em>Get all the documents by author</em></p>
<p>Ah. This suddenly a bit more complicated. I’ve not actually managed to come to a convenient solution, as far as I can understand from the <a href="http://wiki.apache.org/couchdb/HTTP_view_API?action=show&amp;redirect=HttpViewApi">docs</a>, if you want to query <em>specific</em> fields within the key, you have to submit a POST request containing a JSON document with the fields you wish to search.</p>
<p>So it’s either that or create specific indexes for the queries you wish to perform. Performance-wise this is probably optimal but I don’t actually know for sure.</p>
<p><strong>Paging in RavenDB</strong></p>
<p>Paging in RavenDB is as simple as appending a start + pageSize to the query string</p>
<p>indexes/entriesByAuthorAndCategory?query=category:tech&amp;start=10&amp;pageSize=10</p>
<p>This will perform the query across the entire index and only retrieve the documents requested, this is an operation with trivial expense.</p>
<p><strong>Paging in CouchDB</strong></p>
<p>In CouchDb, a similar query string can be used, using “skip” and “count parameters, but these are considered expensive and instead to perform paging you should:</p>
<ul>
    <li>Get the first collection of documents, limiting by count(+1) </li>
    <li>Get the next collection of documents, starting at the last document in the first collection, limiting by count (+1) </li>
    <li>Etc </li>
</ul>
<p><strong>Summary</strong></p>
<p>This really is just a whistle-stop of some basic functionality in these two systems, although it does highlight some fairly major differences in basic functionality between them.</p>
<p>Next up some more advanced functionality will be covered, going over the differences between writing reduce functions in the two</p>
	]]></description><link>http://codeofrob.com/entries/ravendb-&amp;-couchdb---basic-queries.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb-&amp;-couchdb---basic-queries.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 02 Jun 2010 06:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - What’s the difference?]]></title><description><![CDATA[
		<p><strong>What we we comparing against?</strong></p>  <p>One of the most oft-asked questions on Twitter, the RavenDB mailing list and other such methods of communication, is what are the differences between RavenDB and &lt;insert currently preferred NoSql solution&gt;.</p>  <p>The two main contenders are probably CouchDB and MongoDB – MongoDB in particular has been gathering a lot of momentum in the .NET space recently thanks to efforts such as NoRM and such.</p>  <p>Personally, I think that comparisons against MongoDB should stop after one question, “Is your application read or write heavy?”, comparing overall performance and functionality is completely redundant because the two pieces of software are, in my mind at least, geared for completely different scenarios. True you can create indexes to make read operations light, but then you need to make sure that your indexes fit in memory and etc etc.</p>  <p>I’ll stop there unless anyone complains notably, because trying to describe the differences between Couch and Mongo is a big enough task in itself, in fact you can read more about this <a href="http://www.mongodb.org/display/DOCS/Comparing+Mongo+DB+and+Couch+DB">here</a>, and note for yourself that they really are entirely different animals.</p>  <p>CouchDB and RavenDB on the other hand are both geared very much towards read-heavy applications, providing up front map/reduce indexes (or materialised views) on data, scaling horizontally via replication (although Raven supports this <strong>and</strong> sharding), and they both use REST as their method of access to the data store.</p>  <p>There are other document databases out there, and they all do things differently, but these are the two getting the most traction from the developer eco-system that I am familiar with. Thus, I shall be comparing RavenDB against CouchDB in this series of blog entries.</p>  <p><strong>So, they’re the same right?</strong></p>  <p>No, not really – and to be honest I thought that aside from the major differences that RavenDB contains such as transactions, sharding, linq-based-indexes, full text search, extensibility that this was the case!</p>  <p>Okay, that’s a fairly big list of differences already, but the features that are additions over CouchDB are primarily candy for developer use</p>  <p><strong>Disclaimer:</strong> <em>Until last week, I hadn’t properly touched CouchDB, and it was only at a workshop ran by <a href="http://www.meetup.com/DevTank/">DevTank</a> in London that I realised quite how different the two databases were in functionality, use and design. However – while I’m about to launch into a series of posts about this topic, I might well be wrong about a few things (due to lack of exposure), and I’ll be happy to update my blog posts and admit that I am wrong when it is pointed out to me :).</em></p>  <p><strong>Where are we going with this?</strong></p>  <p>Obviously I have next to me a <em>massive</em> list of differences between CouchDB and RavenDB, and it really is a big list. I’ll be splitting it out over the coming days into a series of blog entries exploring these differences in detail and giving my opinions on them.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---what’s-the-difference.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---what’s-the-difference.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 31 May 2010 15:04:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - How stale do you want it?]]></title><description><![CDATA[
		<p><strong>The problem</strong></p>  <p>When a query is executed against an index in RavenDB, one of the key aspects of that query is checking the task queue to see if any tasks are currently pending against that index. It is this call that dictates whether IsStale is set as a flag on the return result from that query.</p>  <p>When a call to WaitForNonStaleResults is made in the .NET client, the client simply makes multiple requests against the query until IsStale is found to be false, or until the WaitForNonStaleResults call times out. Thus, the client can wait until there are no more tasks waiting to be executed against the index.</p>  <p>But wait, I hear you cry, what if new tasks are added against those indexes in the meantime? Surely this means that the the results will always be stale on busy servers?</p>  <p><strong>The solution</strong></p>  <p>Thankfully, support is baked into RavenDB to allow for this scenario, so a request can be made to retrieve up to date results as of a specified time called the “cut off”.</p>  <p>This is exposed in the .NET Client as alternatives to the WaitForNoneStaleResults call.</p>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span>BlogEntry[] entries = documentSession.Query&lt;BlogEntry&gt;(<span class="str">"BlogEntryByCategory"</span>)</pre>

  <pre><span class="lnum">   2:  </span>                        .WaitForNonStaleResultsAsOfNow(TimeSpan.FromSeconds(30))</pre>

  <pre class="alt"><span class="lnum">   3:  </span>                        .Where(<span class="str">"Category:RavenDb"</span>)</pre>

  <pre><span class="lnum">   4:  </span>                        .ToArray();</pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>This particular version of the call will wait at the very most 30 seconds for non-stale data to be available as of the time the method was invoked. Thus, any data added after the method is invoked will not count towards whether the results count as being stale or not.</p>

<div class="csharpcode">
  <pre class="alt"><span class="lnum">   1:  </span>BlogEntry[] entries = documentSession.Query&lt;BlogEntry&gt;(<span class="str">"BlogEntryByCategory"</span>)</pre>

  <pre><span class="lnum">   2:  </span>                        .WaitForNonStaleResultsAsOf(DateTime.Now.Subtract(TimeSpan.FromMinutes(10)), TimeSpan.FromSeconds(30))</pre>

  <pre class="alt"><span class="lnum">   3:  </span>                        .Where(<span class="str">"Category:RavenDb"</span>)</pre>

  <pre><span class="lnum">   4:  </span>                        .ToArray();</pre>
</div>
<style type="text/css">![CDATA[
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>

<p>A similar strategy has been used here, only we don’t care about anything added after about 10 minutes ago. </p>

<p><strong>Summary</strong></p>

<p>You probably still wouldn’t use this when requesting views of your data for displaying on the front page of a website, but this can be used for processes which do care about non-stale data and are willing to wait for it.</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---how-stale-do-you-want-it.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---how-stale-do-you-want-it.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 18 May 2010 20:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - The HiLo what how and why]]></title><description><![CDATA[
		<p>One of the issues I touched on in with the <a href="http://codeofrob.com/archive/2010/05/12/ravendb-basic-usage-considerations.aspx">basic interaction with RavenDB</a> was the awkwardness of with having to call SaveChanges in order to get the ids of entities that had been saved across the unit of work. This is not a problem new to the document db space, nor is it a problem new to any system where the domain has been mapped to any id based data store (ORMs/RDBMS/etc).</p>  <p>I was going to cook a home brew solution specifically for my use within my projects and blog about it in order that other people could use it, but after posting my intentions in the <strong>RavenDB</strong> mailing list to create something like this, Oren suggested that making it the default behaviour and moving id generation to the Store would be a welcome move.</p>  <p>After posting on Twitter about this now being default, I got asked quite a few questions on what HiLo was, what the advantages were, and why it was a good thing that in the .NET client for RavenDB this was now going to be the default.</p>  <p><strong>The gist</strong></p>  <ul>   <li>Waiting until SaveChanges to get ids for saved entities makes writing logic against those entities troublesome</li>    <li>Calling SaveChanges every time a new entity is created makes transactions troublesome</li>    <li>Calling SaveChanges to get the entity id means a call across the wire just to get an entity id, which is expensive</li>    <li>Simply assigning a Guid to the Id makes accessing documents via REST an unpleasant experience</li>    <li>You can’t just assign a random integer, because you’d just get collisions as other clients did the same and tried to save their entities</li>    <li>HiLo provides a method of creating *<strong>incremental</strong>* integer based ids for entities in a fashion that is safe in concurrent environments</li> </ul>  <p><strong>The algorithm</strong></p>  <p>The basic premise, is that the server still controls the id generation, but effectively hands out a range of ids to each client, which the client can then hand out to objects as they are created, and when the client runs out of ids, it simply requests more.</p>  <p>Obviously, requesting a heap of Ids all at the same time would be expensive, so the idea is that the server provides a single id, a “Hi” value which controls the creation of the range on the client. (which provides the “Lo” value)</p>  <p>There are a number of ways this can be implemented, but the one I chose was probably the simplest, and credit goes to <a href="http://devlicio.us/blogs/tuna_toksoz/archive/2009/05/18/id-generation-for-db4o.aspx">Tuna Toksoz</a> for the blog entry which provided the means to implementing it myself.</p>  <ul>   <li>The data store needs only store the latest “Hi” value, which starts at 1, and increases by 1 every time a new “Hi” value is requested by a client</li>    <li>The clients all use the same number for a “Capacity”, that is – the range of numbers that each “Hi” value represents. For example 1000</li>    <li>Each client requests a “Hi” value and resets their “Lo” value to 0</li>    <li>Every time a new Id is requested from the generator, the Id is generated by combining the Hi and Lo numbers together:</li> </ul>  <div class="csharpcode">   <pre class="alt"><span class="lnum">   1:  </span>(currentHi - 1)*capacity + (++currentLo)</pre>
</div>

<div class="csharpcode">
  <ul>
    <li>
      <p>When currentLo reaches capacity, a new Hi is requested and the cycle starts over again</p>
    </li>
  </ul>
</div>

<p>In the actual implementation, there is some locking going on around this algorithm in order to make the client generator available across threads (web requests) and avoid having to create a new generator per session (defeating the point of having one if you only create a single object in a session).</p>

<p>Let’s look at a sample run through, with a small capacity of “3”, to keep the sample small!</p>

<table border="1" cellspacing="0" cellpadding="2" width="500"><tbody>
    <tr>
      <td valign="top" width="98"><strong>Description</strong></td>

      <td valign="top" width="127">currentLoBefore</td>

      <td valign="top" width="89">currentHi</td>

      <td valign="top" width="82"><strong>Created Id</strong></td>

      <td valign="top" width="102">currentLoAfter</td>
    </tr>

    <tr>
      <td valign="top" width="97">Hi Request</td>

      <td valign="top" width="126">0</td>

      <td valign="top" width="88">1</td>

      <td valign="top" width="81">1</td>

      <td valign="top" width="105">1</td>
    </tr>

    <tr>
      <td valign="top" width="97">&nbsp;</td>

      <td valign="top" width="126">1</td>

      <td valign="top" width="88">1</td>

      <td valign="top" width="81">2</td>

      <td valign="top" width="106">2</td>
    </tr>

    <tr>
      <td valign="top" width="97">&nbsp;</td>

      <td valign="top" width="126">2</td>

      <td valign="top" width="88">1</td>

      <td valign="top" width="81">3</td>

      <td valign="top" width="106">3 (capacity)</td>
    </tr>

    <tr>
      <td valign="top" width="97">Hi Request</td>

      <td valign="top" width="126">0</td>

      <td valign="top" width="88">2</td>

      <td valign="top" width="81">4</td>

      <td valign="top" width="106">1</td>
    </tr>

    <tr>
      <td valign="top" width="97">&nbsp;</td>

      <td valign="top" width="126">1</td>

      <td valign="top" width="88">2</td>

      <td valign="top" width="81">5</td>

      <td valign="top" width="106">2</td>
    </tr>

    <tr>
      <td valign="top" width="97">&nbsp;</td>

      <td valign="top" width="126">2</td>

      <td valign="top" width="88">2</td>

      <td valign="top" width="81">6</td>

      <td valign="top" width="106">3 (capacity)</td>
    </tr>
  </tbody></table>

<p>As we can see, if all the clients are using the same capacity, and they are given different “Hi” values, then they can’t generate duplicate keys, but by and large they’ll be sequential in nature.</p>

<p><strong>The implementation in RavenDB</strong></p>

<p>In RavenDB, the default function configured against the DocumentConvention is now HiLo, which means if a new document is saved against the session with its Id set to NULL, it will have an Id generated on the spot which contains the name of the document and the incremented Id. Obviously this can be overridden by changing the convention to leave the created id at some default value of your application’s choosing.</p>

<p>My original implementation was a bit poor, generating quite a bit of noise in the document database (it was inserting documents to get the ids), and the incremented Ids were being shared amongst objects – which meant if you created say, blogentry/1, saving a new user would mean having newuser/2. </p>

<p>Oren changed this to directly store a single object in the RavenDB for the generator, and to create a generator per-type – which means a lot less noise and more sensible ids being generated for each document.</p>

<p><strong>What it means</strong></p>

<p>What this essentially means, is if you’re using RavenDB out of the box without changing any of the conventions, documents will have a generated Id as soon as Store is called for that document. This means that SaveChanges does not have to be called until right at the very end of the Unit of Work, which means all changes can be efficiently batched in a single request and as a result applications should be easier to write and performance should be easier to maintain.</p>

<p>This is a .NET client specific feature and nothing was changed in the database itself to make this work.</p>

<p>What this <em>does</em> mean, is that if multiple clients from different platforms are going to be connecting to RavenDB and manipulating data, if you’re using the default HiLo implementation then a similar algorithm will need implementing for those other platforms, using the same capacity in order to prevent concurrency issues. This is not necessarily a downside, but is worth making a note of if you are going to be having this sort of set up.</p>

<p><strong>What I learned</strong></p>

<p>While I might contribute the odd bug fix to open source projects now and then, the idea of going in and changing the fundamental way the .NET RavenDB client worked was a bit daunting – not from a technical perspective, but from a taste perspective as I wasn’t sure how Oren wanted things done. As he later said, he’d prefer that code that has to then change be submitted, then no code at all be submitted. I’d like to raise that with anybody who wants to contribute to this project – if you’ve got a good idea then hit the mailing list and suggest it and maybe implement it – nothing to be lost if it’s something people want to use.</p>

<p>In the end, my implementation is barely visible in there, but I'm still pleased that this is in there, it makes *my* life easier :)</p>
	]]></description><link>http://codeofrob.com/entries/ravendb---the-hilo-what-how-and-why.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---the-hilo-what-how-and-why.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 16 May 2010 07:00:00 GMT</pubDate></item><item><title><![CDATA[RavenDB - An Introduction]]></title><description><![CDATA[
		<p><font face="Arial"><strong><em>Note: This entry is out of date, RavenDB has changed a lot since these early days and you’d be best off checking the following resources:</em></strong></font></p>  <ul>   <li><strong><em><font face="Arial"><a href="http://github.com/robashton/ravengallery">http://github.com/robashton/ravengallery</a> A sample application built on top of the latest RavenDB binaries</font></em></strong></li>    <li><a href="http://codeofrob.com/archive/2010/09/28/ravendb-image-gallery-project-i.aspx">http://codeofrob.com/archive/2010/09/28/ravendb-image-gallery-project-i.aspx</a>&nbsp;<em><strong><font face="Arial">The first entry in a series on building an application on top of RavenDB</font></strong></em></li> </ul>  <p><em><strong><font face="Arial">You can of course carry on reading this entry, but be aware&nbsp; that it’ll be largely incorrect.</font></strong></em></p>  <p><font face="Arial">As I mentioned in a brief entry a couple of days ago, I've been playing with RavenDB for about a week now, and mapping across an old project of mine which never got off the ground due to work and time constraints.</font></p>  <p><font face="Arial">I spent a lot of time trying to get that project to play ball inside a relational database, and while I reached some satisfactory conclusions, it rather felt like I was trying to play ball with an anchor.</font></p>  <p><font face="Arial">I had always resolved to come back to the project when I had more time, and perhaps to write some of the more complicated reporting aspects of the project against something more appropriate (think Solr or Lucene), and with the announcement of RavenDB I was motivated to at least play around with it again.</font></p>  <p><font face="Arial">I have a few posts lined up on some of the more complicated usages of RavenDB I've encountered thus far, but first I want to go over the basic structure of 'how to use RavenDB' from the perspective of somebody using the .NET Client API (Ignoring the underlying HTTP requests for now)</font></p>  <p><font face="Arial"><strong>Getting Started</strong></font></p>  <p><font face="Arial">The first thing you need to do is grab the source and build the binaries, as as far as I can see you can't get hold of any yet. This is probably a good thing because if you're writing code against RavenDB at this stage you'll want to be updating constantly.</font></p>  <p><strong>Edit:</strong> Builds are now available from the build server found <a href="http://builds.hibernatingrhinos.com/builds/RavenDB">here</a></p>  <p><font face="Arial">Anyway, get over to Github and pull from there using your preferred tool (or just download as a zip!)</font></p>  <p><font face="Arial"><a href="http://github.com/ravendb/ravendb">http://github.com/ravendb/ravendb</a></font></p>  <p><font face="Arial">RavenDB is a VS2010 project, which means unless you have VS2010 you're not going to be able to just open it up and build it in Visual Studio - happily there are some build scripts but I'm not going to go into detail on how to build RavenDB, there are plenty of instructions out there for such things elsewhere.</font></p>  <p><font face="Arial">Once you've built RavenDB, the important binaries to look at are:</font></p>  <p><font face="Arial">* Raven.Client: This is what your application will be referencing to talk to RavenDB      <br>* Raven.Server: This is what you can run to create a standalone RavenDB server</font></p>  <p><font face="Arial">For now, grab the contents of the built Raven.Client bin directory, create a console application and reference the lot of them.</font></p>  <p><font face="Arial">Now you have a choice, you can launch the Server and get a nice web interface for managing your indices and viewing your data, or you can just run it embedded in your application. Choosing between the two is the difference between the following two lines of code:</font></p> <font face="Arial">   <pre class="brush: csharp;" title="code">using(var documentStore = new DocumentStore() { Url = "http://localhost:8080"}) {</pre>
</font>

<p><font face="Arial">or</font></p>
<font face="Arial">
  <pre class="brush: csharp;" title="code">using (var documentStore = new DocumentStore() { DataDirectory = "Data" }) {</pre>
</font>

<p><font face="Arial">If you opt for running the server, then you need to go to Raven.Server and run it (you might need to run it elevated, as for me it falls over if I don't).</font></p>

<p><font face="Arial">Now, my basic program looks something like this:</font></p>

<p><font face="Arial"></font><font face="Arial"></font>

  </p><pre class="brush: csharp;" title="code">    class Program
    {
        static void Main(string[] args)
        {
            using (var documentStore = new DocumentStore() { Url = "http://localhost:8080" })
            {
                documentStore.Initialise();
                using (var documentSession = documentStore.OpenSession())
                {

                }
            }
        }
    }</pre>


<p><font face="Arial">Just to add some context to this, in a web application you'd create the document store on application start up, and then per request/unit of work you'd request a document session and keep that around for the lifetime of that request/unit of work.</font></p>

<p><font face="Arial">The session controls unit of work, and controls some important tasks such as</font></p>

<p><font face="Arial">1) Tracking loaded entities + Changes to those entities 
    <br>2) Exposing methods to query/load/save to the document store</font></p>

<p><font face="Arial"><strong>Saving Documents to the Store</strong> 

    <br></font><font face="Arial">No set up is required to store anything to RavenDB (it *is* a document database), by default the conventions will look for an "Id" property on any object you try to store however so this is worth bearing in mind.</font></p>

<p><font face="Arial">Here is a basic entity:</font></p>
<font face="Arial">
  <pre class="brush: csharp;" title="code">   public class BasicEntity
    {
        public string Id
        {
            get;
            set;
        }

        public string SomeData
        {
            get;
            set;
        }

 public string SomeOtherData
 {
            get;
            set;
 }
    }</pre>
</font>

<p><font face="Arial">This can be dumped to the store with a simple call to documentSession.Store</font></p>
<font face="Arial">
  <pre class="brush: csharp;" title="code">BasicEntity entity = new BasicEntity()
{
    SomeData = "Hello World",
    SomeOtherData = "This is just another property",
};
documentSession.Store(entity);</pre>
</font>

<p><font face="Arial">However, a few things of note are</font></p>

<p><font face="Arial">1) This has not actually gone to the server yet 
    <br>2) The document still hasn't got an Id, don't try to do anything with that property yet</font></p>

<p><font face="Arial">RavenDb will batch up changes to the store until SaveChanges is called, and only then will documents be given ids and be saved to the server. A call to SaveChanges is atomic and this is one of the ways RavenDb gives us some basic transaction support.</font></p>
<font face="Arial">
  <pre class="brush: csharp;" title="code">documentSession.SaveChanges();</pre>
</font>

<p><font face="Arial"><strong>Retrieving + Modifying an Document</strong> 

    <br></font><font face="Arial">I mentioned that the document session was transactional and could keep track of loaded documents and changes to those documents. This is a feature that makes the .NET client library a pleasure to work with because you can do the following:</font></p>

<p><font face="Arial"></font><font face="Arial"></font>

  </p><pre class="brush: csharp;" title="code">// Load the entity by id
BasicEntity loadedEntity = documentSession.Load&lt;BasicEntity&gt;("SomeId");

// Modify the entity
loadedEntity.SomeData = "Greetings from Ohio";

// Flush any changes made to any entities to the store
documentSession.SaveChanges();</pre>


<p><font face="Arial">What this means in essence, is that if you've got a nice structured application, your documents can be modified by the application without having to worry about how they are persisted. This is something we're used to with NHibernate and it's good to see some of these concepts appearing in a document database client.</font></p>
<font face="Arial">
  <p>
    <br><strong>Querying for Documents</strong> 

    <br>An important feature of anything we store data in, is the ability to query the store for 'views' or indeed the actual entities themselves.</p>

  <p>We've gotten used to in NHibernate and other ORMs simply executing ad-hoc queries against the database, and while you can do that with some document databases, that's not really what RavenDb is designed for.</p>

  <p>In order to query documents in RavenDB it is necessary to create an index across the properties of the documents you wish to query. This is done up front and exists in the database. A few things of note:</p>

  <p>1) Documents are processed against those indexes when they are added (eventually) 
    <br>2) Queries taking place against those indexes are therefore cheap (relative to say, doing an ad-hoc query)</p>

  <p>In my application, I create all of my indexes up front as part of my 'database creation script' (actually, they're the only part of my database creation script, because there is so little setup involved. There is nothing to stop you doing it at any point when the application is running though.</p>

  <p>Indexes exist as Linq queries against the documents in the store, and are either be defined as the strings that will be sent up to the server and stored as they are written, or defined as linq queries that will be converted *into* strings and stored on the server.</p>

  <p>The downside to using the actual linq queries, is that the indexes on the server won't look exactly as you wrote them, but the upside is you get type safety and intellisense. I'm currently choosing to use the strongly typed linq queries because I don't mind how they look on the server, just so long as they work. I write tests for all of my indexes and queries so I know they're cool.</p>

  <p>The recommended practise is still currently to define your indexes separately to the application, as strings in the Web UI.</p>

  <p>There are two major components of each index, the "Map" query and the "Reduce" query. I'll not go into detail on what this means, because once again you can get this information across the internet, and Oren has written a very good visual explanation of what Map/Reduce looks like in Raven <a href="http://ayende.com/Blog/archive/2010/03/14/map-reduce-ndash-a-visual-explanation.aspx">here</a>:</p>

  <p>In order to do a query, we need at the very least to create a Map telling Raven which fields we want indexing for our queries. This means we only index the fields that are relevant to our query and keep things small and (hopefully) more efficient.</p>

  <p>Indexes are created against the document store (not the session), and the syntax for that looks something like this:</p>

  <pre class="brush: csharp;" title="code">documentStore.DatabaseCommands.PutIndex(
    "BasicEntityBySomeData",
    new IndexDefinition&lt;BasicEntity, BasicEntity&gt;()
    {
        Map = docs =&gt; from doc in docs
                        where doc.SomeData != null
                        select new
                        {
                            SomeData = doc.SomeData
                        },
           });</pre>

  <p>* "BasicEntityBySomeData" is the unique identifier of the index we have created 
    <br>* The linq query is ran against "docs" which is (effectively) a collection of all the documents in the database (not just BasicEntities). 

    <br>* SomeData is now a field that is being indexed with the name SomeData</p>

  <p>There is nothing to stop you from indexing every field of the document in a single index and just using that index across all of your queries, but that would probably be unwise. The whole point of creating a map is you are limiting the data you are indexing to just the data you want to search on.</p>

  <p>You can write *almost* any code you want in the linq statement, as on the server it will be converted into a proper linq query and executed as a function across the documents. </p>

  <p>To use this Index, we invoke the Query method on the DocumentSession specifying the name of the index we wish to use and a Where clause (which is effectively a Lucene query) against that index.</p>

  <pre class="brush: csharp;" title="code">BasicEntity[] documents = documentSession.LuceneQuery&lt;BasicEntity&gt;("BasicEntityBySomeData")
    .Where("SomeData:Hello~")
    .WaitForNonStaleResults()
    .ToArray();</pre>

  <p>This will return a collection of documents where "SomeData" contains some text that looks like "Hello". Clearly there is some scope here for yet more strongly typed usefulness, but once again I have tests for all of my queries so it's not presenting a problem in this area.</p>

  <p>The WaitForNonStaleResults call means that the call will wait a (default) amount of time for the documents to finish indexing before returning data (or timeout). The use of kind of call should be thought about carefully, as the whole point of the document database is that it's "eventually consistent", and you don't always *need* the most up to date result possible. (For example: Displaying a list of documents on the front page of your website)</p>

  <p><strong>Retrieving only the data you need 
      <br></strong>This is all very well and good, but because you're storing entire documents and sometimes you only want small portions of those documents, and this is of course possible too.</p>

  <p>I've defined a simple projection of the BasicEntity containing a single property like so:</p>

  <pre class="brush: csharp;" title="code">    public class SomeDataProjection
    {
        public string SomeData
        {
            get;
            set;
        }
    }</pre>

  <p>In order to get the value from the index rather than fetching the entire document from the store, we need to modify the index slightly:</p>

  <pre class="brush: csharp;" title="code">documentStore.DatabaseCommands.PutIndex(
    "BasicEntityBySomeData",
    new IndexDefinition&lt;BasicEntity, BasicEntity&gt;()
    {
        Map = docs =&gt; from doc in docs
                        where doc.SomeData != null
                        select new
                        {
                            SomeData = doc.SomeData
                        },
        Stores = { { x =&gt; x.SomeData, FieldStorage.Yes } }
    });</pre>

  <p>We are then telling RavenDb to store the value in the index so it can be easily retrieved using the following query.</p>

  <pre class="brush: csharp;" title="code">SomeDataProjection[] projections = documentSession.LuceneQuery&lt;BasicEntity&gt;("BasicEntityBySomeData")
    .WaitForNonStaleResults()
    .SelectFields&lt;SomeDataProjection&gt;("SomeData")
    .ToArray();</pre>

  <p>This will mean only the data you want is transmitted across the wire and make the query much more performant. <strong>Note</strong>: You can only pull back fields that have been stored using the Store facility on the index.</p>

  <p><strong>Reporting on your data</strong> 

    <br>So that's round tripping&nbsp; to and from the data store, but in the real world you soon need to be able to perform more complex queries across your data.</p>

  <p>This is a contrived example, but how about summing up the total lengths of all the strings stored in all the SomeData properties across the document store?</p>

  <p>Let's add a new property to the Entity called "Category" so we can get all the lengths by category:</p>

  <pre class="brush: csharp;" title="code">  public class BasicEntity
    {
        public string Id
        {
            get;
            set;
        }

        public string Category
        {
            get;
            set;
        }

        public string SomeData
        {
            get;
            set;
        }
    }</pre>

  <p>And let's add a load of entities to the document store like thus:</p>

  <pre class="brush: csharp;" title="code">documentSession.Store(new BasicEntity()
{
    Id = "Document1",
    Category = "One",
    SomeData = "Text"
});
documentSession.Store(new BasicEntity()
{
    Id = "Document2",
    Category = "Two",
    SomeData = "More text"
});
documentSession.Store(new BasicEntity()
{
    Id = "Document3",
    Category = "One",
    SomeData = "And more"
});
documentSession.SaveChanges();</pre>

  <p>What we want to do, is index the *length* of the strings stored in the document, and index the category, before reducing the query across category to get the total lengths. If you don't understand what I mean by that, then go and read about Map/Reduce on Oren's blog linked above!</p>

  <pre class="brush: csharp;" title="code">documentStore.DatabaseCommands.PutIndex(
"BasicEntityCountSomeDataLengthByCategory",
new IndexDefinition&lt;BasicEntity, CategoryDataCountResult&gt;()
{
    Map = docs =&gt; from doc in docs where doc.SomeData != null
                            select new
                            {
                                Category = doc.Category,
                                SomeDataLength = doc.SomeData.Length
                            },
    
    Reduce =  results =&gt; from result in results 
                group result by result.Category into g
                select new
                {
                    Category = g.Key,
                    SomeDataLength = g.Sum(x =&gt; x.SomeDataLength)
                }
});</pre>

  <p>It's as simple as that, this now means I can execute the query:</p>

  <pre class="brush: csharp;" title="code">CategoryDataCountResult[] counts = documentSession.LuceneQuery&lt;BasicEntity&gt;("BasicEntityCountSomeDataLengthByCategory")
    .WaitForNonStaleResults()
    .SelectFields&lt;CategoryDataCountResult&gt;("SomeDataLength", "Category")
    .ToArray();</pre>

  <p>And that will give me the results as expected:</p>

  <p>One: 12 
    <br>Two: 9</p>

  <p>The beautiful thing about this, is that was pretty much calculated when the documents were added, reading the data out was a really cheap operation - think about the cost of doing this in T-SQL :)</p>

  <p><strong>Summary</strong> 

    <br>This was quite a lengthy blog post to cover some of the simple features of RavenDB, I'll start getting into more detail in my next post where I'll cover some more complicated reporting queries/indexes and talk about the excellent Web interface that Oren has created part of this project.</p>

  <p>
    <br><strong>My two cents 
      <br></strong>My experiences with the project so far have been mostly positive, I've found a few issues but Oren has been *very* fast to fix them and publish fixes to Github (and these have as he says, been "edge cases") which most people won't come into contact with when playing with RavenDB.</p>

  <p>It's definitely worth a gander, I see this project taking off in the .NET space as it matures.</p>
</font>
	]]></description><link>http://codeofrob.com/entries/ravendb---an-introduction.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ravendb---an-introduction.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 09 May 2010 20:05:00 GMT</pubDate></item><item><title><![CDATA[Playing with RavenDB - A Precursor]]></title><description><![CDATA[
		This week I decided to pick up Ayende's latest project -&nbsp; RavenDB and have a go at building an application against it.<br>
I haven't really had chance to play with any of the latest batch of document databases, and I figured I'd find this 'newer' project more interesting than any of the well established crowd.<br>
<br>
I'm going to do a few blog posts on the subject as I go through, but as all series need an introduction I thought I'd share some of my initial thoughts on my first steps onto this project.<br>
<ul>
    <li>RavenDB is very new, and there are features that you can see *will* be there, but you have to work around&nbsp; them for now if you want to use RavenDB! That said, my first post to the mailing list was met with a response of "I've done that and it will be in tomorrow". I get the feeling Ayende is working overtime on this project.</li>
    <li>The Web interface for managing RavenDB is just *amazing*, very smooth work</li>
    <li>RavenDB has a few things that I wasn't expecting from a document database:
    <ul>
        <li>Transactions (both Unit of Work and across multiple requests)</li>
        <li>Unit of Work, and the .NET client tracks loaded entities and changes to those entities</li>
    </ul>
    </li>
</ul>
To the people who are complaining that Ayende is wasting his time on "yet another DocDB", from just the top two things alone I'd say "wait and see", I get the feeling that this project has a lot of potential.<br>
One thing I really like so far is the ability to write Map/Reduce functions as Linq queries attached to an Index. The only oddity here is that (currently) you have to write these as strings in the .NET client (because they'll be sent across the wire to the server). They are then compiled into actual Linq queries and executed against the objects to create indexes on the relevant parts of your documents.<br>
<br>
You can't use all the code you'd like to inside those linq queries, I've already ran into problems trying to nest lambda expressions inside of them because of the way they're built on the server (There is a load of expression parsing going on, as well as code generation against the queries).<br>
<br>
Creating all those indexes up front feels a lot like writing stored procedures against a traditional RDBMS, only with the benefit that all the hard work will be done on write, and reading will be cheap. I don't actually mind being up front about it, but it has meant I've had to write a few scripts to "initialize" the RavenDB on creation (for integration testing as well as deployment).<br>
<br>
I'm actually using RavenDB as my primary data store in my test project, but I probably wouldn't if I was building a big application, NoSQL doesn't mean not using SQL, it means not only using SQL and there are still a few things that I'd prefer to have stuck behind NHibernate and in a traditional database.<br>
<br>
I really like that I can just host RavenDB inside my project without running any external server, and changing my code so that RavenDB runs on a proper external server is a trivial task. So nifty.<br>
<br>
My first blog post on the subject will probably deal with the process of creating a first project against RavenDB along with some of the current gotchas that will probably cease to be as the project becomes more mature. I'll then move onto some more complex map/reduce scenarios and talk a bit about how I'm exposing the data store to my application.
	]]></description><link>http://codeofrob.com/entries/playing-with-ravendb---a-precursor.html</link><guid isPermaLink="true">http://codeofrob.com/entries/playing-with-ravendb---a-precursor.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sat, 08 May 2010 08:31:00 GMT</pubDate></item><item><title><![CDATA[A gotcha for those Fluent interfaces]]></title><description><![CDATA[
		<p><font face="Arial">Here is an interesting one that I posted up on Pastebin a few days ago, but has come as a surprise to anybody I've pointed it out to.</font></p>
<p><font face="Arial">When building strongly typed fluent interfaces for any purpose, it has become increasingly common to abuse expressions in order to retrieve members with a utility like so:</font></p>
<pre class="brush: csharp;" title="code">myFunkyInterface.GetProperty(x=&gt;x.SomeProperty);</pre>
<p><font face="Arial">This can then be used in place of magic strings and name changes can then be caught by compile time errors instead of test-time exceptions.</font></p>
<p><font face="Arial">The lambda based GetProperty method will typically look something like this:</font></p>
<pre class="brush: csharp;" title="code">MemberInfo GetProperty&lt;Tpoco, TReturn&gt;(Expression&lt;Func&lt;TPoco, TReturn&gt;&gt; expression)
{
         MemberExpression memberExpression = (MemberExpression)expression.Body;
         return memberExpression.Member;
}</pre>
<p><font face="Arial">The expression passed in is a member expression, and we can therefore retrieve the member from that member expression and use it as is.</font></p>
<p><font face="Arial">This is a replacement of the traditional non-lambda method which would look something like this:</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">MemberInfo member = typeof(SomeClass).GetProperty("SomeProperty");
</pre>
<p><font face="Arial">Consider the following class structure:</font></p>
<pre class="brush: csharp;" title="code">public class SomeBaseClass
{
      public  virtual string SomeProperty { get;set; }
}

public class SomeClass : SomeBaseClass
{
      public override string SomeProperty { get; set;} 
}
&nbsp; </pre>
<font face="Arial">Calling:</font><font face="Arial">
<pre class="brush: csharp;" title="code">MemberInfo genericMember = ReflectionHelper.GetMember&lt;SomeClass&gt;(x=&gt;x.SomeProperty);
MemberInfo traditionalMember = typeof(SomeClass).GetProperty("SomeProperty");</pre>
</font>
<p><font face="Arial">Will result in two completely different objects.</font></p>
<p><font face="Arial">Checking the DeclaringType property on the returned members yields in an answer:<br>
</font></p>
<ul>
    <li><font face="Arial"><font face="Arial"><strong>genericMember.DeclaringType</strong>:&nbsp; SomeBaseClass</font></font> </li>
    <li><font face="Arial"><font face="Arial"><strong>traditionalMember.DeclaringType:</strong> SomeClass</font></font> </li>
</ul>
<font face="Arial">
<p><font face="Arial">Seems like a small thing, but as any framework developer will tell you, when writing any set of generic interfaces, you always need a set of non-generic interfaces for dynamic invocation of your framework.</font></p>
<p><font face="Arial">It's helpful if they do the same thing.</font></p>
<font face="Arial">
<p><br>
The solution of course, is to make the generic method use the non-generic method under the hood and although you already have the member, not use it directly.</p>
<pre class="brush: csharp;" title="code">MemberInfo GetProperty&lt;TPoco, TReturn&gt;(Expression&lt;Func&lt;TPoco, TReturn&gt;&gt; expression)
{
         MemberExpression memberExpression = (MemberExpression)expression.Body;
        return typeof(Tpoco).GetProperty(memberExpression.Member.Name);
}
</pre>
<p><font face="Arial"><font face="Arial"><font face="Arial">I assumed that the output of these two alternate methods would be the same, but it turns out that this assumption was going to introduce a bug into my project that was quite hard to track down!</font></font></font></p>
<p><font face="Arial">Of course, if I'd written the code as I do now, I'd have written all the non-generic interfaces first, and then written the generic interfaces on top of that with their implementations just calling the non-generic&nbsp; interfaces and therefore not ran into the problem because they'd both be using the same underlying code.</font></p>
<p><font face="Arial">Still, good to know I guess,&nbsp; thankfully my tests caught this one before I released any code that would have caused problems.<br>
</font></p>
</font></font></font>
	]]></description><link>http://codeofrob.com/entries/a-gotcha-for-those-fluent-interfaces.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-gotcha-for-those-fluent-interfaces.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 23 Apr 2010 10:27:00 GMT</pubDate></item><item><title><![CDATA[AutoPoco 0.4 released - features features features]]></title><description><![CDATA[
		<p>What's that? I skipped a number?&nbsp;Actually I didn't, but 0.3 wasn't particularly major so&nbsp;making a blog entry seemed a bit redundant :)</p>
<p>What have I added? Glad you asked:</p>
<p><strong>Method Invocation</strong></p>
<p>During configuration, you can now set up data sources for parameters of methods,&nbsp;just pass in&nbsp;raw values or&nbsp;just call a method with no&nbsp;arguments.</p>
<p>It's all been done in a strongly-typed manner to fit in with the rest of AutoPoco.</p>
<pre class="brush: csharp;" title="code">                x.Include&lt;SimpleMethodClass&gt;()
                    .Invoke(c =&gt; c.SetSomething(
                        Use.Source&lt;String, RandomStringSource&gt;(5, 10),
                        Use.Source&lt;String, LastNameSource&gt;()))
                    .Invoke(c =&gt; c.DoSomething());</pre>
<p>Obviously this needs a brother to&nbsp;override this configuration at the&nbsp;time of&nbsp;object creation, and that looks something like this:</p>
<pre class="brush: csharp;" title="code">            IList&lt;SimpleMethodClass&gt; items = mSession.List&lt;SimpleMethodClass&gt;(100)
                    .Invoke(x =&gt; x.SetSomething("Something"))   
                .Get();</pre>
<p>And this will call SetSomething on all the created objects with the argument "Something" - this set of functionality is for those who don't have accessible setters on public properties but still wish to invoke them. The alternative was to start proxying around the objects and demanding that properties be virtual - but unless somebody says otherwise, I think that's a bit heavyweight for this sort of library.</p>
<p><strong>Improved Convention Support</strong></p>
<p>Conventions have been baked into AutoPoco from the start, but weren't fleshed out until this iteration, they can be used to match types of property/field, or match the names of properties/fields (or both) and apply rules to them without any knowledge of the specific type being configured.</p>
<p>This is useful for those with multiple projections of their domain, which follow naming conventions throughout the project.</p>
<pre class="brush: csharp;" title="code">    public class EmailAddressPropertyConvention : ITypePropertyConvention
    {
        public void Apply(ITypePropertyConventionContext context)
        {
            context.SetSource&lt;EmailAddressSource&gt;();
        }

        public void SpecifyRequirements(ITypeMemberConventionRequirements requirements)
        {
            requirements.Name(x =&gt; String.Compare(x, "EmailAddress", true) == 0);
            requirements.Type(x =&gt; x == typeof(String));
        }
    }</pre>
<p>This convention will match any property of type string called EmailAddress and apply the EmailAddressSource to it.</p>
<p><strong>Inheritance</strong></p>
<p>This was more complicated to deal with, and I expect to be writing a couple of quick blog entries detailing some of the gotchas encountered when writing the code for this, as googling didn't really provide the answers I was looking for (My first port of call for all problems)</p>
<p>The gist of it, is that if you have an interface with a property, and you define a rule for that property, then any class that implements that property will also inherit that rule (the same goes for base classes and their properties).</p>
<p>If a rule is defined for that specific derived class, then it will override the rule provided by the interface or base class. The only thing I haven't expliclty included in this is open generics, because they're a bit more tricky to come up with an elegant solution for.</p>
<p>Consider the following class structure:</p>
<pre class="brush: csharp;" title="code">    public interface ISimpleInterface
    {
        string InterfaceValue
        {
            get;
            set;
        }

        string OtherInterfaceValue
        {
            get;
            set;
        }
    }

    public class SimpleBaseClass : ISimpleInterface
    {
        public string BaseProperty
        {
            get;
            set;
        }

        public virtual string BaseVirtualProperty
        {
            get;
            set;
        }
    
        public string InterfaceValue
        {
	      set;
          get;
        }
        
        public string OtherInterfaceValue
        {
            get;
            set;
        }
    }

    public class SimpleDerivedClass : SimpleBaseClass, ISimpleInterface
    {
        public string Name
        {
            get;
            set;
        }

        public override string BaseVirtualProperty
        {
            get;
            set;
        }
    }</pre>
<p>With the following configuration</p>
<pre class="brush: csharp;" title="code">                x.Include&lt;ISimpleInterface&gt;()
                    .Setup(c =&gt; c.InterfaceValue).Value("InterfaceValue - ISimpleInterface")
                    .Setup(c=&gt;c.OtherInterfaceValue).Value("OtherInterfaceValue - ISimpleInterface");
                 x.Include&lt;SimpleBaseClass&gt;()
                    .Setup(c =&gt; c.BaseProperty).Value("BaseProperty - SimpleBaseClass")
                    .Setup(c =&gt; c.BaseVirtualProperty).Value("BaseVirtualProperty - SimpleBaseClass");
                x.Include&lt;SimpleDerivedClass&gt;()
                    .Setup(c =&gt; c.Name).Value("OtherTest")
                    .Setup(c =&gt; c.BaseVirtualProperty).Value("BaseVirtualProperty - SimpleDerivedClass")
                    .Setup(c =&gt; c.OtherInterfaceValue).Value("OtherInterfaceValue - SimpleDerivedClass");</pre>
<p class="brush: csharp;" title="code">Requesting a SimpleBaseClass, we get</p>
<ul>
    <li>
    <div class="brush: csharp;" title="code">BaseProperty: "BaseProperty - SimpleBaseClass"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">BaseVirtualProperty: "BaseVirtualProperty - SimpleBaseClass"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">InterfaceValue: "InterfaceValue - ISimpleInterface"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">OtherInterfaceValue: &nbsp;"OtherInterfaceValue - ISimpleInterface"</div>
    </li>
</ul>
<p class="brush: csharp;" title="code">Requesting a SimpleDerivedClass, we get</p>
<ul>
    <li>
    <div class="brush: csharp;" title="code">BaseProperty: "BaseProperty - SimpleBaseClass"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">BaseVirtualProperty: "BaseVirtualProperty - SimpleDerivedClass"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">InterfaceValue: "InterfaceValue - ISimpleInterface"</div>
    </li>
    <li>
    <div class="brush: csharp;" title="code">OtherInterfaceValue: "OtherInterfaceValue - SimpleDerivedClass"</div>
    </li>
</ul>
<p class="brush: csharp;" title="code">It looks a bit complicated up front, but it makes sense if you think about it and that's what matters (the functionality is there if you need it, if you don't need it then you don't need to worry about it).</p>
<p class="brush: csharp;" title="code"><strong>More data sources</strong></p>
<p class="brush: csharp;" title="code">I was expecting to have to do these myself, along with a load of standard property/field conventions - but I had an e-mail from <span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span"><a href="http://www.codeplex.com/site/users/view/Birdchest">Khalid Abuhakme</a>&nbsp;letting me know he'd created a fork with some standard data sources in them.</span></span></p>
<p class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">I have pulled them through and now our list of data sources looks something like this:</span></span></p>
<ul>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">ColorSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">CountrySource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">CreditCardSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">DataOfBirthSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">EmailAddressSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">EnumerableSource&lt;T&gt; where T : IDataSource (Really cool addition Khalid!)</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">FirstNameSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">LastNameSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">LorumIpsumSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">RandomStringSource</span></span></div>
    </li>
    <li>
    <div class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">UsStatesSource</span></span></div>
    </li>
</ul>
<p class="brush: csharp;" title="code"><span style="WIDOWS: 2; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; BORDER-COLLAPSE: separate; FONT: medium 'Times New Roman'; WHITE-SPACE: normal; ORPHANS: 2; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-border-horizontal-spacing: 0px; -webkit-border-vertical-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" class="Apple-style-span"><span style="BORDER-COLLAPSE: collapse; FONT-FAMILY: arial, sans-serif; FONT-SIZE: 13px;" class="Apple-style-span">We'll end up with a lot more of these for sure, and still need a more customisable aspect to some of the default ones, but if anybody else wants to contribute then feel free, as adding conventions and data sources is what will make AutoPoco really useful.</span></span></p>
	]]></description><link>http://codeofrob.com/entries/autopoco-0.4-released---features-features-features.html</link><guid isPermaLink="true">http://codeofrob.com/entries/autopoco-0.4-released---features-features-features.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 15 Apr 2010 07:19:00 GMT</pubDate></item><item><title><![CDATA[Why diversity and choice are good things]]></title><description><![CDATA[
		<p>I noticed a bit of traffic coming from somewhere I didn't recognise, so I went over to check it out...</p>
<p>It was just ranty link bait so I won't bother linking it<a href="http://thesoftwaresimpleton.blogspot.com/2010/04/invention-is-not-invented-here.html">,</a> but it reminded me of a stance I took a few years ago while I was still just using the MS provided frameworks and software&nbsp;like a good little drone...</p>
<p>Starting with the obvious - "<font face="Arial"><strong>We already have NBuilder and AutoFixture so what on earth do we need another one of these for?</strong>&nbsp;"</font></p>
<p>When I set out to write AutoPoco, the fact that there were existing projects wasn't even a consideration for me, I wanted a weekend project which combined convention with configuration and exposed&nbsp;a tidy fluent interface in a manner in which I'd like to use it.</p>
<p>Open sourcing it just made sense because there is no point in keeping things locked away where other&nbsp;people can't see or learn from them (or even give feedback so<strong> </strong><em>I</em> can carry on learning...)</p>
<p>That aside, it turned out that my desire for convention over configuration, and my overwhelming desire to keep configuration to a minimum whilst generating <strong>meaningful</strong> test data was a radically different approach (imo) to those existing projects, so I've decided to carry on pushing down that route to see where it takes me.</p>
<p><strong>Could&nbsp;you not have just forked an existing project?</strong></p>
<p>Sure, but then I'd have had even more work to do because the existing projects would have been hard to shoe-horn the convention/configuration aspects into without either wrapping the entire system or re-writing entire aspects of it.</p>
<p>Approaching a problem in your own way can often lead to alternative solutions and in building alternative solutions and open sourcing them, I see can see no ill effects, only positive ones whereby we all win because we're putting more ideas into the mix.</p>
<p><strong>But why do what has been done before?</strong></p>
<p>Seriously? This is the kind of mindset that can really irk me&nbsp;at times - without re-takes on existing ideas we wouldn't have any competition, we'd lose a lot of <strong>growth</strong> in the open source (and closed source)&nbsp;arenas and I dare say we'd all just be working on the frameworks that Microsoft give us because they solve all&nbsp;the problems - right?... right?</p>
<ul>
    <li>Why write StructureMap if we already have Castle/Unity/etc? (I don't actually know which came first hah) </li>
    <li>Why do a clone of Hibernate when we already have Entity Framework/Linq2Sql etc? </li>
    <li>Why create OpenRasta when we have WCF and MS MVC? </li>
<li>Why create StackOverflow when Experts Exchange already exists? [stretching it a bit here]</li>
    <li>Etc? </li>
</ul>
<p>Because they solve the problems in different ways, because some people don't like the way the existing frameworks work and want something that suits their workflow better, because learning from other people's mistakes means we don't have to carry around the legacy baggage that backwards compatability on&nbsp;some mature software&nbsp;projects can&nbsp;force on us.</p>
<p><strong>Couldn't you have found another problem to solve?</strong></p>
<p>I find this&nbsp;question to be confusing -&nbsp;I spend my working hours and most of my spare time leading the development of a product that is pretty much guaranteed be used by some fairly large PLCs once it has been released, I solve new problems every day and the joy of sitting down with a codebase like AutoPoco is I get to play around with no commercial&nbsp;pressure or&nbsp;expecations&nbsp;and put into practise the things I have learned whilst making something that I consider to be quite <em>pretty</em>.</p>
<p>The enjoyment of such a thing is in writing it and thinking about it - in crafting something I want to use, not in releasing it and not in getting other people to use it (Why I would I even try?) - but to be able to put a small piece of code out and to foster discussion on the pros and cons of the&nbsp;different approaches I have used or could be used with an active and growing community.</p>
<p>One of the most enjoyable things I ever do&nbsp;in our product&nbsp;is to&nbsp;replace home-grown code with other people's open source efforts so I'm hardly guilty of the crime of <em>doing everything myself - </em>and we may well end up using one of the existing object generation frameworks rather than AutoPoco if they do more of what we want (unlikely).</p>
<p><strong>Basically...</strong></p>
<p>If you don't like it, then don't use it, and if nobody likes it and nobody uses it then it was still fun to write and nobody lost anything through the actions of a whimsical software developer.</p>
<p>But... If you do like it, and you do use it, or if other people use it or if other people learn from it, or get ideas from it, or use it as the inspiration for their own take on the problem space then collectively we've all gained something because somebody somewhere is going to be learning something.</p>
<p>And that is what OSS is about, it's not about getting free software, it's about having the choice to use what you want, and to find out how other people have gone about solving problems and to learn from where other people have tread before.</p>
<p>Me? I'm enjoying the development of AutoPoco and think there is enough of a difference between it and existing frameworks to justify to myself&nbsp;in the continued development of it. I want my conventions, and I want my automatic set up, and I want to be able to generate a craptastic amount of realistic test data for my systems as well as using it for the day to day unit tests I litter about the place.</p>
<p>And that's good enough for me.</p>
	]]></description><link>http://codeofrob.com/entries/why-diversity-and-choice-are-good-things.html</link><guid isPermaLink="true">http://codeofrob.com/entries/why-diversity-and-choice-are-good-things.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 09 Apr 2010 19:37:00 GMT</pubDate></item><item><title><![CDATA[AutoPoco v0.2 Released]]></title><description><![CDATA[
		<p>I've added some features to <a href="http://autopoco.codeplex.com">AutoPoco</a> to make it actually functional</p>
<p>Configuration can now be done automatically:</p>
<pre class="brush: csharp;" title="code">IGenerationSessionFactory factory = AutoPocoContainer.Configure(x =&gt;
{
    x.Conventions(c =&gt;
    {
        c.UseDefaultConventions();
    });
    x.AddFromAssemblyContainingType&lt;SimpleUser&gt;();
});</pre>
<p>As to start with, meaningful data isn't always required - just non-nulls and sensible defaults.</p>
<p>Collections can now be created with controlled content, for example:</p>
<pre class="brush: csharp;" title="code">            mSession.List&lt;SimpleUser&gt;()
                .Random(5)
                    .Impose(x =&gt; x.FirstName, "Bob")
                .Next(5)
                    .Impose(x =&gt; x.FirstName, "Alice")
                .All()
                .First(5)
                    .Impose(x =&gt; x.LastName, "Blue")
                .Next(5)
                    .Impose(x =&gt; x.FirstName, "Red")
                .All()
                .Get();</pre>
<p>Will create a table of data looking something like:</p>
<table>
    <tbody>
        <tr>
            <th># </th>
            <th>First Name </th>
            <th>Last Name </th>
        </tr>
        <tr>
            <td>0 </td>
            <td>Bob </td>
            <td>Blue </td>
        </tr>
        <tr>
            <td>1 </td>
            <td>Alice</td>
            <td>Blue </td>
        </tr>
        <tr>
            <td>2 </td>
            <td>Alice</td>
            <td>Blue </td>
        </tr>
        <tr>
            <td>3 </td>
            <td>Bob </td>
            <td>Blue </td>
        </tr>
        <tr>
            <td>4 </td>
            <td>Bob </td>
            <td>Blue </td>
        </tr>
        <tr>
            <td>5 </td>
            <td>Alice </td>
            <td>Red </td>
        </tr>
        <tr>
            <td>6 </td>
            <td>Bob</td>
            <td>Red </td>
        </tr>
        <tr>
            <td>7 </td>
            <td>Alice </td>
            <td>Red </td>
        </tr>
        <tr>
            <td>8 </td>
            <td>Bob</td>
            <td>Red </td>
        </tr>
        <tr>
            <td>9 </td>
            <td>Alice </td>
            <td>Red </td>
        </tr>
    </tbody>
</table>
<p>Obviously these simple examples are only the beginning, I've also written some documentation for the existing features + new features over at the codeplex site:</p>
<ul>
    <li><a href="http://autopoco.codeplex.com/wikipage?title=GettingStarted">Getting Started</a> </li>
    <li><a href="http://autopoco.codeplex.com/wikipage?title=Configuration&amp;referringTitle=Documentation">Configuration</a> </li>
    <li><a href="http://autopoco.codeplex.com/wikipage?title=DataSources">Data sources</a> </li>
    <li><a href="http://autopoco.codeplex.com/wikipage?title=Generation">Object Generation</a> </li>
</ul>
<p>I'll be using AutoPoco to generate a ridiculous amount of test data for one of our systems in the coming weeks, so I'll no doubt discover any shortcomings and rectify them, in the mean-time feel free to ask for things in the <a href="http://autopoco.codeplex.com/Thread/List.aspx">discussons</a> forum at the Codeplex site (or in the comments here)</p>
	]]></description><link>http://codeofrob.com/entries/autopoco-v0.2-released.html</link><guid isPermaLink="true">http://codeofrob.com/entries/autopoco-v0.2-released.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 07 Apr 2010 23:48:00 GMT</pubDate></item><item><title><![CDATA[AutoPoco v0.1 Released]]></title><description><![CDATA[
		<p><font face="Arial">** Update: <a href="http://blog.codeofrob.com/archive/2010/04/08/autopoco-0.2-released.aspx">Version 0.2 Now Released</a>**</font></p>
<p><font face="Arial">The product of one weekend and a bank holiday's code, I wanted to simplify the way we were generating test data for our tests, and writing a class called &lt;ObjectName&gt;Builder with lots of permutations for overriding various properties for every single object I wanted to generate was getting tedious.</font></p>
<p><font face="Arial">I also wanted to have a go at writing something that exposed a fluent interface that could be extended using extension methods, and combined convention with configuration to do its job in an easily configurable fashion.</font></p>
<p><font face="Arial">Combining these two into a project was a fun thing to do, whether the project is of any use to anybody else is irrelevant, but you don't know unless you push these things out...</font></p>
<p><font face="Arial"><a href="http://autopoco.codeplex.com">http://autopoco.codeplex.com</a> </font></p>
<p><font face="Arial">Using it should be self explanatory, but here is a quick overview of what AutoPoco attempts to achieve.</font></p>
<p><font face="Arial"><strong>Configuring a factory</strong><br>
A factory can be created once and then re-used by tests (if you so wish), a factory is just a configured instance of AutoPoco and has therefore performed some of the more expensive reflection operations ahead of use.</font></p>
<p><font face="Arial">Using the default conventions, any recognised properties on an object will automatically be populated with an instance of that property type, and this will obviously recurse down the object graph.</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">var factory = AutoPocoContainer.Configure(x =&gt;
            {
                x.Conventions(c =&gt;
                {
                    // Map all public properties + fields
                    // Ensure  we don't end up with nulls
                    c.UseDefaultConventions();
                });

                // Include the simple user type
                x.Include&lt;SimpleUser&gt;()
                    // Expicitly set data sources for its properties
                    .Setup(c =&gt; c.EmailAddress).Use&lt;EmailAddressSource&gt;()
                    .Setup(c =&gt; c.FirstName).Use&lt;FirstNameSource&gt;()
                    .Setup(c =&gt; c.LastName).Use&lt;LastNameSource&gt;();

                // Include the user role type (used by User.Role)
                // Set the name as a string with a length between 5 and 10
                // Note: Random is an extension method and only gets provided if the property/field is a string
                x.Include&lt;SimpleUserRole&gt;()
                    .Setup(c =&gt; c.Name).Random(5, 10);

                // Include these types, but use the default conventions to auto-set properties/fields
                x.Include&lt;SimpleFieldClass&gt;();
                x.Include&lt;SimplePropertyClass&gt;();
                x.Include&lt;DefaultPropertyClass&gt;();
                x.Include&lt;DefaultFieldClass&gt;();
            });</pre>
</font>
<p><font face="Arial"><strong>Creating a session</strong><br>
A session should be created once per test (or more), and will use data sources scoped to that session to populate requested objects. An example of this would be a source configured to create unique ids for "database" objects - each id would be unique across that session, but creating another session would mean that session had its own data source back at the original state. <br>
Don't worry, you don't need to understand this, it's just there for those that want it.</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">var session = factory.CreateSession();</pre>
</font>
<p><font face="Arial"><strong>Creating Objects</strong><br>
This is the important bit - any number of objects should capable of being be created from the session, with the ability to easily override any of the properties on those objects</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">            // Get a single default user
            // User.Role will be set automatically by AutoPoco
            // User.EmailAddress will be a valid e-mail address
            SimpleUser singleDefaultUser = mSession.With&lt;SimpleUser&gt;().Get();
            
            // Get 100 users
            // They all have different e-mail address
            // They all have different first names
            // They all have different last names
            SimpleUser[] users = mSession.With&lt;SimpleUser&gt;().Get(100);
            
            // Create a role
            SimpleUserRole sharedRole = mSession.With&lt;SimpleUserRole&gt;().Get();
            
            // Impose that role on 100 users
            // Those 100 users still have different e-mail addresses etc etc
            SimpleUser[] usersSharingRole = mSession.With&lt;SimpleUser&gt;()
                .Impose(x =&gt; x.Role, sharedRole)
                .Get(100);</pre>
</font>
<p><font face="Arial">I think this is quite neat and tidy,&nbsp; although there are lots of features missing (ability to populate collections, a convention to deal with enums, a convention to deal with inheritance - and lots of extension methods to allow the easy manual configuration of all of those things.</font></p>
<p><font face="Arial">I'll add them as I need them or as they are requested. This is my framework for my use, but you're all welcome to use and contribute to it too.<br>
</font></p>
	]]></description><link>http://codeofrob.com/entries/autopoco-v0.1-released.html</link><guid isPermaLink="true">http://codeofrob.com/entries/autopoco-v0.1-released.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 06 Apr 2010 06:54:00 GMT</pubDate></item><item><title><![CDATA[Multi-tenancy in ASP.NET MVC - Controller Actions (Part II)]]></title><description><![CDATA[
		<p><font face="Arial"><strong>(Or a post-mortem examination of what MvcEx taught me about MVC frameworks)</strong></font></p>
<p><strong>Previous entries in the series</strong></p>
<ul>
    <li><a href="http://codeofrob.com/archive/2010/02/01/multi-tenancy-in-asp.net-mvc-why-do-we-want-to.aspx">Why we want it</a> </li>
    <li><a href="http://codeofrob.com/archive/2010/02/04/multi-tenancy-in-asp.net-mvc-breaking-it-down.aspx">Breaking it down + Themes</a> </li>
    <li><a href="http://codeofrob.com/archive/2010/02/08/multi-tenancy-in-asp.net-mvc-views.aspx">Views</a> </li>
    <li><a href="http://codeofrob.com/archive/2010/02/14/multi-tenancy-in-asp.net-mvc-controller-actions-part-i.aspx">Controller Actions (Part I)</a> </li>
</ul>
<p><font face="Arial">A long time overdue (our multi-tenant product is nearly ready for release woohoo!) - I'm going to write a bit more about compositing controllers from "action containers" - which is how my reference multi-tenancy framework (MvcEx) currently does things. I want to explain my motivation for attempting that solution and to give a few opinions on the suitability of MS MVC for the task of building multi-tenant applications in this way.</font></p>
<p><font face="Arial">As outlined in the previous entry about controller actions, when building a multi-tenant and internally extensible application it is convenient that modules be able to contribute actions (or more importantly, override existing actions) to supplement the views exposed by those modules.</font></p>
<p><font face="Arial">The solution in the previous entry was to select the appropriate controller based on the context of the current request, but I was curious as to whether a neater solution could be created within our chosen framework to separate our concerns into application concerns and module concerns:</font></p>
<ul>
    <li><font face="Arial">Give control of the application to the application itself (OnActionExecuting etc)</font> </li>
    <li><font face="Arial">Give&nbsp;production of the actions to the action containers held in the modules</font> </li>
</ul>
<p><font face="Arial">If I was building an MVC framework from scratch, I wouldn't have built a framework that forced you to inherit from a base class (Controller), with all the baggage and responsibility in one place like that, but it works for a lot of people and a lot of applications so I can't really complain too much...</font></p>
<p><font face="Arial">Anyway, we are using MS MVC and are therefore have to live with these design decisions and can work around them as best we can to achieve what we want(as we have been doing so for the past few entries in this series)</font></p>
<p><font face="Arial">The application needs to be able to intercept each action, to perform custom logic on models which are being received/sent to the client, to handle controller-specific errors etc.</font></p>
<p><font face="Arial">The modules simply need to be able to provide actions, and ideally should be bound to the behaviour of the entire application so you don't get unexpected happenings down the line when you've written your 20th module and wonder why it's not working quite right. (Forgot to inherit from the right base class etc etc...)</font></p>
<p><font face="Arial">It turns out that none of this is particularly easy, and the MvcEx solution was to create a framework which scans for classes labelled as being action containers (something with an attribute of MvcExActionContainer("Name")), gather together its methods and create a controller which derived from an application provided Controller with all the relevant actions created on it.</font></p>
<p><font face="Arial">This required a lot of Reflection.Emit (Fun!), but the other problems encountered were:</font></p>
<ul>
    <li><font face="Arial">A lot of the methods on Controller are actually useful, and I ended up having to use T4 to generate a wrapper around some sort of (optional) ActionContainer base class to call into these.</font> </li>
    <li><font face="Arial">If you're trying to maintain code that can easily be ported from a default MS MVC application then you need to copy all the attributes across from an action method to the generated controller</font> </li>
    <li><font face="Arial">Even if you don't use the attributes and find a different way of expressing action modifiers, they still need writing out to the generated controller because that is how MS MVC works.</font> </li>
</ul>
<p><font face="Arial">Even if we used MEF to do the work of compositing the controllers, we would still have the problem that we were trying to impose a manner of working to the MS MVC framework that the MS MVC framework is not really geared up to do! (in my opinion).</font></p>
<p><font face="Arial"><strong>Summary</strong></font></p>
<p><font face="Arial">In summary, the way MvcEx does things was a bad decision, and I'll probably change it for the method the previous blog entry uses in the near future (Simply choosing the controller we want to use).</font></p>
<p><font face="Arial">Although it's not ideal in so far as it doesn't solve the problems we have with the design of MS MVC,&nbsp; if we go down the route of trying to hide our flawed framework with a load of abstractions (MVC Turbine etc), we end up in a situation where we might have been better off writing our own MVC framework or using something else more suited to the kind of applications we want to build.&nbsp;(<a href="http://fubumvc.com">Fubu MVC</a>, <a href="http://trac.caffeine-it.com/openrasta">Open Rasta</a>, etc)</font></p>
<p>It is of course probably worth contributing to that particular discussion at the <a href="http://aspnet.uservoice.com/forums/41199-general/suggestions/487031-multi-tenancy-in-asp-net-mvc?ref=title">asp.net uservoice thread</a>, as our best hope is that the MS MVC guys take note of the multi-tenancy discussion and give some love to the framework in that area.</p>
<p><font face="Arial"><strong>Coming up...</strong></font></p>
<p><font face="Arial">With the blogging started up once more, I'll be continuing this series by delving into a few questions I've had on the subject of multi-tenancy regarding configuration, deployment, internalisation and a few other hurdles we've had to cross whilst building our multi-tenant software on top of MS MVC.</font></p>
<p><font face="Arial"></font></p>
<p><br>
</p>
	]]></description><link>http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---controller-actions-part-ii.html</link><guid isPermaLink="true">http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---controller-actions-part-ii.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 05 Apr 2010 12:46:00 GMT</pubDate></item><item><title><![CDATA[Multi-tenancy in ASP.NET MVC - Controller Actions (Part I)]]></title><description><![CDATA[
		<p><strong>Previous entries in the series</strong></p>
<ul>
    <li><a href="http://codeofrob.com/archive/2010/02/01/multi-tenancy-in-asp.net-mvc-why-do-we-want-to.aspx">Why we want it</a> </li>
    <li><a href="http://codeofrob.com/archive/2010/02/04/multi-tenancy-in-asp.net-mvc-breaking-it-down.aspx">Breaking it down + Themes</a> </li>
    <li><a href="http://codeofrob.com/archive/2010/02/08/multi-tenancy-in-asp.net-mvc-views.aspx">Views</a> </li>
</ul>
<p>&nbsp;<font face="Arial">In the last entry, we covered how and why we might want to replace existing views and partial views from the core application with our own from modules. We also covered that with this ability it was possible to add entirely new views and partial views.</font></p>
<p><font face="Arial">However, views need actions and actions come from controllers. If we add a new view to the application and the core application does not support that path with an action, that view cannot be loaded.</font></p>
<p><font face="Arial">It stands to reason therefore that our modules need the ability to add new controller actions (and indeed replace existing actions) at run-time on a per-request basis - again assuming we're going for full on multi-tenancy.</font></p>
<p><font face="Arial">Actions come from controllers, and by default controllers come from the main web assembly. Now obviously our modules should be as self contained as possible and therefore probably each have their own assemblies so they can be developed separately and added to the project ad-hoc.</font></p>
<p><font face="Arial">Once again, the ASP.NET MVC team have given us an extensibility point with which to override this default behaviour with the ability to implement our own controller factories.</font></p>
<p><font face="Arial"><font face="Arial"><strong>Resolving actions</strong><br>
As with the last topic, I will assume the presence of a configuration provider that can tell us which modules are loaded.<br>
For purposes of simplicity, the Module class now contains a reference to an Assembly that we'll assume was loaded in when the configuration was last scanned.<br>
</font></font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">    public class Module
    {
        public string Id
        {
            get;
            set;
        }

        public Assembly Assembly
        {
            get;
            set;
        }
    }
</pre>
<p><font face="Arial">The job of the ControllerFactory is another well documented concept; when a controller is required, the factory is invoked with the name of the controller being requested and the current request data. It is expected to return an instance of the controller (which is used for that single request), and then just like the ViewEngine is given that controller to dispose of at the end of the request.</font></p>
<p><font face="Arial">The simplest solution is clearly going to be that we look at the context we have access to and then work out which controller to return based on that context.<br>
The context in this case being the name of the controller, the action being requested and the collection of modules which are currently active for this request.</font></p>
<p><font face="Arial">Each module can therefore hold their own controllers with their own actions, and the controller factory can select which controller to return when a specific action is being invoked.</font></p>
<p><font face="Arial">I implement my controller factory from the base interface, which is System.Web.Mvc.IControllerFactory:</font>&nbsp;</p>
<pre class="brush: csharp;" title="code">    public class ModuleControllerFactory : IControllerFactory
    {
        public IController CreateController(System.Web.Routing.RequestContext requestContext, string controllerName)
        {
            throw new NotImplementedException();
        }

        public void ReleaseController(IController controller)
        {
            throw new NotImplementedException();
        }
    }
</pre>
<p>ReleaseController can just check for IDisposable and dispose if necessary, so we'll take that as read and focus on what we need to do in order to create the controller.</p>
</font><font face="Arial"><font face="Arial"><strong>
<h3><font face="Arial"><strong>The Goal</strong></font></h3>
</strong></font>
<p><font face="Arial">These are the modules exposed by the application, the controllers they provide and the actions those controllers have on them.</font></p>
<ul>
    <li><font face="Arial">CoreModule</font>
    <ul>
        <li><font face="Arial">HomeController</font> </li>
        <li><font face="Arial">ActionResult Index();</font> </li>
    </ul>
    </li>
    <li><font face="Arial">ModuleOne</font>
    <ul>
        <li><font face="Arial">HomeController</font>
        <ul>
            <li><font face="Arial">ActionResult Extra();</font> </li>
        </ul>
        </li>
    </ul>
    </li>
    <li><font face="Arial">ModuleTwo</font>
    <ul>
        <li><font face="Arial">HomeController</font>
        <ul>
            <li><font face="Arial">ActionResult Index();</font> </li>
            <li><font face="Arial">ActionResult Extra();</font> </li>
        </ul>
        </li>
        <li><font face="Arial">OtherController</font>
        <ul>
            <li><font face="Arial">ActionResult Index(); </font></li>
        </ul>
        </li>
    </ul>
    </li>
</ul>
<p>&nbsp;WIth the set-up, the following behaviour is desired:</p>
<p><font face="Arial"><strong>Core Module loaded:</strong></font></p>
<p><font face="Arial">/Home/Index requested =&gt; CoreModule Index Invoked<br>
/Home/Extra requested =&gt;&nbsp; Action Not found</font></p>
<p><font face="Arial"><strong>Core + ModuleOne Loaded</strong></font></p>
<p><font face="Arial">/Home/Index requested =&gt; CoreModule Index Invoked<br>
/Home/Extra requested =&gt;&nbsp; ModuleOne Extra Invoked</font></p>
<p><font face="Arial"><strong>Core + ModuleOne + ModuleTwo Loaded (in that order)</strong></font></p>
<p><font face="Arial">/Home/Index requested =&gt; ModuleTwo Index Invoked<br>
/Home/Extra requested =&gt; ModuleTwo Extra Invoked<br>
/Other/Index requested =&gt; ModuleTwo Index Invoked<br>
</font></p>
<font face="Arial">
<h3><font face="Arial">A Solution</font></h3>
<p>This is actually quite tricky, as the solution is going to involve not only scanning for the controllers, but scanning for methods on those controllers that match the actions being requested.</p>
<p><font face="Arial">There are a lot of rules involved already in MVC selecting the right method to call from a controller, and we don't want to go down the route of duplicating this, so this is where we set a convention and say that if *any* action is found with the name being requested, that we'll use that controller and assume that all the necessary permutations of that action will be provided too. (A post action vs Get action for example).</font></p>
<p><font face="Arial">There are two parts to solving this problem, finding the type we want to create, and creating the controller from that type.</font></p>
<p><font face="Arial">The process will be similar to that of the ViewEngine example:</font></p>
<p><font face="Arial">1) Reverse the module list order so we have the most recently loaded first<br>
2) Scan all the types in the assembly for that module<br>
3) Find a type with the name we're looking for ( &lt;Name&gt;Controller )<br>
4) Scan the methods on that type to find the action we're looking for<br>
5) If found, return this type<br>
6) Else Continue</font></p>
<font face="Arial">
<p><font face="Arial">Obviously reflecting on all these types is a slow process, and we should cache the type once found by configuration id, controller name and action name. </font></p>
<p><font face="Arial">Here is some code which loosely achieves the above:</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">private Type FindControllerType(String controllerName, RequestContext requestContext, Configuration currentConfiguration)
        {
            // Generate the type name we're looking for
            String controllerTypeName = string.Format("{0}Controller", controllerName);

            // Get the action and therefore method name we're looking for
            String actionName = (string)requestContext.RouteData.Values["action"];

            // TODO: Check Cache here

            // Get modules in reverse order
            var searchModules = currentConfiguration
                .Modules
                .Reverse();

            foreach (var module in searchModules)
            {
                // Get all the types in the assembly
                Type[] controllerTypes = module.Assembly.GetTypes()
                    .Where(
                        t =&gt;
                            // Where the type name is the one we're looking for
                            t.Name == controllerTypeName &amp;&amp;

                            // Where it can be cast to a controller
                            typeof(IController).IsAssignableFrom(t) &amp;&amp;

                            // And there is a public instance method with the name we're looking for on that type
                            t.GetMethods(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)
                            .Where(m =&gt; m.Name == actionName).Count() &gt; 0

                        ).ToArray();

                // Skip to the next module if no types found
                if (controllerTypes.Length == 0) { continue; }

                // Else, simply return the first one found
                return controllerTypes[0];
            }

            // Fail
            return null;
        }
</pre>
<font face="Arial">
<p><br>
A very rudimentary controller factory implementation would therefore look something like this:<br>
</p>
<pre class="brush: csharp;" title="code"> public class ModuleControllerFactory : IControllerFactory
    {
        private IConfigurationProvider mConfigurationProvider;

        public ModuleControllerFactory(IConfigurationProvider configurationProvider)
        {
            mConfigurationProvider = configurationProvider;
        }

        public IController CreateController(System.Web.Routing.RequestContext requestContext, string controllerName)
        {
            Type t = FindControllerType(controllerName, requestContext, mConfigurationProvider.GetActiveConfiguration());
            return (IController)Activator.CreateInstance(t);
        }

        public void ReleaseController(IController controller)
        {
            IDisposable disposable = controller as IDisposable;
            if (disposable != null)
            {
                disposable.Dispose();
            }
        }
// Etc
</pre>
<p><font face="Arial">It is of course probably desirable to instantiate the controller using your favourite IOC container&nbsp; - so for StructureMap for example instead of using Activator.CreateInstance you would call ObjectFactory.GetInstance(t);</font></p>
<p><font face="Arial">(Actually, you'd probably inject the container as well rather than calling ObjectFactory directly but you get the gist).</font></p>
<font face="Arial"><font face="Arial">
<h3><font face="Arial">Summary</font></h3>
<p>Essentially, we can completely re-wire this part of the ASP.NET MVC framework to do what we want it to do. We can load our controllers from wherever based on whatever context we like - and this gives us a powerful mechanism for pluggability and therefore multi-tenancy.</p>
<p><font face="Arial">I did contemplate trying to achieve this through routing - custom routing constraints and handlers - but it's not a tidy solution, it generally means having different names for your controllers, or playing havok with namespaces and configuration and because a lot of that configuration is static it often involves re-compilation.</font></p>
<p><font face="Arial">Re-compilation is something to be avoided, as we ideally want to be able to add new customers by just modifying configuration.</font></p>
<p><font face="Arial">Anyway, there are a number of options and this is just one of them,&nbsp; I'll be hoping to cover a crazy solution using Reflection.Emit and hopefully delve into MEF before I'm done with this particular part of the multi-tenancy story.</font><br>
</p>
</font></font></font></font></font></font></font>
	]]></description><link>http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---controller-actions-part-i.html</link><guid isPermaLink="true">http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---controller-actions-part-i.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 14 Feb 2010 16:17:00 GMT</pubDate></item><item><title><![CDATA[DDD8 Feedback... feedback]]></title><description><![CDATA[
		<p><font face="Arial">The feedback from DDD8 has come in, in anonymous form and for the most part I'm completely overwhelmed by the positive response the talk garnered from the people who attended the talk.</font></p>
<p><font face="Arial">However, I get the feeling my talk managed to polarise the room somewhat and I'd like to respond to those that went completely the opposite way with their responses and apologise if I went a different direction to what they expected!</font></p>
<p><font face="Arial"><strong>Varied Demos</strong><br>
Okay, no defence here at all - showing you all the same website over and over again until I got around to showing the final product of the concepts( NerdDinner) was a bit unfair - I'll try to put together the demos a bit earlier than 3am the night before next time :)</font></p>
<p><font face="Arial">I think perhaps concentrating on NerdDinner from the start and showing how I built that up might have helped, but when I put the demos together I was struggling to simplify that enough for the demos to make sense in their own right (hence the hurried individual ones)</font></p>
<p><font face="Arial"><strong>Not enough Detail</strong><br>
I never intended on going into detail on the concepts outlined - I don't feel you ever can go into detail in a talk that lasts less than an hour - nevertheless, if you'd like more detail you're all more than welcome to respond to my series on multi-tenancy with questions and more feedback! </font></p>
<p><font face="Arial">I already have a longer slot booked at one user group - and would be happy to spend more time on the subject at any other user groups or developer meet-ups - just ask.</font></p>
<p><font face="Arial"><strong>Too technical</strong><br>
I should have made clear in my summary that a prior knowledge of ASP.NET MVC would be useful - and I apologise for this - a few people complained about this and I'll know next time to be more up front about what I intend on covering in a session.</font></p>
<p><font face="Arial"><strong>Too fast</strong><br>
This is probably one of the most subjective responses I had, and a lot of people said they loved the pace - which kept them awake and interested throughout the talk. I don't think I'll change this in my future talks (although I might try to talk slower), but another disclaimer may well not go amiss "This talk will be fast-paced and try to throw as much information at you in an hour as your brain can cope with" </font></p>
<p><font face="Arial"><strong>Wrong approach</strong><br>
Okay, only one person mentioned this - and said I should be using IOC to solve the issues I outlined. I'm not entirely sure (apart from the controllers) where this would have helped - so feel free to contribute to the multi-tenancy conversation in the comments of&nbsp; this blog when I get to that point whoever you are!</font></p>
<p><font face="Arial">I was also criticised by the same person for even wanting to host the same application under the same IIS instance - I believe I covered this as an option in one of my slides however and I was certainly not suggesting that I recommended keeping your customers in one basket.</font></p>
<p><font face="Arial">I think there are masses of conversations and discussions to be had over the approach I took to solving the problem - which is why I'm now doing this blog series - to get the discussion going and come to an agreed solution between us all.</font></p>
<p><font face="Arial"><strong>Poor distribution of Swag</strong><br>
Yes yes yes, I'm sorry - I'm really bad at this kind of thing because it's not something I'm interested in - I'll try to do better next time.</font></p>
<p><font face="Arial"><strong>Too nervous</strong><br>
Guilty as charged, my first time speaking in a while - I'll try to be more confident next time</font></p>
<p><font face="Arial"><strong>Too confident/arrogant</strong><br>
Towards the end perhaps you're right, I'm trying to work out whether this is better or worse than the above!</font></p>
<p><font face="Arial"><strong>Ending on a high note</strong><br>
In response to all the people who said my talk had great pace, great content, that it was incredibly useful and relevant, that the subject area had justice given to it, and that I clearly knew what I was talking about - thanks a bunch, rest assured that the above comments have balanced out the ego and I can still fit through doors.</font></p>
<p><font face="Arial">Thanks to everybody who attended and asked questions - I'll be seeing you all again shortly no doubt.<br>
</font></p>
	]]></description><link>http://codeofrob.com/entries/ddd8-feedback...-feedback.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ddd8-feedback...-feedback.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 09 Feb 2010 16:28:00 GMT</pubDate></item><item><title><![CDATA[Multi-tenancy in ASP.NET MVC - Views]]></title><description><![CDATA[
		<p><strong>Previous entries in the series</strong></p>
<ul>
    <li><a href="http://codeofrob.com/archive/2010/02/01/multi-tenancy-in-asp.net-mvc-why-do-we-want-to.aspx">Why we want it</a> </li>
    <li><a href="http://codeofrob.com/archive/2010/02/04/multi-tenancy-in-asp.net-mvc-breaking-it-down.aspx">Breaking it down + Themes</a> </li>
</ul>
<p><font face="Arial">One of the requirements of our multi-tenant application, is having the ability to replace or add new pages (or parts of pages) in the system for each of our modules.</font></p>
<p><font face="Arial">While a customer may ask for an entirely new 'area' on the site (MVC2 covers this), the chances are they just want the addition of a single page or replacement of what is already provided in the stock product.</font></p>
<p><font face="Arial">The obvious port of call for change of this kind are the views and partial views situated within the web application, and finding a way to add or override these on a per-module basis.</font></p>
<p><font face="Arial"><font face="Arial">Throughout the following entry I'll assume we have access to a configuration provider that looks something like this:</font></font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">public interface IConfigurationProvider
{
    Configuration GetActiveConfiguration();
}</pre>
<p><font face="Arial">Where Configuration has the following simplistic structure (for demo purposes)</font></p>
<pre class="brush: csharp;" title="code">    public class Configuration
    {
        public string Theme
        {
            get;
            set;
        }

        public Module[] Modules
        {
            get;
            set;
        }
    }

    public class Module
    {
        public string Id
        {
            get;
            set;
        }
    }</pre>
<p><font face="Arial">In other words, we have a way of querying for the 'currently active configuration' (remember, our active configuration is per-request because we're attempting true multi-tenancy), and our configuration consists of a single theme and a list of loaded modules.</font></p>
<p><font face="Arial">Each module has an Id and we'll use this to infer a number of things by convention. (Again, this is just a demo, and you can do this<em> however you like</em>.)</font></p>
<p><font face="Arial"><br>
<font face="Arial">I assume each module will provide a collection of views and partial views, and if a module is loaded *after* another module, and provides another view or partial view with the same name and path, it will replace the previously loaded view or partial view.<br>
</font></font>
</p><p><font face="Arial">I was asked in a comment on a previous entry what my folder structure looked like,&nbsp; and this is where the folder structure starts to become important.<br>
</font></p>
<p><img alt="Collapsed views" src="http://fear.the.codeofrob.com/mt_views/views_collapsed.png"></p>
<p><font face="Arial">Every module's views come packaged in a single directory,&nbsp; with another directory called Views inside of it.</font></p>
<p><font face="Arial">Underneath each of these Views directories, is the same folder structure you'd expect from a traditional ASP.NET MVC Website, with a directory per controller and a collection of views and partial views.</font></p>
<p><font face="Arial">This means that both Core and ModuleOne can contribute or replace views for the&nbsp; actions from the "Home" Controller.</font></p>
<p><font face="Arial">A thing of note, is that the web.config file that would ordinarily live in the Views directory in a traditional ASP.NET MVC application has been moved out into the Site directory above all the module directories - as this does things like give you Intellisense in your views (if I recall correctly) as well as actually facilitating the functionality in the ASP.NET MVC Framework.</font></p>
<p><font face="Arial">Expanded, our project looks like this:<br>
</font></p>
<p><img alt="Expanded folder selection" src="http://fear.the.codeofrob.com/mt_views/views_expanded.png"><br>
&nbsp;</p>
<p><font face="Arial">Assuming the partial view "Widget" is exposed somewhere on the Index page, the following desired scenarios present themselves:</font></p>
<p><font face="Arial"><strong>Core Module loaded:</strong></font></p>
<p><font face="Arial">/Home/Index requested =&gt; Index served from CoreModule, with Widget from CoreModule<br>
/Home/Extra requested =&gt; Page not found</font></p>
<p><font face="Arial"><strong>Core + ModuleOne Loaded (in that order)</strong></font></p>
<p><font face="Arial">/Home/Index requested =&gt; Index served from CoreModule with Widget from ModuleOne<br>
/Home/Extra requested =&gt; Extra served from ModuleOne</font></p>
<p><font face="Arial"><strong>ModuleOne + Core Loaded (in that order)</strong></font></p>
<p><font face="Arial">/Home/Index requested =&gt; Index served from CoreModule with Widget from CoreModule<br>
/Home/Extra requested =&gt; Extra served from ModuleOne</font></p>
<font face="Arial"><font face="Arial">
<h3><font face="Arial">Enter the View Engine</font></h3>
</font>
<p><font face="Arial">This is all very well and good as our requirements are quite clear, but the next step is making the above happen!</font></p>
<p><font face="Arial">ASP.NET MVC provides the facility to override the View Engine, which is the component that determines how views are rendered.</font></p>
<p><font face="Arial">This can be used to simply load views in from a different location, or even to allow completely bespoke mark-up to be transformed into HTML (Ala the <a href="http://sparkviewengine.com">Spark View Engine</a>).</font></p>
<p><font face="Arial">By default, the framework will use System.Web.Mvc.WebFormViewEngine, which is what loads the views from the View directory using the default convention and returns a ViewEngineResult containing a WebFormView which eventually ends up being used to render out the view.</font></p>
<p><font face="Arial">The WebFormViewEngine class itself is extendable, and by inheriting from it we can change the search paths it uses to locate the views and partial views.</font></p>
<p><font face="Arial">Naturally this is the first place we look to solve our problem, as writing less code is always preferable if we can get away with it.</font></p>
<p><font face="Arial">The set-up of WebFormViewEngine is that in the constructor we&nbsp; can give it a selection of search paths - which means for the life-time of WebFormViewEngine those search paths are set.</font></p>
<p><font face="Arial">They can be modified per-request, but WebFormViewEngine inherits from VirtualPathProviderViewEngine which caches paths under which it has found files (or at least, reading the source it looks like it does!).</font></p>
<p><font face="Arial">For performance purposes (per-configuration path caching), it would probably therefore be best implementing a ViewEngine from scratch, but as the main body of work is achieved through the return result of the&nbsp; view engine methods, this is not as daunting an experience as we might think.</font></p>
<p><font face="Arial">This is what IViewEngine looks like when we first create it:<br>
</font></p>
<pre class="brush: csharp;" title="code">    public class ModuleViewEngine : IViewEngine
    {
        public ViewEngineResult FindPartialView(ControllerContext controllerContext, string partialViewName, bool useCache)
        {
            throw new NotImplementedException();
        }

        public ViewEngineResult FindView(ControllerContext controllerContext, string viewName, string masterName, bool useCache)
        {
            throw new NotImplementedException();
        }

        public void ReleaseView(ControllerContext controllerContext, IView view)
        {
            throw new NotImplementedException();
        }
    }</pre>
<p><font face="Arial">First things first, ReleaseView doesn't need to do anything unless the views you return implement IDisposable, and for that the following code can be used.<br>
</font><font face="Arial"></font></p>
<pre class="brush: csharp;" title="code">        public void ReleaseView(ControllerContext controllerContext, IView view)
        {
            IDisposable disposable = view as IDisposable;
            if (disposable != null)
            {
                disposable.Dispose();
            }
        }</pre>
<p><font face="Arial">The next thing of note is that the searching logic for locating the files is the same regardless of whether the engine is looking for a view or partial view, so we can create the following method and forget about it for now:</font></p>
<pre class="brush: csharp;" title="code">        private string ResolvePath(String requestedFile, ControllerContext controllerContext)
        {
            throw new NotImplementedException();
        }</pre>
<p><font face="Arial">FindPartialView and FindView both return the same type, and with similar values - I won't go into detail because the procedure is well documented elsewhere, but my methods in this example look like this:<br>
</font><font face="Arial"></font></p>
<pre class="brush: csharp;" title="code">        public ViewEngineResult FindPartialView(ControllerContext controllerContext, string partialViewName, bool useCache)
        {
            String foundFile = ResolvePath(string.Format("{0}.ascx", partialViewName), controllerContext);

            return new ViewEngineResult(
                new WebFormView(foundFile),
                this
            );       
        }

        public ViewEngineResult FindView(ControllerContext controllerContext, string viewName, string masterName, bool useCache)
        {
            String foundFile = ResolvePath(string.Format("{0}.aspx", viewName), controllerContext);

            return new ViewEngineResult(
                 new WebFormView(
                     foundFile,
                     masterName),
                 this);
        }</pre>
<p class="brush: csharp;" title="code">&nbsp;</p>
<p><font face="Arial"><strong>Note:</strong> This example will not deal with absolute paths being specified, it will also not deal gracefully with the file not being found at all - this simply involves returning a list of the searched locations on failure and isn't worth discussing further here.</font></p>
<p><font face="Arial">ResolvePath is entirely dependent on the logic you want to follow when searching for your per configuration module provided views, but a reference implementation might look like the following:</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">        private string ResolvePath(String requestedFile, ControllerContext controllerContext)
        {
            String result = string.Empty;

            // Reverse the module order so we search from most recently ordered first
            var searchModules = mConfigurationProvider
                .GetActiveConfiguration()
                .Modules
                .Reverse()
                .Select(m =&gt; m.Id);

            // Search through each module in turn
            foreach (String module in searchModules)
            {
                // Try the controller specific view folder first
                String controllerName = controllerContext.RouteData.Values["controller"] as string;
                result = GetFilename(requestedFile, controllerContext, module, controllerName);
                if (string.IsNullOrEmpty(result))
                {
                    result = GetFilename(requestedFile, controllerContext, module, "Shared");
                }
                if (!String.IsNullOrEmpty(result)) { return result; }
            }

            // Error!
            return null;
        }

        private string GetFilename(String requestedFile, ControllerContext controllerContext, String module, String controllerName)
        {
            String path = string.Format("~/Views/{0}/{1}/{2}/", module, controllerName, requestedFile);
            String filename = controllerContext.HttpContext.Server.MapPath(path);
            if (File.Exists(filename)) { return path; }
            return null;
        }</pre>
<p><font face="Arial">Where mConfurationProvider is the IConfigurationProvider mentioned earlier.</font></p>
<p><font face="Arial">In this implementation, we reverse the order of the loaded modules to get the most recently loaded first, and then select just the module id.</font></p>
<p><font face="Arial">That gives us a list of folders names to search through in order to find the view, first attempting to find the file within the folder for the current action, and then the shared directory (just like the default WebFormViewEngine).</font></p>
<p><font face="Arial">If it's not found, we return null and cross our fingers and hope for the best.</font></p>
<p><font face="Arial">Just to re-iterate, in the real world you need to add error handling for when a view is not located, and code to deal with absolute paths (although maybe you don't support them and don't need to write that code!).</font></p>
<p><font face="Arial">Because we have the current configuration, we can perform the caching of file locations on a per-configuration basis - just remember to disable caching during testing and debugging!<br>
</font><font face="Arial"></font></p>
<font face="Arial">
<h3><font face="Arial">Summary</font></h3>
</font><font face="Arial">
<p><font face="Arial">I haven't gone into a lot of detail about the implementation of the view engine because it's beyond the scope of this blog entry - a lot of information about writing custom view engines can be found with a "Bing" (or Google search *cough*) and it was not my intention of repeating them.</font></p>
<p><font face="Arial">What we have covered is how we might utilise the power of view engines and a set of folder conventions to allow modules to create/override views and partial views. </font></p>
<p><font face="Arial">As with all of these entries, the actual implementation is up to you and your particular product needs and the code examples should not be taken as gospel.</font></p>
<p><font face="Arial">Next entry we'll be getting even more technical and covering how we can allow the modules to provide actions for these added views - and even how to override controller actions that have already been defined in other modules.<br>
</font><font face="Arial"><font face="Arial"></font></font></p>
<p><font face="Arial"><font face="Arial">Examples of this code can be found in the DDD8 code samples <a href="http://codeofrob.com/archive/2010/01/31/ddd8-post-event.aspx ">here</a>.</font></font></p>
</font></font></font>
</font>
	]]></description><link>http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---views.html</link><guid isPermaLink="true">http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---views.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 08 Feb 2010 20:19:00 GMT</pubDate></item><item><title><![CDATA[Multi-tenancy in ASP.NET MVC - DDD8 Video]]></title><description><![CDATA[
		<p>The video is now up of my talk at DDD8, I've reviewed it and determined that while it's a bit fast ("Like listening to a podcast at double speed" according to <a href="http://twitter.com/lukesmith">@lukesmith</a>) it's not too embarrassing.</p>

<p>Unfortunately the audio gets a bit out of sync towards the code, so you'll have to use your imagination until what I'm talking about shows up ;-)</p>

<object width="400" height="300"><param name="allowfullscreen" value="true"><param name="allowscriptaccess" value="always"><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=9217399&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1"><embed src="http://vimeo.com/moogaloop.swf?clip_id=9217399&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="300"></object><p><a href="http://vimeo.com/9217399">Multi-tenant ASP.NET MVC Projects (Or 30 very different customers and a single codebase) - Rob Ashton - DeveloperDeveloperDevel</a> from <a href="http://vimeo.com/user3077884">Phil Winstanley</a> on <a href="http://vimeo.com">Vimeo</a>.</p>
	]]></description><link>http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---ddd8-video.html</link><guid isPermaLink="true">http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---ddd8-video.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 05 Feb 2010 08:52:00 GMT</pubDate></item><item><title><![CDATA[Multi-tenancy in ASP.NET MVC - Breaking it down]]></title><description><![CDATA[
		<p><font face="Arial"><strong>Previous entries in the series</strong></font></p>
<ul>
    <li><a href="http://codeofrob.com/archive/2010/02/01/multi-tenancy-in-asp.net-mvc-why-do-we-want-to.aspx">Why do we want multi-tenancy</a></li>
</ul>
<p><font face="Arial">In the last entry, we covered the basics of what I consider multi-tenancy to be, and why we might perhaps want to write our ASP.NET MVC web application with multi-tenancy in mind.</font></p>
<p><font face="Arial">The "ASP.NET MVC" component&nbsp;(or front-end) of your multi-tenant application probably only covers a small fraction of your entire codebase but is also the first and often only contact your customer has with your application, so ends up being their first point of call when asking for changes to your system. </font></p>
<p><font face="Arial">It also ends up being the most awkward part of to change because that's the nature of using a framework like ASP.NET MVC which is designed primarily to be used in single-tenant scenarios.</font></p>
<p><font face="Arial">Before getting into the technical details of how I implement a multi-tenant app in this environment, it's worth covering the components of our chosen framework and establishing where to start.</font></p>
<p><font face="Arial"><strong>Disclaimer</strong>: This will not be an overly technical post,&nbsp; and I apologise to those that want me to just jump right in and start talking code.&nbsp; This will be the last introductory post in the series - promise :)</font></p>
<p><font face="Arial">Getting to the point,&nbsp; this is how I personally split up the MVC application concepts into themes and modules.</font></p>
<p>
</p><table border="1" cellspacing="1" summary="" cellpadding="1" width="400">
    <tbody>
        <tr>
            <td><strong>Themes</strong></td>
            <td><strong>Modules</strong></td>
        </tr>
        <tr>
            <td>CSS</td>
            <td>Views</td>
        </tr>
        <tr>
            <td>Theme-specific images</td>
            <td>Partial Views</td>
        </tr>
        <tr>
            <td>Theme-specific JavaScript</td>
            <td>Controller actions</td>
        </tr>
        <tr>
            <td>Master pages</td>
            <td>Module-specific JavaScript</td>
        </tr>
    </tbody>
</table>

<p><font face="Arial"><strong>JavaScript</strong></font></p>
<p><font face="Arial">Whether we like it or not, designers like to deploy JavaScript alongside their designs these days, most notably with libraries such as <a href="http://www.emblematiq.com/lab/niceforms/ ">Niceforms</a> and its associated brethren. <br>
It therefore pays to&nbsp; make the distinction between functional and theme-specific JavaScript and allow both modules and themes to provide their own collections of scripts.</font></p>
<p><font face="Arial">For shared libraries like jQuery etc, they can be made available as part of the core application, and modules and themes can take it for granted that it will be available for their use.<br>
</font></p>
<p><font face="Arial"><strong>CSS</strong></font><font face="Arial">
<p><font face="Arial">Most theming can be achieved by switching style sheets if the mark-up has been designed properly and this is an obvious candidate for theming support. Switching between style sheets is a trivial and well documented operation and can easily be achieved through the use of a HtmlHelper extension method.</font></p>
<p><font face="Arial">I'll assume I don't need to write an entry on achieving the switching between either the CSS or JavaScript, although as with anything if prompted I'll cover the subject.</font></p>
<p><font face="Arial"><strong>Master Pages</strong><br>
</font></p>
<p><font face="Arial">Sometimes the client wishes for major structural changes to the web application, and CSS changes may not be enough. For this we have master pages although because of the increased cost of having to maintain the extra mark-up&nbsp; they should probably only be used as a last resort.</font></p>
<p><font face="Arial">I wrote a blog entry about the various methods of <a href="http://codeofrob.com/archive/2009/11/01/dynamically-switching-between-master-pages-in-asp.net-mvc.aspx">switching between the master pages at runtime</a> a while ago so I won't be covering that again.</font></p>
<p><font face="Arial">For my purposes over the coming posts, I assume that the structure of the master page IS a part of theming, and that we are using sub-master pages and separate child master pages across the site for different interfaces. I therefore use the OnPreInit method mentioned in the above entry for the greatest amount of flexibility.</font></p>
<p><font face="Arial"><strong>Views + Partial Views</strong></font></p>
<font face="Arial"><font face="Arial">
<p><font face="Arial">New modules will require&nbsp; either new views or the ability to override existing views, and thus I consider views to be a functional aspect of the application.</font></p>
<p><font face="Arial">I have seen views and partial views used for theming in frameworks or products where actual functional module support was highly limited. I assume a multi-tenant system *does* have decent functional module support and thus they are part of modules and not theming.</font></p>
<p><font face="Arial">Mark-up in the views should simply be kept as theme-agnostic as possible, as themes won't be able to change it.</font></p>
<p><font face="Arial">I'll be covering this in this series, utilising&nbsp; the power of a custom view engine to find and replace views based on the currently active modules.</font></p>
<p><strong>Controller Actions</strong></p>
<p><font face="Arial">These are obviously an important part of adding functionality to the application through the use of modules.</font></p>
<p><font face="Arial">Because we have the ability to not only add new&nbsp; views, but to modify them - we also need the ability to add new actions and indeed replace existing actions (as modified views may accept modified view models!)</font></p>
<p><font face="Arial">This is probably the hardest problem to solve and there are a few ways of solving it,&nbsp; this too will be coming in this series - using custom controller factories to compose or locate controllers dynamically based on the currently active modules.<br>
</font></p>
<p><font face="Arial"><strong>In Summary</strong></font></p>
<p><font face="Arial">We have covered the components of an MVC web application and established where the boundaries lie between modules and theming support.</font></p>
<p><font face="Arial">In the next entry I'll be covering how to utilise view engines to achieve the per-module views and partial views.<br>
</font></p>
<p><br>
&nbsp;</p>
</font><font face="Arial"><br>
</font></font></font></p>
	]]></description><link>http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---breaking-it-down.html</link><guid isPermaLink="true">http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---breaking-it-down.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 04 Feb 2010 22:19:00 GMT</pubDate></item><item><title><![CDATA[Multi-tenancy in ASP.NET MVC - Why do we want it?]]></title><description><![CDATA[
		<p><font face="Arial">I'll be gratuitously "borrowing" a lot&nbsp; of material from my DDD8 slides in this post, it seemed like the right thing to do given that this series is a write-up and then continuation of that talk.</font></p>
<font face="Arial">
<p><font face="Arial">When dealing with more than one customer in the desktop market, it is customary to have a single product which is extendable through the use of plug-ins and an API, and often you can leave it up to your consumer base to write those plug-ins and add to your product in a manner they see fit.</font></p>
<p><font face="Arial">In the web world it's a bit different, and you don't typically get that kind of behaviour (Facebook applications may or may not count, depending on how you look at it).</font></p>
<p><font face="Arial"><br>
In a simple world, you'll have a single product which is used directly off the shelf by multiple customers:</font></p>
<p><img alt="Single product" src="http://fear.the.codeofrob.com/mt_why/single_product.png"></p>
<p><font face="Arial">When building web applications for a varied and paying customer base, It is likely that you have customers that are fickle and will want things done their way. </font></p>
<p><font face="Arial">It often does not make business sense to turn good business down, and the business is what pays the hungry developer and thus when you finally get a customer who wants things done differently,&nbsp; the business tells the developer to jump and the business's required response is the proverbial "how high?".</font></p>
<p><font face="Arial">Consider the above diagram then, and imagine Customer A asking for something 'just a little bit different' and think about what your options could be.</font></p>
<p><font face="Arial">We'll get the obvious dusted out of the way first:<br>
</font></p>
<p><img alt="if( featureIsEnabled....)" src="http://fear.the.codeofrob.com/mt_why/feature_code.png"></p>
<p><font face="Arial">When I switched to the above code as a slide in my multi-tenant talk, I was greeted with laughter, but we've all known products which have ended up with such delightful nuggets in them. <br>
It's blindingly obvious that it's not the right solution, and that as you progress down the route of making further modifications for either Customer A, B or C you'll end up with an un-maintainable mess of switches and flags. 'Nuff said.</font></p>
<font face="Arial">
<p><br>
</p>
<p>You could then decide that you're going to keep that customer as a new product in its own right - that would remove the need for all those on-off switches.</p>
<p><font face="Arial"><font face="Arial"><img alt="A bespoke copy" src="http://fear.the.codeofrob.com/mt_why/bespoke_copy.png"><br>
</font></font></p>
<p><font face="Arial"><font face="Arial"><font face="Arial">This should very obviously be a big no-no as maintaining that then bespoke product and keeping it up to date with any changes then made to your core product is going to be nothing more than a giant headache. <br>
As you get more customers, the number of developers you'll need to hire will increase almost in direct proportion to the number of codebases you have to maintain!&nbsp; (Again, I've seen this done - so don't think I'm just pointing out the obvious for the sake of it)</font></font></font></p>
<p><font face="Arial">Let's move onto the more-often used approach, of branching from a base product for your different needs, and utilising the power of a source control system to keep changes in sync between your code-bases.<br>
</font></p>
<p><font face="Arial"><img alt="Branching as an alternative" src="http://fear.the.codeofrob.com/mt_why/bespoke_branch.png"></font></p>
<p><font face="Arial">Customer A can be kept up to date by merging changes from the core product, and Customer B/C can get additional features from Customer A's branch if and when they desire it.</font></p>
<p><font face="Arial">At first glances, it seems like this solution fits our needs - and indeed it can work well in a lot of given&nbsp; scenarios. The problem comes when you scale this solution up to more than this small example - as few of us are (un)lucky enough to&nbsp;be able to deal with only three customers and remain financially viable!</font></p>
<p><font face="Arial">Here is a small example of 30 customers sharing 15 code-bases!<br>
</font></p>
<p><font face="Arial"><img alt="A mess of branching dependencies" src="http://fear.the.codeofrob.com/mt_why/bespoke_mess.png"></font></p>
<font face="Arial">
<p><font face="Arial">Yowsers! <br>
How do you keep track of who has what features? <br>
How do you test all of those different branches of code? <br>
How do you deploy those branches of code?<br>
How do you make a new version of the product and serve it to a customer?<br>
How many developers do you need to manage that process?</font></p>
<p><font face="Arial">It's never as simple as it looks, and you end up with not only the above problems, but you end up with the additional problems of what happens when a branch becomes radically different and you're unable to merge changes around.<br>
</font><font face="Arial"><font face="Arial">There is too much developer interaction here - and your skilled staff end up having to spend most of their time creating new branches/pushing changes around instead of spending their time doing what they're actually trained to do - writing code.&nbsp;</font></font></p>
<p><font face="Arial"><font face="Arial"><br>
Adding a new customer shouldn't be about changing code, it should be about manipulating configuration, and modifying a customer shouldn't be about changing code, it should also be about manipulating configuration.&nbsp;<br>
</font></font></p>
<p><font face="Arial">In other words, problems should only be solved once - and configuration should be used to give or take features to and from customers.<br>
</font><font face="Arial"><font face="Arial"></font></font></p>
<font face="Arial"><font face="Arial"><strong>
<h3><font face="Arial"><font face="Arial"><strong>Enter multi-tenancy...</strong></font></font></h3>
</strong></font>
<p><font face="Arial">The core concept of a well written multi-tenant application is that you should have a single code base, and a number of configurations - where each configuration tells the runtime what functionality should be available and what the look/feel should be.</font></p>
<p><font face="Arial">Before continuing, I'd like to define a few of the terms I'll be using throughout this series of blog entries.</font></p>
<ul>
    <li><font face="Arial">Module: A discrete set of functionality</font> </li>
    <li><font face="Arial">Theme: The look and feel</font> </li>
    <li><font face="Arial">Configuration:&nbsp; A selection of modules, and a single theme</font> </li>
</ul>
<font face="Arial">
<p><font face="Arial">This is a personal leaning, and I know that some people would set this up differently. Each to their own, we've got to draw lines somewhere!</font></p>
<p><font face="Arial"><br>
</font><font face="Arial"><font face="Arial">Anyway - as far as I'm concerned, Multi-tenancy gives us some of the following benefits:</font> </font></p>
<p><font face="Arial">Deployment becomes a simple case of installing your application onto a server, and setting up the configurations for that application.</font></p>
<p><font face="Arial">When a request comes in, context is determined by some means (auth credentials, the hostname, whatever), and the relevant configuration is selected from that context. </font></p>
<p><font face="Arial"><img alt="A single server serving multiple customers" src="http://fear.the.codeofrob.com/mt_why/multi_tenant_single.png"></font></p>
<p><font face="Arial"><font face="Arial">This is a very simple way of working, and if you design your application correctly, it becomes obvious that your hosting/maintenance costs can be reduced.</font></font></p>
<p><font face="Arial">You can have multiple servers with the exact same codebase installed on them, and with all the configurations available to them (In other words, identical).&nbsp; Scaling up becomes a simple matter of adding more of those identical servers - and if you're really smart you can load balance across your VPSs and power them up/down as required. <br>
You no longer need to worry (too much) about the fact that you have all of those customers, and you can concentrate on the health of your system as a whole.<br>
</font></p>
<p><img alt="Load balanced multi-tenant system" src="http://fear.the.codeofrob.com/mt_why/multi_tenant_balanced.png"></p>
<p><br>
&nbsp;Some more benefits:</p>
<ul>
    <li><font face="Arial">You add a feature once, and deploy it to your customers through the use of configuration</font> </li>
    <li><font face="Arial">You can fix a bug, and deploy the fix once&nbsp;</font> </li>
    <li><font face="Arial">&nbsp;Potentially easy management of your infrastructure (This actually&nbsp;comes through good design, and multi-tenancy just aids in that goal)</font> </li>
    <li><font face="Arial">Developers get to spend their time coding new features/fixing bugs</font> </li>
    <li><font face="Arial">New customers can have a site created in minutes and start to give feedback immediately</font> </li>
</ul>
<p><font face="Arial">Everybody is a winner and we all get to go home and have pie and punch.</font></p>
<p><font face="Arial">In the next entry, things will hot up as I'll start to look at ASP.NET MVC and determine the components that we can use to aid us in creating a multi-tenant application.<br>
</font></p>
</font></font>
<p>&nbsp;</p>
</font></font></font>
	]]></description><link>http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---why-do-we-want-it.html</link><guid isPermaLink="true">http://codeofrob.com/entries/multi-tenancy-in-asp.net-mvc---why-do-we-want-it.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 01 Feb 2010 21:10:00 GMT</pubDate></item><item><title><![CDATA[Multi-tenancy and ASP.NET MVC]]></title><description><![CDATA[
		<p><font face="Arial">I spoke about this chestnut briefly at DDD8,&nbsp;and I want to start expanding on the subject.</font></p>
<p><font face="Arial">My plan is over the next few weeks to start talking more about multi-tenancy in our web-apps, and to get everybody else doing the same - speaking to other developers after my talk I realised that we're not alone, people are working on solutions but they're just not talking about it.</font></p>
<p><font face="Arial">By getting some dialogue going, I hope we can generate a public description of what is good and what is bad about attempting to build multi-tenant applications on top of ASP.NET MVC, and what our possible avenues of achieving this can be.<br>
</font></p>
<font face="Arial">
<p><font face="Arial">The suggested topics I aim to cover in this series of blog entries will (to begin with) be somewhere along these lines: (As I've already written most of the material!)</font></p>
<ul>
    <li><font face="Arial">What is multi-tenancy and why do we want it?</font></li>
    <li><font face="Arial">The building blocks of a multi-tenant application in ASP.NET MVC</font></li>
    <font face="Arial">
    <li>How I integrated MvcEx into NerdDinner to give it some multi-tenant capabilities</li>
    </font></ul>
    <p>If there is anything else you think I should cover as part of this series, then let me know by either Twitter or the comments field below.</p>
    <p><font face="Arial">I am loathe to go into detail on what I consider to be the other 90% of the multi-tenancy story - your domain, the rest of your codebase, managing your databases/configurations etc, as you can get all of that information from people who are far more versed in the subject than I.</font></p>
    <p><font face="Arial">But, if pushed on a particular subject I guess I will describe how I deal with those issues in the codebases I have control over, and you'll have to take it (as you should take anything written on these pages) with a pinch of salt.<br>
    </font></p>
    </font>
	]]></description><link>http://codeofrob.com/entries/multi-tenancy-and-asp.net-mvc.html</link><guid isPermaLink="true">http://codeofrob.com/entries/multi-tenancy-and-asp.net-mvc.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 31 Jan 2010 19:16:00 GMT</pubDate></item><item><title><![CDATA[DDD8 - Post Event]]></title><description><![CDATA[
		<p>Wow.</p>
<p>That was a wonderful day, and the sessions I ended up going to were:</p>
<ul>
    <li>@ICooper's session on MVC Architecture (preaching the choir but good to be re-assured) </li>
    <li>@robashton's session on Multi-tenant ASP.NET MVC (obviously) </li>
    <li>@holytshirt's session on Mono (Good to see this project is advancing well) </li>
    <li>@garyshort's session on JClosure (Lovely!) </li>
    <li>@blowdart's session on the crystal maze </li>
</ul>
<p>The last session was interrupted constantly by the MVPs and associated crowd&nbsp;because Barry is leaving the UK and heading off to MS to learn how to spell :)</p>
<p>There isn't much specifically to talk about really, it's been said by everybody. The event was well organised, the post-event meal was also surprisingly kept in control and the post-event drinks ... well I'd had no sleep the previous night so I left early. I believe fun was had by all however.</p>
<p>My talk? I think it went okay - I was a bit nervous presenting on a subject that doesn't get talked about openly all that much, and worried the audience might throw a few massive spanners in the works (although I am open to change, I don't want to be told outright I'm wrong in the middle of a talk!)</p>
<p>I spoke a bit fast, and had a minor emergency at the start when realising I needed an adapter for my laptop, but was saved by the team whose job it was to babysit me and massive thanks goes to them for saving my presentation :)</p>
<p>My slides can be found <a href="http://fear.the.codeofrob.com/ddd8slides.zip">here</a>, and demo code can be found <a href="http://fear.the.codeofrob.com/ddd8code.zip">here</a>.</p>
<p>The nerd dinner multi-tenant example can be found on the MvcEx codeplex site (<a href="http://mvcex.codeplex.com">http://mvcex.codeplex.com</a>) - but I'll be hoping to improve it beyond its "suitable for demo" stage and do some blog entries on the rationale behind some of the decisions/concepts found within over the coming weeks.</p>
<p>&nbsp;It's not perfect, it's not anywhere near done and as I keep telling people, it's just for reference purposes (at present), feel free to make suggestions, contributions and etc and we'll get there in the end. Multi-tenancy is the future you know?</p>
	]]></description><link>http://codeofrob.com/entries/ddd8---post-event.html</link><guid isPermaLink="true">http://codeofrob.com/entries/ddd8---post-event.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 31 Jan 2010 17:01:00 GMT</pubDate></item><item><title><![CDATA[NUnit 2.5.3 and [SetUICulture]]]></title><description><![CDATA[
		<p>I can't for the life of me get this to work, and [SetCulture] appears to be working fine - so I can only assume it's a bug.</p>
<p>I've posted to the mailing list and started off the process of working out whether it is a bug or not, but for now - I need to have my tests running&nbsp; in the right culture, without any side effects on the other tests once a test has been complete.</p>
<p>Here is my hack to do that:</p>
<pre class="brush: csharp;" title="code">   public class CultureContext : IDisposable
    {
        private CultureInfo mOldCulture;

        public CultureContext(String cultureName)
        {
            mOldCulture = System.Threading.Thread.CurrentThread.CurrentUICulture;
            System.Threading.Thread.CurrentThread.CurrentUICulture = new CultureInfo(cultureName);
        }

        public void Dispose()
        {
            System.Threading.Thread.CurrentThread.CurrentUICulture = mOldCulture;
        }
    }</pre>
<p>The usage is as follows, within a test do:</p>
<pre class="brush: csharp;" title="code">using (new CultureContext("fr-FR"))
{
	// Test code here
}</pre>
<p>This will ensure that your test runs with the ui culture of "fr-FR", before resetting it to whatever it was before the test began. Not pretty, but it'll do until I work out if it's user error or a bug preventing NUnit from doing what I want it to do!</p>
	]]></description><link>http://codeofrob.com/entries/nunit-2.5.3-and-[setuiculture].html</link><guid isPermaLink="true">http://codeofrob.com/entries/nunit-2.5.3-and-[setuiculture].html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 18 Dec 2009 13:28:00 GMT</pubDate></item><item><title><![CDATA[Dynamically Switching between Master Pages in ASP.NET MVC]]></title><description><![CDATA[
		<p><font face="Arial">When developing a web application that's designed for re-deployment in a number of different environments (such as a blogging engine/forum system/etc), it's helpful to be able to re-skin and re-structure&nbsp; the application without modifying any application files.</font></p>
<p><font face="Arial">To a very large extent, this can be achieved through the use of an alternative set of cascading style sheets and this works for a large number of people. However if you take a look on programming websites such as Stack Overflow the question of how to change the master page at runtime is still an oft-asked one.</font></p>
<p><font face="Arial">In ASP.NET Forms the solution was to simply subclass Page, override PreInit and change the MasterPage property based on some application variable. The master page specified by the corresponding ASPX file could even be read out and used to determine which themed master page to use. (A useful function if you had multiple master pages used throughout the site).</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">    public class ThemedPage : Page
    {
        protected override void OnPreInit(EventArgs e)
        {
            if (this.MasterPageFile.EndsWith("MasterOne.Master", StringComparison.InvariantCultureIgnoreCase))
            {
                // TODO: Some logic here to find the right master page based on theme!
                this.MasterPageFile = "/Views/Shared/MasterThree.Master";
            }

            base.OnPreInit(e);
        }
    }</pre>
<p><font face="Arial">In ASP.NET MVC the playing field has been altered somewhat, and there are a number of options to consider when creating an application with dynamic master pages.</font></p>
<p><font face="Arial">The most championed solutions found on the afore-mentioned programming websites are to either pass the master page name into the View() method when returning a ViewResult , or to create a custom view engine which specifies the master page.</font></p>
<h5>Passing the master page name into the View method</h5>
<font face="Arial">
<p><font face="Arial">When returning a ViewResult via any of the built in methods (Controller.View()) the option is provided to pass in the name of as master page - and the default view engine will look for a master page with that name in the ~/Views/Shared directory.</font></p>
<p><font face="Arial">Alternatively you can modify the ViewResult&nbsp; before returning it from your action method - which is probably the preferred option in most cases&nbsp; as you probably don't want to be passing in the name of the view all the time too.</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">        public ActionResult SomePage()
        {
            return View("SomePage", "MasterTwo");
        }</pre>
</font><font face="Arial">
<pre class="brush: csharp;" title="code">        public ActionResult SomeOtherPage()
        {
            var view = View();
            view.MasterName = "MasterTwo";
            return view;
        }</pre>
<p>&nbsp;</p>
<p><font face="Arial">It is obvious however from these two examples that this is&nbsp; an un-maintainable solution; having to specify the master page on every single action is going to get tedious and if you decide to change this solution for a different one later on you're going to have to go back and modify all of those method calls.</font></p>
<p><font face="Arial">This leads us nicely on to the next possible solution, of having this work done for us globally by the controller.</font></p>
</font><font face="Arial">It would be possible to pass in the name of a different master page by using a helper somewhere that knew the details of the current theme and therefore the names of the master pages it uses.</font></font>
<h5>Overriding OnActionExecuted on the Controller class</h5>
<p><font face="Arial"><font face="Arial">Rather than specify the master page name as the result of every single Action method, you could either create a base controller or override OnActionExecuted on a case-by-case basis.</font></font></p>
<p><font face="Arial">OnActionExecuted gives you a chance to modify the result after an action has been invoked, which means you can take the ViewResult which was returned by an action and set the MasterName on it in this location.</font></p>
<p><font face="Arial">You could even detect whether the MasterName property had been set, and not override it if an action has already explicitly set it.</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">        protected override void OnActionExecuted(ActionExecutedContext filterContext)
        {
            var action = filterContext.Result as ViewResult;
            if (action != null &amp;&amp; String.IsNullOrEmpty(action.MasterName))
            {
                action.MasterName = "MasterThree";
            }
            base.OnActionExecuted(filterContext);
        }</pre>
</font>
<p><font face="Arial">This gives you the power of being able to specify a master page per controller and still have the flexibility of overriding it per action. </font></p>
<p><font face="Arial">&nbsp;It's still not ideal though, there is a certain amount of manual work required in doing this that you wouldn't want if you were going to be developing a large system with a substantial number of controllers or actions.<br>
</font></p>
<h5>Custom View Engine</h5>
<p><font face="Arial">Moving further up the processing chain, the Custom ViewEngine allows the application to specify the master file for any request.</font></p>
<p><font face="Arial">For the purposes of this example I'll derive my custom view engine from the standard built-in WebFormViewEngine as it requires the least work to get up and running.</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">    public class ThemedViewEngine : WebFormViewEngine
    {
        public override ViewEngineResult FindView(ControllerContext controllerContext, string viewName, string masterName, bool useCache)
        {
            if (string.IsNullOrEmpty(masterName))
            {
                masterName = "MasterOne";
            }
            return base.FindView(controllerContext, viewName, masterName, useCache);
        }
    }</pre>
</font>
<p><font face="Arial">This is registered in place of the built in view engine like so:</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">            ViewEngines.Engines.Clear();
            ViewEngines.Engines.Add(new ThemedViewEngine());</pre>
</font>
<p><font face="Arial">Now let's take a look at that code - passed in to the method we're overriding (FindView) is a string called masterName.&nbsp; This is where that string ends up if you use either of the two previous two methods to specify the master page.</font></p>
<p><font face="Arial">It follows on therefore that just like the last example you can do a check here to see if a master page has already been specified by the previous two methods, and specify one if one has not been set already.</font></p>
<h5>ViewPage - OnPreInit</h5>
<p><font face="Arial">All of the above methods completely ignore the master page directive set in the view itself - which is in my opinion a little bit bonkers.</font></p>
<p><font face="Arial">By specifying a master page in the ASPX view, you allow the compiler to verify that the right ContentPlaceHolders are overridden&nbsp; and therefore if you enable compilation of your views you get a check that your view are valid.</font></p>
<p><font face="Arial">Consider for&nbsp; example the site that has a number of base master pages, one of my personal sites for example has three master pages which are used in different circumstances and each of them have different ContentPlaceHolders because they're for use in completely different functional situations.</font></p>
<p><font face="Arial">The application is probably unaware of these directives (and indeed should be probably be de-coupled from such concerns as whether a page is using a particular master page or not) and therefore shouldn't be making the decision as to which master page to use!</font></p>
<p><font face="Arial">ASP.NET MVC is built on top of ASP.NET Forms however, so it turns out that we can ignore the delightfully helpful methods given to us in ASP.NET MVC and skip right back to our original solution of overriding OnPreInit on the base Page class.</font></p>
<p><font face="Arial">Knowing that ViewPage is inherited from the ASP.NET Forms&nbsp;Page, so we can create ThemableViewPage</font></p>
<font face="Arial">
<pre class="brush: csharp;" title="code">    public class ThemedViewPage&lt;T&gt; : ViewPage&lt;T&gt; where T : class
    {
        protected override void OnPreInit(EventArgs e)
        {
            if (this.MasterPageFile.EndsWith("MasterOne.Master", StringComparison.InvariantCultureIgnoreCase))
            {
                // TODO: Some logic here to find the right master page based on theme!
                this.MasterPageFile = "/Views/Shared/MasterThree.Master";
            }

            base.OnPreInit(e);
        }
    }

    public class ThemedViewPage : ThemedViewPage&lt;Object&gt; { }</pre>
</font>
<p><font face="Arial">Note: I create a generic version and a non generic version so we can use it on non strong-typed pages (Some people use these, I don't know why!)</font></p>
<p><font face="Arial">We can use the same theme code we used in the original example to solve the problem - and best of all, it is still compatible with the previous three methods - so if a different master page is specified by either an Action, a Controller or the ViewEngine this logic will still work.</font></p>
<p><font face="Arial">The only caveats that I can see are that this method is quite dependent on the default WebFormView implementation, and that every view needs to be set up to inherit from this custom ViewPage .</font></p>
<h5>Summary</h5>
<p><font face="Arial"><font face="Arial">Switching between master pages is still a bit of a fuzzy topic, and the options given to us in ASP.NET MVC are a bit inadequate. There is still the question as to whether we should be attempting to do this at all given how powerful CSS is - but if you really need to, this blog entry should give you a helpful pointer in the right direction.</font></font></p>
<p>In the projects&nbsp;I own technically where this sort of functionality is going to be requested, I'll be sticking to the OnPreInit method until something better comes up.</p>
<p><font face="Arial"><font face="Arial"><hr>
Technorati tags: <a rel="tag" href="http://technorati.com/tags/ASP.NET">ASP.NET</a>, <a rel="tag" href="http://technorati.com/tags/ASP.NET+MVC">ASP.NET MVC</a>, <a rel="tag" href="http://technorati.com/tags/Master+Pages">Master Pages</a>, <a rel="tag" href="http://technorati.com/tags/Themes">Themes</a></font></font></p>
</font>
	]]></description><link>http://codeofrob.com/entries/dynamically-switching-between-master-pages-in-asp.net-mvc.html</link><guid isPermaLink="true">http://codeofrob.com/entries/dynamically-switching-between-master-pages-in-asp.net-mvc.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Sun, 01 Nov 2009 17:44:00 GMT</pubDate></item><item><title><![CDATA[Why Linq2NHibernate isn't ready for production use]]></title><description><![CDATA[
		I was quite excited when Ayende announced that he had written a Linq provider for NHibernate which was of <a href="http://ayende.com/Blog/archive/2009/07/26/nhibernate-linq-1.0-released.aspx">production quality</a>.<br>
<br>
It came with a few caveats, it could only do what criteria currently supported and they hadn't implemented any sort of join support. I considered these to be perfectly reasonable items on the todo list, given that they are actively working on creating a more complete linq provider that does everything people would want it to do.<br>
<br>
I do the vast bulk of my queries using the criteria API, written as specifications against thin repositories, and adding a LinqSpecification was a simple task. I decided that given the limitations described above to follow a few simple rules for when I could use a Linq query such as "only use Linq when querying the properties of a single type of object".<br>
<br>
Having Linq in my specifications gave some real benefits, such as strong typing and compile time support for checking the properties being queried against. Normally if you change the name of a property on any domain object and forget to update the text in a criteria or hql query you'd only catch this when you ran your unit tests. (Or worse, during product testing/use!)<br>
<br>
I was using it quite happily for a week or so until I stopped to review the sql it was generating under the hood for even the simplest of queries.
<p>Consider the following objects:</p>
<pre class="brush: csharp;" title="code">    public class Blog
    {
        public virtual int Id
        {
            get;
            protected set;
        }

        public virtual String Name
        {
            get;
            set;
        }
    }

    public class BlogEntry
    {
        public virtual int Id
        {
            get;
            set;
        }

        public virtual Blog Blog
        {
            get;
            set;
        }

        public virtual String Content
        {
            get;
            set;
        }
    }</pre>
<p>With the following mappings:&nbsp;</p>
<pre class="brush: csharp;" title="code">    public class BlogMap : ClassMap&lt;Blog&gt;
    {
        public BlogMap()
        {
            Id(x =&gt; x.Id);
            Map(x =&gt; x.Name).Not.Nullable();
        }
    }

    public class BlogEntryMap : ClassMap&lt;BlogEntry&gt;
    {
        public BlogEntryMap()
        {
            Id(x =&gt; x.Id);
            Map(x =&gt; x.Content).Not.Nullable();
            References(x =&gt; x.Blog).Not.Nullable();
        }
    }</pre>
<p>Fairly straight forward stuff. Now imagine I have a blog object in hand and I wish to query for all the entries that belong to that blog (We could easily imagine asking this being a query where we ask for the entries from that blog between a certain date range).<br>
<br>
The query looks something like this:&nbsp;</p>
<pre class="brush: csharp;" title="code">            var linqResults = (
                        from entry in session.Linq&lt;BlogEntry&gt;()
                        where entry.Blog  == blog
                        select entry
                      ).ToList();</pre>
<br>
Again, very straight forward - and you'd expect the query to be so as well - so have a look! <br>
<pre class="brush: sql;" title="code">SELECT this_.Id as Id1_1_, this_.Content as Content1_1_, this_.Blog_id as Blog3_1_1_, blog1_.Id as Id0_0_, blog1_.Name as Name0_0_ FROM "BlogEntry" this_ left outer join "Blog" blog1_ on t his_.Blog_id=blog1_.Id WHERE this_.Blog_id = @p0;@p0 = 1</pre>
What WHAAT?!<br>
<br>
If you can't see the problem here then go and ask your DBA if you have one, because I can guarantee they'll not be happy if you start littering your specifications with this kind of query. <br>
<br>
<ol>
    <li>Why are we doing a join to the Blog table? We don't need to do a join to the Blog table, we should be comparing the id situated in the BlogEntry table. </li>
    <li>Why are we bringing back al the information from the blog table as well as the blog entry? Imagine you're bringing back 50 such blog entries - you'd be bringing back 50 identical blog objects too. </li>
    <li>It's a left outer join too, your DBA is going to hit the roof! (Mine definitely would - you should only be using these where it makes sense to be using them. </li>
</ol>
Check out the equivalent Criteria based query:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<pre class="brush: csharp;" title="code">            var criteria = session.CreateCriteria&lt;BlogEntry&gt;()
                                .Add(Restrictions.Eq("Blog", blog)).List&lt;BlogEntry&gt;();</pre>
<br>
<br>
Generating the following SQL:<br>
<br>
<pre class="brush: sql;" title="code">SELECT this_.Id as Id1_0_, this_.Content as Content1_0_, this_.Blog_id as Blog3_1_0_ FROM "BlogEntry" this_ WHERE this_.Blog_id = @p0;@p0 = 1</pre>
<p><br>
Much more sensible.<br>
<br>
You might be of the persuasion that you don't really care, and that's acceptable in some cases I guess- but I'm of the opinion that if all of your queries look like the above then you've got some real issues. Our product has to service the needs of some fairly large customers with some fairly heavy load and the system chugging at <span style="FONT-WEIGHT: bold;">all </span>is going to get us in a lot of trouble. </p>
<p>Take for example the following (perfectly reasonable) query if our objects were a little more complex.</p>
<pre class="brush: csharp;" title="code">            var complexResult = (
                    from entry in session.Linq&lt;BlogEntry&gt;()
                    where entry.Category == category &amp;&amp;  entry.Blog.User == user
                    select entry
                ).ToList();</pre>
<p>This will generate the following SQL:</p>
<pre class="brush: sql;" title="code">SELECT this_.Id as Id1_3_, this_.Content as Content1_3_, this_.Blog_id as Blog3_1_3_, this_.Category_id as Category4_1_3_, blog2_.Id as Id0_0_, blog2_.Name as Name0_0_, blog2_.User_id as User3_0_0_, user3_.Id as Id3_1_, user3_.Name as Name3_1_, category1_.Id as Id2_2_, category1_.Name as Name2_2_ FROM "BlogEntry" this_ left outer join "Blog" blog2_ on this_.Blog_id=blog2_.Id left outer join "User" user3_ on blog2_.User_id=user3_.Id left outer join "Category" category1_ on this_.Category_id=category1_.Id WHERE (this_.Category_id = @p0 and blog2_.User_id = @p1);@p0 = 1, @p1 = 1</pre>
<p>Every single property of every single referenced object being brought back even though I've only asked for BlogEntry.</p>
<p>Without trying to sound like a complete arse, this is not the definition of production quality I am familar with! <br>
<br>
&nbsp;I really do look forward to the proper release of Linq2NHibernate, but until then I'm sticking to Hql And Criteria because I can trust them to keep my DBA happy.</p>
<p></p><hr>
Technorati tags: <a rel="tag" href="http://technorati.com/tags/NHibernate">NHibernate</a>, <a rel="tag" href="http://technorati.com/tags/Linq2NHibernate">Linq2NHibernate</a>, <a rel="tag" href="http://technorati.com/tags/Linq">Linq</a>, <a rel="tag" href="http://technorati.com/tags/.NET">.NET</a>
	]]></description><link>http://codeofrob.com/entries/why-linq2nhibernate-isnt-ready-for-production-use.html</link><guid isPermaLink="true">http://codeofrob.com/entries/why-linq2nhibernate-isnt-ready-for-production-use.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 21 Oct 2009 22:00:00 GMT</pubDate></item><item><title><![CDATA[Times have changed]]></title><description><![CDATA[
		<p>I had a blog here once, it was mostly personal with a bit of code talk thrown in and the focus of the website was actually in showcasing all the projects I'd completed so people could see that I wasn't just a nerd who spent all his time on IRC and played games - I was a productive nerd who spent all his time on IRC and played games.<br>
<br>
I'd been spending the vast majority of my time since leaving university meandering around and writing code for various people whilst learning on my own personal projects.<br>
<br>
Roughly a year ago I went and got myself a "real job" in the "real world".<br>
<br>
The job I managed to wrangle myself into was that of a standard .NET Web developer, messing about in ASP.NET 2.0 on a hideous system that was a mess of badly written code written by people who were very new to .NET having worked on ASP projects previously.<br>
<br>
This project was ditched and because it was just a glorified CMS, it was moved across to an open source platform (Drupal) and because I've got no interest in maintaining open source CMS systems switched teams to help them write a bit of .NET for their (again) legacy ASP system.<br>
<br>
I now find myself a year later the technical lead/architect/whatever on a grand old web application written in .NET 3.5 using all the fancy modern technology that modern .NET web developers are supposed to be using. (ASP.NET MVC, jQuery, NHibernate/Fluent/Etc, xUnit etc)<br>
<br>
This grand old web application that we work on is for a host of really large companies (household names in a lot of cases), and we already have an old version of the application written in ASP which we're looking to move away from. There are over nine years of knowledge and experience captured in that old application and thus re-imagining it in .NET is a challenging prospect. <br>
<br>
Some of the requirements that have come up over time need us to come up with some rather innovative solutions when bringing them across to this brave new world and thus I've ended up with a whole suite of technical problems which we've had to overcome. <br>
<br>
This brings me to the point of this blog, I aim to document at least some of these problems here over time in order to foster either some discussion (Probably a bit hopeful), or at least to leave a vague trail in Google for other developers to follow when they encounter similar. <br>
<br>
At no point in this blog am I going to mention who I work for, or what the product is I work on, I am an opinionated person and some opinions are best kept as far away from the workplace as possible.</p>
<p></p><hr>
Technorati tags: <a rel="tag" href="http://technorati.com/tags/Introduction">Introduction</a>
	]]></description><link>http://codeofrob.com/entries/times-have-changed.html</link><guid isPermaLink="true">http://codeofrob.com/entries/times-have-changed.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 21 Oct 2009 09:37:00 GMT</pubDate></item></channel></rss>