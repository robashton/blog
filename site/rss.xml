<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><image><url>http://codeofrob.com/img/cover.jpg</url><title>Rob Ashton&apos;s blog</title><link>http://codeofrob.com</link></image><generator>RSS for Node</generator><lastBuildDate>Mon, 28 Oct 2013 16:11:22 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><author><![CDATA[Rob Ashton]]></author><item><title><![CDATA[Refactoring the Clojure method I am least proud of in CravenDB]]></title><description><![CDATA[<p>I&#39;ve had a bit of a duck in my <a href="http://github.com/robashton/cravendb">database</a> for a while (and I&#39;m not making reference to the read-strings that were in there for months while I got on with more important things).</p>
<p>The duck came in the form of this method</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">defn</span></span> perform-query 
  <span class="collection">[tx reader query offset amount sort-field sort-order]</span>
  <span class="list">(<span class="title"><span class="built_in">loop</span></span> <span class="collection">[results <span class="list">()</span>
         current-offset offset
         total-collected<span class="number"> 0</span>
         attempt<span class="number"> 0</span> ]</span>
         <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="collection">[requested-amount <span class="list">(<span class="title"><span class="built_in">+</span></span> current-offset <span class="list">(<span class="title"><span class="built_in">max</span></span> amount<span class="number"> 100</span>)</span>)</span>
               raw-results <span class="list">(<span class="title">lucene/query</span> reader query requested-amount sort-field sort-order)</span>
               document-results <span class="list">(<span class="title">convert-results-to-documents</span> tx <span class="list">(<span class="title"><span class="built_in">drop</span></span> current-offset raw-results)</span>)</span>
               new-results <span class="list">(<span class="title"><span class="built_in">take</span></span> amount <span class="list">(<span class="title"><span class="built_in">concat</span></span> results document-results)</span>)</span>
               new-total <span class="list">(<span class="title"><span class="built_in">count</span></span> new-results)</span> 
               new-offset <span class="list">(<span class="title"><span class="built_in">+</span></span> current-offset requested-amount)</span>]</span>

           <span class="list">(<span class="title">debug</span> <span class="string">"Requested"</span> requested-amount 
                    <span class="string">"CurrentTotal"</span> total-collected 
                    <span class="string">"Skipped"</span> current-offset <span class="string">"Of"</span>
                    <span class="string">"Received"</span> <span class="list">(<span class="title"><span class="built_in">count</span></span> raw-results)</span>)</span>
           <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title"><span class="built_in">and</span></span> <span class="list">(<span class="title"><span class="built_in">=</span></span> <span class="list">(<span class="title"><span class="built_in">count</span></span> raw-results)</span> requested-amount)</span>
                    <span class="list">(<span class="title"><span class="built_in">not=</span></span> new-total amount)</span>
                    <span class="list">(<span class="title">&gt;</span><span class="number"> 10</span> attempt)</span>)</span>
             <span class="list">(<span class="title"><span class="built_in">recur</span></span> new-results 
                    new-offset 
                    new-total
                    <span class="list">(<span class="title"><span class="built_in">inc</span></span> attempt)</span>)</span>
             new-results)</span>)</span>)</span>)</span></code></pre>
<p>Essentially we have a lucene reader and we want to</p>
<ul>
<li>Query it for some results (offset + amount-ish)</li>
<li>Pull those results through as documents</li>
<li>If we don&#39;t have enough documents and there are some left, query again</li>
<li>Keep going until either we have enough, or there are no more left</li>
</ul>
<p>It&#39;s fairly simple, but what we can see in the method is</p>
<ul>
<li>I&#39;m using &#39;loop&#39;, this usually indicates other non-functional problems</li>
<li>I&#39;m effectively building &#39;take&#39;, &#39;skip&#39;, etc myself</li>
</ul>
<p>One thing I&#39;ve learned so far in Clojure that if you have a abnormal construct (in this case my lucene reader), is that we should try and get that into either a <em>map</em> or a <em>sequence</em> as early on as possible so as to be able to leverage all the Clojure built-ins on it.</p>
<h3>What I want here, is a lazy sequence built up with recursion</h3>
<p>I wrote a quick proof of concept of that sort of thing, it looks like this:</p>
<pre><code class="lang-clojure">(defn number-seq 
  ([] (number-seq 0))
  ([i]
  (cons (inc i) (lazy-seq (form-sequence (inc i))))))</code></pre>
<p>What I have here is a function I can call with all the usual suspects like</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">take</span></span><span class="number"> 100</span> <span class="list">(<span class="title">number-seq</span>)</span>)</span> <span class="comment">;; Get me 0 to 100</span>
<span class="list">(<span class="title"><span class="built_in">drop</span></span><span class="number"> 10</span> <span class="list">(<span class="title"><span class="built_in">take</span></span><span class="number"> 100</span> <span class="list">(<span class="title">number-seq</span>)</span>)</span> <span class="comment">;; Get me 10 to 100</span>
<span class="comment">;; etc</span></code></pre>
<p>And it&#39;s fully lazy and potentially infinite and all those things. The whole &quot;cons a value onto a lazy sequence&quot; trick is the solution to quite a few of the Clojure koans and had I done them perhaps I&#39;d not have written the above loop.</p>
<h3>First step - reduce the arguments</h3>
<p>Before ripping apart this loop, I thought it better to jump in the repl to create the constructs that go into the loop, then sit there and pull the loop apart into its constituent parts before using them in a recursive function.</p>
<p>Looking at the query method, I&#39;m passing quite a lot in to it</p>
<ul>
<li>tx: the current transaction we&#39;re pulling data from</li>
<li>reader: a wrapper around a lucene reader</li>
<li>query: the query itself</li>
<li>offset: the number of values to skip in the page</li>
<li>amount: the number of values to pull from the reader</li>
<li>sort-field: the field we&#39;re sorting on</li>
<li>sort-order: the order of sorting</li>
</ul>
<p>It is quite clear that only two of these values actually change during the recursive loop, and the rest are only used with a single object (reader) the same way over and over again.</p>
<p>My first step in C# would probably be to &quot;create another object&quot;, in this case here though a producer function of some sort is what springs to mind</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">defn</span></span> lucene-producer <span class="collection">[tx reader query sort-field sort-order]</span>

  <span class="list">(<span class="title"><span class="built_in">fn</span></span> <span class="collection">[offset amount]</span>
    <span class="list">(<span class="title">-&gt;&gt;</span> 
      <span class="list">(<span class="title">lucene/query</span> reader 
                    query 
                    <span class="list">(<span class="title"><span class="built_in">+</span></span> offset amount)</span> 
                    sort-field 
                    sort-order)</span> 
      <span class="list">(<span class="title"><span class="built_in">drop</span></span> offset)</span> 
      <span class="list">(<span class="title">convert-results-to-documents</span> tx)</span>)</span>)</span>)</span></code></pre>
<p>I actually go a bit further and bring in the loading of the documents as well, now I can call this over again like so</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title">producer</span><span class="number"> 0</span><span class="number"> 100</span>)</span> <span class="comment">;; Get me the first 100 items in the index</span>
<span class="list">(<span class="title">producer</span><span class="number"> 10</span><span class="number"> 100</span>)</span> <span class="comment">;; Get me the items 10-100 in the index</span></code></pre>
<p>Now of course, this producer function might not actually return the requested number of results because the underlying code is doing de-duping and removing documents that have been deleted and not yet cleared from the index.</p>
<p>I slot this into my original loop function, verify it all still works and then look at the next step:</p>
<h3>Second step - split out the paging</h3>
<p>What I really want is the ability to skip through pages of the index and not keep accumulators around in the loop itself, I can employ a similar trick and write a function that knows about the current page and how to get the next page. I&#39;ll store the results in a map and a function to get the next page in the map as well.</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">defn</span></span> lucene-page 
  <span class="list">([<span class="title">producer</span> page-size] <span class="list">(<span class="title">lucene-page</span> producer<span class="number"> 0</span> page-size)</span>)</span>
  <span class="list">([<span class="title">producer</span> current-offset page-size]
   <span class="collection">{
    <span class="attribute">:results</span> <span class="list">(<span class="title">producer</span> current-offset page-size)</span>
    <span class="attribute">:next</span> <span class="list">(<span class="title"><span class="built_in">fn</span></span> <span class="collection">[]</span> <span class="list">(<span class="title">lucene-page</span> producer <span class="list">(<span class="title"><span class="built_in">+</span></span> current-offset page-size)</span> page-size)</span>)</span>
   }</span>)</span>)</span></code></pre>
<p>An alternative might be to just assoc the paging values into the map itself and create a next-page function like so</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">defn</span></span> lucene-page 
  <span class="list">([<span class="title">producer</span> page-size] <span class="list">(<span class="title">lucene-page</span> producer<span class="number"> 0</span> page-size)</span>)</span>
  <span class="list">([<span class="title">producer</span> current-offset page-size]
   <span class="collection">{
    <span class="attribute">:producer</span> producer
    <span class="attribute">:offset</span> current-offset
    <span class="attribute">:page-size</span> page-size
    <span class="attribute">:results</span> <span class="list">(<span class="title">producer</span> current-offset page-size)</span>
   }</span>)</span>)</span>

<span class="list">(<span class="title"><span class="built_in">defn</span></span> next-page <span class="collection">[<span class="collection">{<span class="attribute">:keys</span> <span class="collection">[producer offset page-size]</span>}</span>]</span>
  <span class="list">(<span class="title">lucene-page</span> producer <span class="list">(<span class="title"><span class="built_in">+</span></span> offset page-size)</span> page-size)</span>)</span></code></pre>
<p>But I quite like the little function and it&#39;s smaller so I&#39;m rolling with it until I&#39;m told that it&#39;s a bad thing and I&#39;m a naughty boy.</p>
<p>With this, I can consume the results I have and and simply call &quot;next&quot; to get the next lucene page without worrying about the accumulators in the loop function, this means I&#39;m now left with quite a stripped down loop:</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> perform-query 
  [producer offset amount]
  <span class="list">(<span class="title">loop</span><span class="body"> [results <span class="list">(<span class="body">)</span></span>
        page <span class="list">(<span class="title">lucene-page</span><span class="body"> producer amount)</span></span>]
      <span class="list">(<span class="title">let</span><span class="body"> [new-results <span class="list">(<span class="title">take</span><span class="body"> amount <span class="list">(<span class="title">concat</span><span class="body"> results <span class="list">(<span class="body"><span class="keyword">:results</span> page)</span></span>)</span></span>)</span></span>
            new-total <span class="list">(<span class="title">count</span><span class="body"> new-results)</span></span>]

          <span class="list">(<span class="title">if</span><span class="body"> <span class="list">(<span class="title">and</span><span class="body"> <span class="list">(<span class="title">=</span><span class="body"> <span class="list">(<span class="title">count</span><span class="body"> <span class="list">(<span class="body"><span class="keyword">:results</span> pager)</span></span>)</span></span> <span class="number">0</span>)</span></span>
                    <span class="list">(<span class="title">not=</span><span class="body"> new-total amount)</span></span>)</span></span>
            <span class="list">(<span class="title">recur</span><span class="body"> new-results 
                    <span class="list">(<span class="body"><span class="list">(<span class="body"><span class="keyword">:next</span> page)</span></span>)</span></span>)</span></span>
            new-results)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<h3>To the recursive lazy sequence</h3>
<p>Now I&#39;ve pulled out the important bits of this code into two different stages (pulling data from lucene, paging data over that), it&#39;s quite trivial to convert the loop into a lazy sequence</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> lucene-seq 
  <span class="list">(<span class="body">[page] <span class="list">(<span class="title">lucene-seq</span><span class="body"> page <span class="list">(<span class="body"><span class="keyword">:results</span> page)</span></span>)</span></span>)</span></span>
  <span class="list">(<span class="body">[page src]
  <span class="list">(<span class="title">cond</span><span class="body">
    <span class="list">(<span class="title">empty</span><span class="body">? <span class="list">(<span class="body"><span class="keyword">:results</span> page)</span></span>)</span></span> <span class="list">(<span class="body">)</span></span>
    <span class="list">(<span class="title">empty</span><span class="body">? src)</span></span> <span class="list">(<span class="title">lucene-seq</span><span class="body"> <span class="list">(<span class="body"><span class="list">(<span class="body"><span class="keyword">:next</span> page)</span></span>)</span></span>)</span></span>
    <span class="keyword">:else</span> <span class="list">(<span class="title">cons</span><span class="body"> <span class="list">(<span class="title">first</span><span class="body"> src)</span></span> <span class="list">(<span class="title">lazy-seq</span><span class="body"> <span class="list">(<span class="title">lucene-seq</span><span class="body"> page <span class="list">(<span class="title">rest</span><span class="body"> src)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<p>I&#39;m pretty pleased with this, tidying up the rest of the code around the rest of the file reduces my line count by 50% and leaves the complete solution looking like this:</p>
<pre><code><span class="list">(<span class="title">defn</span><span class="body"> lucene-producer [tx reader opts]
  <span class="list">(<span class="title">fn</span><span class="body"> [offset amount]
    <span class="list">(<span class="title">-&gt;&gt;</span><span class="body"> 
      <span class="list">(<span class="title">lucene/query</span><span class="body"> reader 
                    <span class="list">(<span class="body"><span class="keyword">:query</span> opts)</span></span> 
                    <span class="list">(<span class="title">+</span><span class="body"> offset amount)</span></span> 
                    <span class="list">(<span class="body"><span class="keyword">:sort-by</span> opts)</span></span> 
                    <span class="list">(<span class="body"><span class="keyword">:sort-order</span> opts)</span></span>)</span></span> 
      <span class="list">(<span class="title">drop</span><span class="body"> offset)</span></span> 
      <span class="list">(<span class="title">valid-documents</span><span class="body"> tx)</span></span>)</span></span>)</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> lucene-page 
  <span class="list">(<span class="body">[producer page-size] <span class="list">(<span class="title">lucene-page</span><span class="body"> producer <span class="number">0</span> page-size)</span></span>)</span></span>
  <span class="list">(<span class="body">[producer current-offset page-size]
  {
    <span class="keyword">:results</span> <span class="list">(<span class="title">producer</span><span class="body"> current-offset page-size)</span></span>
    <span class="keyword">:next</span> <span class="list">(<span class="title">fn</span><span class="body"> [] <span class="list">(<span class="title">lucene-page</span><span class="body"> producer <span class="list">(<span class="title">+</span><span class="body"> current-offset page-size)</span></span> page-size)</span></span>)</span></span>
  })</span></span>)</span></span>

<span class="list">(<span class="title">defn</span><span class="body"> lucene-seq 
  <span class="list">(<span class="body">[page] <span class="list">(<span class="title">lucene-seq</span><span class="body"> page <span class="list">(<span class="body"><span class="keyword">:results</span> page)</span></span>)</span></span>)</span></span>
  <span class="list">(<span class="body">[page src]
  <span class="list">(<span class="title">cond</span><span class="body">
    <span class="list">(<span class="title">empty</span><span class="body">? <span class="list">(<span class="body"><span class="keyword">:results</span> page)</span></span>)</span></span> <span class="list">(<span class="body">)</span></span>
    <span class="list">(<span class="title">empty</span><span class="body">? src)</span></span> <span class="list">(<span class="title">lucene-seq</span><span class="body"> <span class="list">(<span class="body"><span class="list">(<span class="body"><span class="keyword">:next</span> page)</span></span>)</span></span>)</span></span>
    <span class="keyword">:else</span> <span class="list">(<span class="title">cons</span><span class="body"> <span class="list">(<span class="title">first</span><span class="body"> src)</span></span> <span class="list">(<span class="title">lazy-seq</span><span class="body"> <span class="list">(<span class="title">lucene-seq</span><span class="body"> page <span class="list">(<span class="title">rest</span><span class="body"> src)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></code></pre>
<p>No doubt a seasoned Clojure developer would further reduce this (and there are probably a couple of snafus), but I&#39;m pretty pleased that the interface I&#39;m now exposing to the rest of my code is just a plain old sequence and even if I go and play golf with the underlying code the behaviour of that sequence shouldn&#39;t change. </p>
]]></description><link>http://codeofrob.com/entries/refactoring-the-clojure-method-i-am-least-proud-of-in-cravendb.html</link><guid isPermaLink="true">http://codeofrob.com/entries/refactoring-the-clojure-method-i-am-least-proud-of-in-cravendb.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 03 Oct 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[On Testing and the REPL in Clojure]]></title><description><![CDATA[<p>I&#39;m currently at <a href="http://euroclojure.com/2013/">Euroclojure</a> where I have the pleasure to have been meeting and chatting to people about Clojure and related ponies for the past day or so - and I&#39;ve learned a few things and got a much better feel for what the Clojure community is about.</p>
<p>One theme that keeps coming up is the ugly one of testing, and its association with the obsession over tests in other communities, whether it be TDD or some other variant of making yourself feel good through automatic code exercise.</p>
<p>Another theme that keeps coming up is that the JVM (particularly under Clojure) has a heavy start-up time of quite a few seconds, so that practising a strict TDD feedback loop as you change your code is impractical without installing hacky workarounds like drip or associated (pre-warming the JVM for example). This is reminiscent of what the Rails folk do with Spork/related and comes with a whole suite of interesting problems.</p>
<p>Another more concerning theme is the derision I&#39;ve been feeling from a lot of corners as a result of the first theme on tests themselves - some of it is joking around, and some of it is almost describing tests as a set of crutches to get around the fact that some code is hard to manipulate in the REPL for example.</p>
<p>As I&#39;ve been writing <a href="https://github.com/robashton/cravendb">CravenDB</a>, and during my time at MastodonC I have been adjusting my patterns and attitudes around this subject and I&#39;d like to describe where I&#39;m currently at with testing, tdd, the repl and Clojure.</p>
<h3>The REPL <em>IS</em> TDD</h3>
<p>The REPL has taken over as my primary way of exploring a new problem or a new feature, and this seems to be due to the following reasons:</p>
<ul>
<li>I quite like manipulating a bit of code once I already have state in memory and repeating a small bit of code over and over until the algorithm is just right</li>
<li>Running tiny tests around that sort of thing would be time consuming, because JVM/Clojure start-up time</li>
<li>Most code written in Clojure seems to be very honest in that it&#39;s just about transforming state to get some sort of result, and this is usually as a result of composing little functions in a chain (often through experimentation) to get the result we ewant.</li>
</ul>
<p>If I was in another platform where the REPL isn&#39;t quite as good (so anything else really), I think I&#39;d still be writing lots of small tests to build up my understanding around a problem. If I was in another platform where the process of finding a result wasn&#39;t so... functional, I&#39;d probably have a lot more code and I&#39;d have to hide it behind classes which require setup/teardown and tests are a good way of repeating that process in a consistent way.</p>
<p>The separation of state from behaviour in a functional language like Clojure combined with the dynamic nature of Clojure makes the practice of repeatedly editing little bits of that behaviour then sending state through that behaviour a stonkingly easy thing to do, so it&#39;s of course a happy path.</p>
<p>Once I&#39;ve done this, I clear the REPL and my job is done because...</p>
<h3>I would only throw those tests away anyway</h3>
<p>If I&#39;m doing TDD (which I rarely do because most enterprise code is so stupidly simple), I build up quite a suite of tests around  tiny pieces of understanding and can end up with a very feel-good number of tests that do very little but get in my way once written.</p>
<p>What generally happens is that I&#39;ll end up with very much an outside-in set of tests around the actual features/functionality and I&#39;ll delete all the tiny tests because their only purpose was to help build my understanding and my more functional tests are more about testing the final result.</p>
<p>I&#39;ve found that while writing my <a href="https://github.com/robashton/cravendb">database in Clojure</a>, that once I&#39;ve finished building up a set of functions around some state to get ma new version of that state, that writing a couple of tests around that whole set of functions that test maybe a positive and a negative case is a reasonable thing to do because I end up leaning on that test in the future when adding new features to prevent regressions against my overall functionality.</p>
<p>What also seems to be the case, is I can often just transplant the code I&#39;ve built up in the REPL into </p>
<ul>
<li>The code base</li>
<li>The tests</li>
</ul>
<p>And get that regression suite almost for free.</p>
<ul>
<li>I don&#39;t spend a lot of time fixing the regression suite because of internal structure changes as they&#39;re more dependent on the overall results than internal set-up.</li>
<li>They do save me a lot of time in regressions because I&#39;m discovering better ways to write my internals all the time and I&#39;m not always capable of keeping the whole system in my head when practising those better ways.</li>
<li>They <em>do</em> seem quite high in volume, but I&#39;ve not found that the line count in my tests is quite as indicative of bad code as it would be in the main code base (most of it is just descriptions of what the tests do rather than big chunks of code that I&#39;ll have to maintain.</li>
<li>Sometimes fixing an issue is just a matter of turning debug logging on and running a test, I like that as a result of <em>log all the things</em></li>
</ul>
<h3>I do have to be careful though</h3>
<p>It is difficult sometimes when I break functionality to not start falling into the trap of repeatedly running the tests and &quot;fixing&quot; things until the tests pass. I&#39;ve set a hard rule for myself for the moment that if I can&#39;t get the tests to pass with-in a couple of iterations that I have to drop back to the REPL and start exploring the problem from the inside-out.</p>
<p>This process helps ensure:</p>
<ul>
<li>The internals are still easy enough to use within a REPL</li>
<li>I still understand the internals (as a developer new to the project, this would be how they learned I guess)</li>
<li>I don&#39;t spend time shotgun debugging issues</li>
</ul>
<h3>Fin</h3>
<p>That&#39;s my process anyway, I&#39;ve enjoyed telling people I have 1500 lines of code in my tests and hearing that sharp in-take of breath at this conference, but of this project I have to say they&#39;re the bit I&#39;m least ashamed of. Some of my loops on the other hand....</p>
]]></description><link>http://codeofrob.com/entries/on-testing-and-the-repl-in-clojure.html</link><guid isPermaLink="true">http://codeofrob.com/entries/on-testing-and-the-repl-in-clojure.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 01 Oct 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Perception is fleeting, OSS in .NET]]></title><description><![CDATA[<p>Oh I see everybody is writing OSS in .NET blog posts again</p>
<p>  <img src="/img/yawn.gif"></p>
<p>On second thoughts, I cba - too busy <a href="http://github.com/robashton/cravendb">writing code on Github</a></p>
]]></description><link>http://codeofrob.com/entries/perception-is-fleeting,-oss-in-.net.html</link><guid isPermaLink="true">http://codeofrob.com/entries/perception-is-fleeting,-oss-in-.net.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 26 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[I worry too]]></title><description><![CDATA[<p>I have been asked (more than) a few times over the past year or so questions along the lines of</p>
<ul>
<li>How can you actually make a living without long term contracts</li>
<li>Don&#39;t you worry about not finding work?</li>
<li>What about failure? What if you find you&#39;re not good enough for a client?</li>
<li>Are you saving for your future? Don&#39;t you worry about that?</li>
</ul>
<p>And the list goes - a list of reasons why people would feel worried or stressed by being in my position at the moment, and you know what - these questions are pretty hard to deflect because...</p>
<h1>I do worry</h1>
<p>Oh I worry - I&#39;ve hedged my bets by lodging in a cheap room somewhere outside of London the past couple of months for a low amount of money, no deposit and no minimum term, I&#39;ve hedged my bets by not taking on anything too long term so I can always leave the country, I&#39;ve hedged my bets by making friends like a mad person in case somebody - anybody has some work to throw my way, but I still worry. I worry that I&#39;ve still not been able to open a bank account in the country where I am supposedly paying taxes and that means that the money I&#39;ve been earning is still a mysterious pool of which a pile belongs to the government but I&#39;m not able to work it out properly because it&#39;s intermingled between my company and myself.</p>
<p>I worry that I&#39;m not going to find enough work to pay for coffee <em>and</em> my rent, I worry that I&#39;m not going to be able to afford to follow through on my plans for next year (which is to go on holiday for a month or so again), I worry that I&#39;m not investing in my future, I worry that I&#39;m going to end up 60 and poor, I worry that I&#39;m not charging enough I worry that I&#39;m charging too much and I worry that I&#39;m not good enough to be doing what I am doing. I worry about the talk I&#39;m giving next and whether I&#39;m prepared enough for it, I worry that I&#39;m not even qualified to give that talk - I worry that when I open my mouth at a conference people are going to realise I&#39;m pretty much making it up as I go along as I don&#39;t know what I&#39;m doing.</p>
<p>I worry about all of these things and more - and I worry about them even more when people start listing off these things to me as a question because it reminds me of my worries - because after all, I&#39;m living life pretty much on the edge and I&#39;ve not really got the big name that would guarantee me lots of lucrative enterprise consulting contracts. I worry that I should be marketing myself more instead of spending my spare time writing code that nobody really cares about and I worry that I market too much and people are going to get fed up of me asking for work.</p>
<h1>I don&#39;t let it consume me</h1>
<p>So yes - I worry, it&#39;ll come as a surprise to people who are even close to me because I wear a cocky know-it-all no-bullshit arrogant aura of confidence everywhere I go, and that&#39;s a marketing tool too because nobody wants to hire a quiet passive guy who sits in the corner and doesn&#39;t feel as if he has any answers.</p>
<p>I don&#39;t let the worry consume me, I tell myself that there are safety nets and I tell myself that I can always get a real job if I really need to (and oh man, I worry about this too because that&#39;d be long term commitment to staying in one place for more than a few weeks and I get cabin fever really easy these days). But I tell myself that there are safety nets anyway because the worst thing that can happen is I take a real job except actually that&#39;s not the worst thing because the worst thing that could happen is that my field of software development collapses and I&#39;m left without a job - okay that&#39;s a pretty real worry but I don&#39;t let that consume me either because I have work for the next few weeks booked up at least and that&#39;ll keep the food in my mouth.</p>
<p>I don&#39;t let the worry consume me because things have a way of working themselves out if you throw your hands in the air and admit defeat and ask for help from people who already have their crap sorted out.</p>
<p>I don&#39;t let the worry consume me because I&#39;d prefer to be writing code and I can&#39;t write code when I worry so I write code to push the worry away and only let the worry in when I&#39;ve got a spare 30 minutes and there is no power in my laptop and I have nothing better to do.</p>
<p>I don&#39;t let the worry consume me because I&#39;ve spent many years now putting myself into worrying situations and things haven&#39;t fallen apart yet. </p>
<p>Worry has proven itself to give me nothing in return for the space in the head that I afford it, and by refusing to acknowledge it and just press on with what I <em>want</em> to do regardless I&#39;ve found that I can get along just fine.</p>
<p>But don&#39;t make the assumption that I don&#39;t worry and I&#39;m not scared - it&#39;s just the things I worry and fear are privileged white male software developer things to worry and fear and I&#39;m lucky to be doing what I&#39;m doing and getting away with it.</p>
]]></description><link>http://codeofrob.com/entries/i-worry-too.html</link><guid isPermaLink="true">http://codeofrob.com/entries/i-worry-too.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 25 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[An introduction to the OHD platform via REPL driven development]]></title><description><![CDATA[<p>As mentioned at the start of my little bit of Cascalog wandering, I&#39;ve asked <a href="https://www.mastodonc.com/">Mastodon C</a> to let me come and work with them for a couple of weeks in the assumption that they&#39;ll have some tasks I can get on and do and pick up information as I go along.</p>
<p>In preparation for this, I went through the Cascalog for the Impatient walkthrough (or at least the first 75%) while I was sat in a pub, and now I&#39;m at the office and finding out what I am going to be getting on with!</p>
<ul>
<li><a href="/entries/impatiently-learning-cascalog---part-1.html">For the impatient - Part 1</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-2.html">For the impatient - Part 2</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-3.html">For the impatient - Part 3</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-4.html">For the impatient - Part 4</a></li>
</ul>
<p>I&#39;ve been asked to look at the <a href="http://openhealthdata.cdehub.org/">CDEC Open Health Data Platform</a> which takes data from the <a href="http://www.hscic.gov.uk/">HSCIC</a> to work out a few things such as the cost to the health service for Diabetes, or breakdowns across regions for the costs/prevalence of diabetes.</p>
<p>It&#39;s a nice example of what can be done with <a href="https://github.com/nathanmarz/cascalog">Cascalog</a>, although diving into it can be daunting as you&#39;re immediately met with walls of Clojure that look like this</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title"><span class="built_in">defn</span></span> diabetes-spend-per-head-per-ccg-per-month <span class="collection">[gp-spend gp-prevalence]</span>
  <span class="list">(<span class="title">&lt;-</span> <span class="collection">[?ccg ?year ?month ?ccg-registered-patients ?ccg-diabetes-patients ?ccg-total-net-ingredient-cost ?spend-per-head]</span>
      <span class="list">(<span class="title">gp-spend</span> <span class="attribute">:&gt;</span> ?ccg ?practice ?year ?month ?gp-total-net-ingredient-cost)</span>
      <span class="list">(<span class="title">gp-prevalence</span> <span class="attribute">:&gt;</span> ?practice ?gp-name ?gp-registered-patients ?gp-diabetes-patients ?gp-prevalence)</span>
      <span class="list">(<span class="title">ops/sum</span> ?gp-registered-patients <span class="attribute">:&gt;</span> ?ccg-registered-patients)</span>
      <span class="list">(<span class="title">ops/sum</span> ?gp-diabetes-patients <span class="attribute">:&gt;</span> ?ccg-diabetes-patients)</span>
      <span class="list">(<span class="title">ops/sum</span> ?gp-total-net-ingredient-cost <span class="attribute">:&gt;</span> ?ccg-total-net-ingredient-cost)</span>
      <span class="list">(<span class="title">has-patients?</span> ?ccg-diabetes-patients)</span>
      <span class="list">(<span class="title">spend-per-head</span> ?ccg-total-net-ingredient-cost ?ccg-diabetes-patients <span class="attribute">:&gt;</span> ?spend-per-head)</span>)</span>)</span></code></pre>
<p>This actually makes sense if you&#39;re familiar with logic-based programming or have followed the impatient tutorial so I&#39;m relieved to be able to read through most of this code. If you&#39;ve not been doing this, or it&#39;s 8am and you don&#39;t do this for a living then seeing a codebase of this causes insteant headaches and nausea. An application of coffee later and it all makes sense.</p>
<p>I am however, on running it met with a couple of problems:</p>
<ul>
<li>Where is the data supposed to come from?</li>
<li>How do I run this stuff?</li>
</ul>
<h3>Repl driven development</h3>
<p>The way I&#39;ve been writing Clojure is via tests and a tight feedback loop built up around those tests. I have however been told on numerous occasions that I should be using the repl more and this codebase is an example of where the author is clearly a big fan of the repl!</p>
<p>There is also little automation in place for getting the data or executing the code because if you&#39;re familiar with the repl and you have the data already, then throwing code at the repl is the fastest way to put this together and that is what has been done.</p>
<p>So what does this look like? Littered through the codebase are paragraphs of Clojure that look like this:</p>
<pre><code class="lang-clojure">;; month,total_spend
#_ (?- (hfs-delimited &quot;./output/diabetes-total-spend-per-month-england&quot; :delimiter &quot;,&quot; :sinkmode :replace)
       (total-spend-per-month-england
        (diabetes-spend-per-ccg-per-month
         (diabetes-drugs
          (prescriptions/gp-prescriptions
           (hfs-delimited &quot;./input/prescriptions/pdpi&quot; :delimiter &quot;,&quot;))
          (ods/current-practices (hfs-delimited &quot;./input/ods/gppractice/epraccur.csv&quot; :delimiter &quot;,&quot;))))))</code></pre>
<p>See that <em>#_</em> stuff? That&#39;s a comment which means this code isn&#39;t compiled at all normally, but it&#39;s there so a hardy Emacs user can just execute the code by sending it from the editor to the Repl.</p>
<p><strong>I&#39;m a vim user, get me out of here</strong></p>
<p>So there&#39;s that.  Thankfully, a few people have written plug-ins to make Clojure development a bit more dreamy in Vim and a good starting point is the <a href="https://github.com/ctford/vim-fireplace-easy/">vim-fireplace-easy</a> repository put together by <a href="https://twitter.com/ctford">@ctford</a> which brings together a few plug-ins.</p>
<p><em>vim-fireplace</em></p>
<p>Vim-fireplace means that I get handy short-cuts for sending code to the repl for execution, I simply fire up a repl in one terminal, and vim in another terminal and then sticking my cursor over an expression and typing &#39;cpp&#39; means that expression being evaluated in that repl.</p>
<pre><code>  <span class="list">(<span class="title">+</span><span class="body"> <span class="number">4</span> <span class="number">5</span>)</span></span></code></pre>
<p>So, sending this to the repl would mean I&#39;d be given the answer &#39;9&#39;, or putting the cursor over the big expression above would result in a query being sent through Cascalog.</p>
<p><em>vim-clojure-static</em></p>
<p>This just brings in lots of good behaviour when dealing with braces/highlighting/etc - a must for any developer witing clojure in vim.</p>
<p><em>paredit</em></p>
<p>This will automatically force my parens to be balanced, as well as vectors, sets and double quotes - it also brings in handy keyboard shortcuts such as (LEADER+W) for surrounding my current selection with parens, or (LEADER+w &quot;) to surround it with double quotes.</p>
<h3>Doing it their way</h3>
<p>So, over the next few days I&#39;m going to do it <em>their</em> way, by building up a program bit by bit and sending it to the repl for evaluation. </p>
<p>In the next entry, I&#39;ll look at my task and how I start going about it.</p>
]]></description><link>http://codeofrob.com/entries/an-introduction-to-the-ohd-platform-via-repl-driven-development.html</link><guid isPermaLink="true">http://codeofrob.com/entries/an-introduction-to-the-ohd-platform-via-repl-driven-development.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 24 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[A Rob Update - A busy few months]]></title><description><![CDATA[<p>I asked for short-term work, and people responded and the past couple of months have found me doing quite a bit of work in C# and JavaScript, as well as throwing together a puppet set-up for a client (with a vagrant dev environment), and spending a couple of weeks at a data analytics company learning Cascalog and building some pretty charts. (As well as delivering a few conference talks)</p>
<p>It has been a great few months, and as we near the end of September I find myself with a few surprising findings:</p>
<p><strong>I actually quite like working in an office</strong></p>
<p>While I strongly desire the <em>freedom</em> to work from coffee shops (especially on those mornings where I just want to put my head down and throw some code at the laptop), when given this freedom I&#39;ve actually ended up going into the client offices on a regular basis. I enjoy joking with people, drinking coffee with people and making friends with the team.</p>
<p>This has definitely made <em>me</em> feel a bit more flexible with regards to the kind of client work I&#39;m happy to pick up.</p>
<p><strong>two weeks isn&#39;t always enough</strong></p>
<p>I&#39;ve been quite strict about taking work from clients that we keep it to very short term sprints of two weeks, with the idea that</p>
<ul>
<li>It encourages focus from the client - <em>what do you actually want from me?</em></li>
<li>It encourages focus from me - <em>I must ship it</em></li>
<li>It allows for me to get involved with a bigger variety of teams/technologies/products</li>
</ul>
<p>That said, I feel as if I left a bit of a trail behind me at one of my clients when I handed over what I&#39;d done but hadn&#39;t spent sufficient time (with a very busy team) making sure everybody understood what I had done, how far I was through it and what work was still remaining.</p>
<p>I feel as if I should be more flexible about this and under the right circumstances I think I&#39;ll be happy to take on a greater duration of work providing the reasons for this are clearly discussed.</p>
<p><strong>Folk only get fragments of my opinion over the internet</strong></p>
<p>Folk! While I might rant about Angular/KO/Ember/etc not being <em>necessary</em>, and definitely advocate the use of small libraries over all-encompassing frameworks, I&#39;m still <em>happy to work with these technologies</em>.</p>
<p>The number of people/potential clients who I have had this conversation with has genuinely surprised me and made me realise I need to tone it down a little bit when on this subject or any other for that matter. &quot;<em>Oh, we have work but it&#39;s AngularJS so will you actually like it?</em>&quot; - I&#39;m actually pretty pragmatic about this subject and will <em>always</em> defer to the team when I&#39;m project hopping because it would be unfair for me force them into doing something unfamiliar and then fly away again!</p>
<p><strong>I really enjoy learning</strong></p>
<p>While I&#39;ve always learned stuff through the projects I persue both in and outside of work, it has never been an actual <em>goal</em> to learn anything. However - I&#39;ve really started actively trying to learn Clojure/functional programming and during my time at Mastodon realised that some basic stats knowledge might go a long way in the industries in which the technologies I&#39;m enjoying at present.</p>
<p>So, I&#39;ve signed up to the Coursera Statistics One course for the next few months and intend on following that through. It&#39;s an exciting notion that I can just click a button on the internet and then be attached to an online learning course in which I&#39;ll be taught new skills.</p>
<p><strong>Where am I going with this</strong></p>
<p>Well, I&#39;ve got a few months now until the end of the year, and I&#39;m really enjoying doing what I&#39;m doing and I feel as if I&#39;m delivering real value to the clients I&#39;ve worked with so far. I want to plan out some work between now and the new year holidays that doesn&#39;t get in the way of my learning (statistics/clojure) and allows me to deliver some awesome things for people.</p>
<p>I think I&#39;d be happy to take on some longer term stuff (up to 6 weeks) for the right people, so please do get in touch if you have something. (Anywhere in Europe is good, I&#39;m also thinking I wouldn&#39;t mind getting out of London/England for a little bit too).</p>
<p>My hiring details can be found on my <a href="/hire.html">availability page</a>, just drop me an email at <a href="mailto:robashton@codeofrob.com">robashton@codeofrob.com</a> and we&#39;ll see what we can do together.</p>
]]></description><link>http://codeofrob.com/entries/a-rob-update---a-busy-few-months.html</link><guid isPermaLink="true">http://codeofrob.com/entries/a-rob-update---a-busy-few-months.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 23 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Impatiently learning Cascalog - Part 4]]></title><description><![CDATA[<p>I&#39;m on Part 4 of Cascalog for the Impatient and I&#39;ve learned</p>
<ul>
<li>I still don&#39;t enjoy the JVM that much</li>
<li>How to use generators and sinks </li>
<li>What the <em>?&lt;-</em> and <em>&lt;-</em> thingies do (roughly)</li>
<li>How to define map operations</li>
<li>How to use vanilla Clojure to clean stuff up</li>
</ul>
<p>Great, so this is where we are.</p>
<ul>
<li><a href="/entries/impatiently-learning-cascalog---part-1.html">Part 1</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-2.html">Part 2</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-3.html">Part 3</a></li>
</ul>
<p>I&#39;ve opened up the source for part4 and it is doing something a bit different so I guess I should be a little less impatient and have a look at the tutorial to see what I&#39;m looking at...</p>
<pre><code>Today's lesson takes <span class="keyword">that</span> same Word Count app <span class="keyword">and</span> expands <span class="function_start"><span class="keyword">on</span> <span class="title">it</span></span> <span class="keyword">to</span> implement a stop <span class="property">words</span> filter.</code></pre>
<p>There is some waffle about the TF-IDF algorithm doing some of this for us, but we might want to do it ourselves because of swear-words. I suppose I should go and read about TD-IDF at some point but for now I&#39;m going to move on with this Cascalog stuff and accept that stuff exists and I don&#39;t know about it yet.</p>
<h1>Left join</h1>
<p>Feasibly we could write a custom filter method and check if a word is valid, but that&#39;s going to be a bit of a ball-ache. So, we&#39;re told that we&#39;re doing a left-join between the two sets of data.</p>
<p>That&#39;s an interesting notion to me because we&#39;re in the world of Map/Reduce and that&#39;s not something I&#39;m used to reading in this world.</p>
<p>So how does this work?</p>
<pre><code class="lang-clojure">  <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="collection">[rain <span class="list">(<span class="title">hfs-delimited</span> in <span class="attribute">:skip-header?</span> <span class="literal">true</span>)</span>
        stop <span class="list">(<span class="title">hfs-delimited</span> stop <span class="attribute">:skip-header?</span> <span class="literal">true</span>)</span>]</span></code></pre>
<p>Unlike  in the previous codes, rather than simply invoke the generator with the variables, we stick it in a let block alongside another generator containing stop words.</p>
<p>At this point in my mind I&#39;m viewing them as two tables of data, ripe for <em>doing stuff with</em>.</p>
<p>The next line we start going about things the way we&#39;re used to</p>
<pre><code class="lang-clojure">    <span class="list">(<span class="title">?&lt;-</span> <span class="list">(<span class="title">hfs-delimited</span> out)</span>
         <span class="collection">[?word ?count]</span></code></pre>
<p>So we&#39;re sinking words and counts into the destination file again - that&#39;s cool.</p>
<p>We then invoke the rain generator and tidy it up like in the past two examples</p>
<pre><code class="lang-clojure">    (rain _ ?line)
    (split ?line :&gt; ?word-dirty)
    ((c/comp s/trim s/lower-case) ?word-dirty :&gt; ?word)</code></pre>
<p>I can&#39;t really see why we wouldn&#39;t just write this with the generator inline like this</p>
<pre><code class="lang-clojure">    ((hfs-delimited in :skip-header? true) _ ?line)
    (split ?line :&gt; ?word-dirty)
    ((c/comp s/trim s/lower-case) ?word-dirty :&gt; ?word)</code></pre>
<p>Other than I guess declaring the generators at the top just makes it clear to the reader where our data is coming from.</p>
<p>The interesting bit is where we then invoke the stop word generator wit hteh word that we have</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title">stop</span> ?word <span class="attribute">:&gt;</span> <span class="literal">false</span>)</span></code></pre>
<p>Well wow, I&#39;m not really sure what I&#39;m looking at here at all, I guess there is some more magic going on where it knows I&#39;ve used the <em>?word</em> as a field and it can work out that I want to do a join on these two things based on that. I&#39;m mapping the result of this to &#39;false&#39; which I assume means <em>I don&#39;t want that crap if it returns something</em>.</p>
<p>The major difference between the files I&#39;m looking at here (the stop file, and the rain file) is that the rain file has two columns and the stop file has one column so it has to just be the fact that I used the same name here that made the magic happen.</p>
<p>I don&#39;t find any of this intuitive - but I can take it at face value once more and accept that it works if I do it this way. My urge to go and see how this stuff is implemented is growing and there are only two more stages of this tutorial left for me to follow.</p>
<p>The complete query looks like this by the way</p>
<pre><code class="lang-clojure">(defn -main [in out stop &amp; args]
  (let [rain (hfs-delimited in :skip-header? true)
        stop (hfs-delimited stop :skip-header? true)]
    (?&lt;- (hfs-delimited out)
         [?word ?count]
         (rain _ ?line)
         (split ?line :&gt; ?word-dirty)
         ((c/comp s/trim s/lower-case) ?word-dirty :&gt; ?word)
         (stop ?word :&gt; false)
         (c/count ?count))))</code></pre>
<p>Running the demo with</p>
<pre><code>~/build/hadoop-<span class="number">1.2</span><span class="number">.1</span>/bin/hadoop jar target/impatient.jar <span class="typedef"><span class="keyword">data</span>/rain.txt output/wc <span class="keyword">data</span>/en.stop</span></code></pre>
<p>Seems to yield in a sensible word count being generated like so</p>
<pre><code><span class="title">air</span>             <span class="number">1</span>
<span class="title">area</span>            <span class="number">4</span>
<span class="title">australia</span>       <span class="number">1</span>
<span class="title">broken</span>          <span class="number">1</span>
<span class="title">california's</span>    <span class="number">1</span>
<span class="title">cause</span>           <span class="number">1</span></code></pre>
<p>etc</p>
<p>So, I guess the lesson here is that you can do joins between generators by using the same field name when running them. Neato.</p>
<p>At this point I have to go away for the weekend to get drunk in a field, so I&#39;ll have to skip the rest of the tutorial and start work on something real at the Mastodon C office.</p>
]]></description><link>http://codeofrob.com/entries/impatiently-learning-cascalog---part-4.html</link><guid isPermaLink="true">http://codeofrob.com/entries/impatiently-learning-cascalog---part-4.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 17 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Impatiently learning Cascalog - Part 3]]></title><description><![CDATA[<p>Onwards to Part 3 of the Cascalog for the Impatient tutorial, now my JVM appears to be behaving itself and I&#39;m able to run the examples again.</p>
<ul>
<li><a href="/entries/impatiently-learning-cascalog---part-1.html">Part 1</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-2.html">Part 2</a></li>
</ul>
<p>Part 3 seems to be pretty simple, adding a custom function to scrub text - written in a style I can actually understand thanks to the Clojure I&#39;ve written so far.</p>
<pre><code class="lang-clojure">(defn scrub-text [s]
  &quot;trim open whitespaces and lower case&quot;
  ((comp s/trim s/lower-case) s))</code></pre>
<p>The main point of this step of the guide seems to be about data sanitisation, and why you would use custom functions to do that - rather than anything new relating specifically to Cascalog.</p>
<p>Being able to use vanilla Clojure functions to manipulate data comes with some benefits, the main one being that we can test this stuff independently and then import it into the Cascalog query where we know at least that bit works. </p>
<p>This is pretty important because tidying up edge cases is generally a rather iterative process and you want the feedback loop to be fast (I can get behind that notion)</p>
<p>This is used in the following manner</p>
<pre><code class="lang-clojure">(defn -main [in out &amp; args]
  (?&lt;- (hfs-delimited out)
       [?word ?count]
       ((hfs-delimited in :skip-header? true) _ ?line)
       (split ?line :&gt; ?word-dirty)
       (scrub-text ?word-dirty :&gt; ?word)
       (c/count ?count)))</code></pre>
<p>In this query, it&#39;s just another step - where we call the function with the output of the split function (which is <em>?word-dirty</em>), and then output the result of that as <em>?word</em></p>
<p>This is starting to make sense now, and it no longer looks like vomit when I read it. I&#39;d like to see what is going on under the hood to satisfy my curiosity but that can wait until I&#39;ve finished the tutorial.</p>
<p>Onwards to Part 4...</p>
]]></description><link>http://codeofrob.com/entries/impatiently-learning-cascalog---part-3.html</link><guid isPermaLink="true">http://codeofrob.com/entries/impatiently-learning-cascalog---part-3.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 12 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Impatiently learning Cascalog - Part 2]]></title><description><![CDATA[<p>I&#39;m skimming through Cascalog for the Impatient and documenting my questions/learnings as I go for my future benefit.</p>
<ul>
<li><a href="/entries/impatiently-learning-cascalog---part-1.html">Part 1</a></li>
</ul>
<h1>Part 2</h1>
<p>Apparently in this part we&#39;re going to update our first code so as to count the words in our document and that&#39;s the first step towards implementing a <a href="http://en.wikipedia.org/wiki/Tf*idf">tf-idf</a> implementation - cool story bro, I have no idea what one of those is but moving on.</p>
<p>I quite like the explanation given at the beginning of the article for why it&#39;s important that we be able to copy data from one place to another, and why we&#39;d use Cascalog for this. Basically we&#39;re talking about being able to make guarantees about this operation and that&#39;s going to be important when we&#39;re trying to write logic on top of this process.</p>
<p>So anyway, we&#39;re given the following code</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title">defmapcatop</span> split <span class="collection">[line]</span>
  <span class="string">"reads in a line of string and splits it by regex"</span>
    <span class="list">(<span class="title">s/split</span> line #<span class="string">"[\[\]\\(\),.)\s]+"</span>)</span>)</span></code></pre>
<p>I guess that &#39;defmapcatop&#39; is a macro for defining map operations, and this appears to be splitting a line by whitespace.</p>
<p>Googling this doesn&#39;t appear to yield in the documentation, which is a bit unfortunate - but a bit of rummaging around finds a handy page for <a href="http://entxtech.blogspot.co.uk/2010/12/which-operation-def-macro-should-i-use.html">&quot;which def should I use&quot;</a>  which suggests that I&#39;m on the right track with that line of thought.</p>
<p>Okay, so we can move on from this pretty swiftly and see how we&#39;re going to use this</p>
<pre><code class="lang-clojure">(defn -main [in out &amp; args]
  (?&lt;- (hfs-delimited out)
       [?word ?count]
       ((hfs-delimited in :skip-header? true) _ ?line)
       (split ?line :&gt; ?word)
       (c/count ?count)))</code></pre>
<p>Well, I have to say I can barely read this - my Clojure-fu is not strong when mixed with the Cascalog.</p>
<p>But, we can see</p>
<ul>
<li>We&#39;re using the (?&lt;- thingy again, so we&#39;re running this query now</li>
<li>We&#39;re &#39;sinking&#39; our output, whatever that is to the &#39;out&#39; path</li>
<li>This time, we&#39;re outputting the variables &quot;word&quot; and &quot;count&quot;</li>
<li>We&#39;re reading in from &#39;in&#39;, to the variables &#39;_&#39; and &#39;?line&#39;</li>
<li>I guess we&#39;re using &#39;_&#39; because we&#39;re ignoring that</li>
<li>We split the line into the ?word variable</li>
<li>The :&gt; thingy seems to be a bit of magic to do that</li>
<li>And then we count that into the ?count variable</li>
</ul>
<p>I am mega-confused reading this because I can&#39;t actually tell how it maps to what I know about Clojure/Lisp.</p>
<ul>
<li>It&#39;s weird because our output is on top, and takes in the variables ?word and ?count which aren&#39;t defined yet</li>
<li>That&#39;s weird because despite the output at the top, our predicates are written in the order they&#39;re going to be run</li>
<li>It&#39;s weird because of that :&gt; thingy</li>
</ul>
<p>The way I understand the documentation is that Cascalog looks at the dependencies of each predicate and only runs them when they have been fulfilled. I guess the &#39;sink&#39; relies on ?word and ?count being available and isn&#39;t run until they are or something like that.</p>
<p>This is neatly explained by the Cascalog for the Impatient guide in terms of the &quot;logic programming&quot; paradigm so I&#39;ll accept that for now.</p>
<p>I suspect that the <em>(?&lt;-</em> thingy is actually a macro of some sort that re-writes this into something more sane, but who knows right?</p>
<p>Running this with</p>
<pre><code><span class="title">lein</span> uberjar
<span class="title">hadoop</span> jar ./target/impatient.jar <span class="typedef"><span class="keyword">data</span>/rain.txt output/wc</span></code></pre>
<p>Gives me a wonderful &quot;out of memory exception&quot;, so I post a dump on the mailing list and have a look at my environment.</p>
<p>Things I tried while I waited for a response</p>
<ul>
<li>Re-install the hadoop package (1.2.1) but the x64 version</li>
<li>Edit the configuration files to force 2048mb of heap size</li>
<li>Clear my hadoop installation again</li>
<li>Download the raw tar.gz for hadoop</li>
<li>Configure that</li>
<li>Run that: Success</li>
<li>Run it again, failure</li>
<li>Restart laptop for the fifth time</li>
<li>Everything works, QUICK DON&#39;T TOUCH IT ANY FURTHER</li>
<li>TLDR: I <em>still</em> really hate the JVM, or it hates me - whatever</li>
</ul>
<p>Side note: The project pages for Hadoop are <em>awful</em>, I had to go through a dozen links before I got to download anything - it felt like it was <em>trying</em> to make me feel stupid, but oh well - carrying on.</p>
<p>The real output?</p>
<pre><code><span class="title">A</span>    <span class="number">3</span>
Australia    <span class="number">1</span>
Broken    <span class="number">1</span>
California<span class="string">'s    1
DVD    1
Death    1
Land    1
Secrets    1
This    2
Two    1
Valley    1</code></pre>
<p>Etc - so I&#39;m happy enough with that.</p>
<p>I&#39;m still not <em>that</em> happy with the crazy syntax of the Clojure, I&#39;m grabbing at it and going with the rolling assumption that the logic-like-system is just a bunch of macros on top of vanilla Clojure and &quot;just works&quot;, so &quot;shut up and carry on Rob&quot;.</p>
<p>Onto part 3 then...</p>
]]></description><link>http://codeofrob.com/entries/impatiently-learning-cascalog---part-2.html</link><guid isPermaLink="true">http://codeofrob.com/entries/impatiently-learning-cascalog---part-2.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 10 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[The use of Clojure in the CDEC Open Health Data Platform]]></title><description><![CDATA[<p>I&#39;m currently at <a href="https://www.mastodonc.com/">Mastodon C</a> where I am learning new stuff, both for the pleasure of learning and also to pick up skills that will be useful to my clients in the future - I am also blogging about this in a series which has entries queued up for the next few weeks.</p>
<p>As part of my time here, I am contributing work to the <a href="http://openhealthdata.cdehub.org/">CDEC Open Health Data Platform</a>, and came across a blog entry which suggested that the use of <a href="https://cde.catapult.org.uk/blogviews/-/asset_publisher/XwNC0wXN7ru2/blog/a-taste-of-things-to-come-so-how-do-we-write-our-own-recipes-?redirect=https://cde.catapult.org.uk/blogviews%3Fp_p_id%3D101_INSTANCE_XwNC0wXN7ru2%26p_p_lifecycle%3D0%26p_p_state%3Dnormal%26p_p_mode%3Dview%26p_p_col_id%3Dcolumn-2%26p_p_col_count%3D2">Clojure for this platform was a bad fit for a number of reasons</a>.</p>
<p>So, putting the queued up blog entries to one side, and posting out of phase halfway through my work here I wish to respond to the article, based on my own experiences and interpretation of the project. (<em>I am not speaking for Mastodon, as any regular reader will know my words are always my own and I can&#39;t write things any other way!</em>)</p>
<h3>The industry lacks the experience required to contribute to the CDEC platform</h3>
<p>This is the primary assertion made to question the use of Clojure in this platform. It is made off the back of a number of searches being made on <a href="http://indeed.co.uk">indeed.co.uk</a>, which resulted in less than a 1% hit rate for that technology. </p>
<p>I am always uncomfortable when people classify developers or themselves as either &quot;Java developers&quot; or &quot;C# developers&quot; as if the years of experience they have in those areas aren&#39;t going to help when moving to other platforms.  I&#39;ve feel that it massively undervalues their actual experience to qualify it with a single attribute in that way.</p>
<p>This feels like an extension of that somehow, because it fails to take into account people&#39;s abilility to learn new things based on previous experience.</p>
<p><em>My own experience with Clojure/Cascalog</em></p>
<p> <img src="/img/map.png" class="pull-left"></p>
<p>I am reluctant to draw on my own anecdotal experience because it&#39;s very easy to dismiss such things, but I wish to make the point that I am exactly the sort of person that will be found looking for .NET development jobs on a site like indeed.co.uk. I am the person who (used to) have a LinkedIn account littered with key-words for .NET and JavaScript and nothing else.</p>
<p>My own experience is as such that I don&#39;t have any experience on the JVM (the runtime on which Clojure is built on), I&#39;ve never looked at Hadoop in my life and I spent a few evenings trying to write Clojure in order to learn it before making the leap to attempting to contribute to the Open Health Data Platform. In essence, I am one of the least qualified people (going on sites like LinkedIn/Indeed) to be working on this platform.</p>
<p>Within a few days I feel as if I&#39;ve made substantial progress being able to find the data sets, process them through cascalog, aggregate and join various aspects of this data and generate some meaningful results off of this.  (See image to the left). The information available on the internet on the subject is plentiful, freely open and the community is welcoming of questions about how to work on things.</p>
<p><em>The intern&#39;s experience with Cascalog and Clojure</em></p>
<p>I am not the first to tread down this path either, before me was <a href="https://twitter.com/AnnaPawlicka">Anna Pawlicka</a>, who wrote a <a href="https://github.com/CDECatapult/cdec.openhealthdata/contributors">large amount of code</a> in the current codebase as part of her internship at Mastodon.</p>
<p>The code works great, and she <a href="http://annapawlicka.com/the-end-of-summer-the-end-of-internship-the-end-of-awesome/">wrote an entry of her own experiences</a>. Although I have not spoken to Anna, her experiences seem to mirror my own in terms of getting working productively in this environment for the first time.</p>
<p><em>Experience is more than just key-words</em></p>
<p>While this evidence <em>is</em> only anecdotal; it maps cleanly onto what I have learned in my years of software development - that developers can learn new things when necessary and that the choice of a very good technology shouldn&#39;t be overlooked because folk don&#39;t have it on their CV yet.</p>
<h3>The need for a higher level of abstraction</h3>
<p>This is another closing point made in the original blog entry, that the current stack itself is too low level for the majority of the R&amp;D community to be getting involved with.</p>
<p>I&#39;d be wary of such endevours because most of my enterprise experience has been about striving for higher levels of abstraction in order that the majority of some community can get involved with a product or business intelligence efforts. Invariably this has taken place in environments where the vast majority of the actual users are competent Excel users, and we end up replacing a powerful tool (Excel) with some less powerful and less flexible replica of excel written in a costly platform.</p>
<p>Far better in my opinion to be bringing the researchers with the training and the developers with the experience together in order to create knowledge, rather than spend time trying to create potentially costly abstraction.</p>
<p>While I am not saying that some level of automation or workflow assistance aren&#39;t ultimately desirable, It would be remiss of the project coordinators to let this desire override the basic need for the power to ask the questions that are needed over the top of the data provided.</p>
<p>The thing about data, is that the questions we want to ask tend to be very different across different data sets, and we tend to be better off looking at how other people have solved similar problems and re-implementing these approaches for the specific domain under question.</p>
<p>Cascalog seems to be a perfect level of abstraction for dealing with these data-sets, with enough power to do anything wanted and enough magic to hide the technological problems away from the developer. </p>
<h3>In closing</h3>
<p>I am excited about the Open Health Data Platform and its purpose, and I am excited about the technology being used.</p>
<p>Like the original author, I am also excited about the way in which this project is being developed in the open and pushed out on regular intervals forfeedback such as that.</p>
<p>I have four more days left at Mastodon (out of a total of 5 so far), and hopefully I can contribute many more examples to the project between now and then to help other people follow in these footsteps in the future!</p>
]]></description><link>http://codeofrob.com/entries/the-use-of-clojure-in-the-cdec-open-health-data-platform.html</link><guid isPermaLink="true">http://codeofrob.com/entries/the-use-of-clojure-in-the-cdec-open-health-data-platform.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 09 Sep 2013 09:30:00 GMT</pubDate></item></channel></rss>