<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><generator>NodeJS RSS Module</generator><lastBuildDate>Thu, 06 Dec 2012 17:02:35 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><item><title><![CDATA[I am not looking for a job]]></title><description><![CDATA[<p>After a productive weekend in Vilnius at the &quot;We Actually Build Stuff&quot; conference, I came back to the client I have been spending most of my time with in Belgium these past two years feeling a bit despondent.</p>

<p>Why was I still there? I had already made my intent clear a month ago - that after this contract expired I wasn&#39;t going to renew, I had saved enough money to survive for a year if need be, I was not exactly enjoying what I was doing (for many of the standard self-defeating enterprise issues) and as one of my friends put it &quot;Staying just to save some extra cash just seems like a stupid idea if you&#39;re not enjoying it&quot;</p>

<p>So I went in, found myself unable to function any more and decided to expediate the process of leaving, kindly they came to an agreement and I was able to head off providing I reply to a few e-mails :-).</p>

<p>Many folk have already offered that I come and take a job with them, and while their hearts are in the right place, I wish to make it known that this is not what I want to do for the next couple of years.</p>

<ul><li>I want to do something meaningful</li><li>I want to work with smart people</li><li>I want to focus on creating value</li><li>I want to build stuff</li><li>I want to help other people build stuff</li></ul>

<p>I actually have some semi-concrete plans next year that will make all of this happen, this will take a few months to put into place though and in the meanwhile I have an offer for YOU, if you are interested and feeling brave.</p>

<p>I am offering the following two things</p>

<p><strong>I will come and spend a few days (1-2 weeks) at your workplace (in Europe), building stuff for expenses and a roof over my head</strong></p>

<p>Seriously, I don&#39;t have much to do (I have a few paid commitments which will take priority, but other than that plenty of time) and I want to help you Build Stuff, for FREE. </p>

<p>Of course you are perfectly welcome to toss me a few euros for my time as well, but whatever, money is not important for the next few months at least.</p>

<p>I can help you with your Javascripts, your .NETs and your NoSqls, I am especially interested in helping teams who are <em>new</em> to JS get to grips with it quickly, I am very intersted in discussing difficult migration paths from legacy code (such as Silverlight for example).</p>

<p><strong>I will cook you a curry for a roof over my head</strong></p>

<p>Coupled with the first offer, if you&#39;re the developer putting me up then I&#39;ll cook you a curry, I&#39;m pretty practised at this and can tailor this to your tastes if asked - this is a serious offer, I love cooking and I love coding - what is better than combining the two.</p>

<p>Anyway, if either of these appeal to you, get in touch at <a href="mailto:robashton@codeofrob.com">robashton@codeofrob.com</a> or twitter <a href="http://twitter.com/robashton">@robashton</a></p>]]></description><link>http://codeofrob.com/entries/i-am-not-looking-for-a-job.html</link><guid isPermaLink="true">http://codeofrob.com/entries/i-am-not-looking-for-a-job.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 11 Dec 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[Learn Functional Programming With Me - Attributes And Vectors]]></title><description><![CDATA[<p>So last time I left the program, I had a black square which moved across the page but left a delightful black smear across the window, it looked something like this:</p>

<p><img alt="Black smear" src="/img/blackline.png"/></p>

<p>I promised I&#39;d add keyboard input this time around, and I don&#39;t like to lie - so while I sit here at my client&#39;s rather amazing karting day I&#39;ve decided to give adding this a go as I don&#39;t really like karting that much ;-).</p>

<p>First things first, I need to clear my screen in between frames or I&#39;m going to keep on having an ugly black smear instead of a moving black square, in JS this would look like.</p>

<pre><code>context.clearRect(0, 0, width, height);</code></pre>

<p></p>

<p>Not rocket science, right?</p>

<p>Well, right now, I have the function for drawing a square, which gets the context and draws a square, this looks like</p>

<pre><code>(defn drawSquare [x y w h]</code></pre>

<p>
      (let [target (.getElementById js/document &quot;target&quot;)
            context (.getContext target &quot;2d&quot;)]
        (.fillRect context x y w h)
      )
    )</p>

<p>Great, but in order to have the moving square, I&#39;m going need that context more than once, and making multiple requests to get the context is a bad idea because it means lots of calls to the DOM (slow).</p>

<p>Clearly this means I&#39;m going to need three functions for my purposes:</p>

<pre><code>(defn clearScreen [ctx]</code></pre>

<p>
      (.clearRect ctx 0 0 WIDTH HEIGHT)
    )</p>

<pre><code>(defn drawRect [ctx x y w h]</code></pre>

<p>
      (.fillRect ctx x y w h)
    )</p>

<pre><code>(defn context []</code></pre>

<p>
      (let [target (.getElementById js/document &quot;target&quot;)]
      (.getContext target &quot;2d&quot;))
    )</p>

<p>Meaning I can do</p>

<pre><code>(defn drawScene [x]</code></pre>

<p>
      (let [ctx (context)]
        (clearScreen ctx)
        (drawRect x 0 100 100)
      )
    )</p>

<p>Now, you&#39;ll have noticed (if you&#39;re actually paying attention), that I have a &#39;Width&#39; and &#39;Height&#39; parameter for clearScreen that I haven&#39;t bothered trying to filter - that&#39;s because they&#39;re attributes of the Canvas Element and I need to get the darned things from that element and I haven&#39;t worked out a clean way of passing these things around (or retrieving them all from a function so I have the values present at that time. (Remember that I am trying to avoid global state, and as far as I know I haven&#39;t got &quot;Types&quot; for storing collections of data in.</p>

<p>Okay - so first things first, how do I get attributes from an HTML element? HTML elements? Attributes? These aren&#39;t Clojure concepts - I can do a quick Google and see that this is possible:</p>

<pre><code>(. target -width)</code></pre>

<p></p>

<p>According to the Wiki on Clojurescript, this is just part of the &quot;host interop&quot; featureset - I&#39;m not entirely sure how this maps to typical Clojure.</p>

<p>Now - this still means I have the problem of how to get these out of a function, in JS I&#39;d probably have something like</p>

<pre><code>var Rendering = function(element) {</code></pre>

<p>
      this.context = element.getContext(&#39;2d&#39;);
      this.width = element.width;
      this.height = element.height;
    }</p>

<p>Or something trite like that (see my other canvas codes in Github for what this actually looks like).</p>

<p>Can&#39;t do this here as far as I know, turns out I can return a vector, or a list or a set or something from a function (duh), so I can do something like</p>

<pre><code>(defn context []</code></pre>

<p>
      (let [target (.getElementById js/document &quot;target&quot;)
        [
          (.getContext target &quot;2d&quot;)
          (. target -width)
          (. target -height)
        ]
      )
    )</p>

<p>Which will return a vector containing</p>

<pre><code>[context width height]</code></pre>

<p></p>

<p>I can pass this into my clearRect function for example with</p>

<pre><code>(defn drawScene [x]</code></pre>

<p>
      (let [ctx (context)]
        (clearScreen ctx)
        (drawRect x 0 100 100)
      )
    )</p>

<p>So nothing different here, but I&#39;ll need to unpack that vector in order to use it</p>

<pre><code>(defn clearScreen [ctx]</code></pre>

<p>
      (let [[context width height] ctx
        (.clearRect context 0 0 width height)
      )
    )</p>

<p>Which is a bit verbose, or doing a bit of research it appears I can automatically unpack that vector when I call the function ala</p>

<pre><code>(defn clearScreen [[context width height]]</code></pre>

<p>
      (.clearRect context 0 0 width height)
    )</p>

<p>I&#39;m not entirely sure how I feel about this, I&#39;m just passing blobs of data around and assuming their structure in my functions - does Clojure have any inference over this stuff for verifiability (I&#39;m not sure) - seems I&#39;m losing a lot of the safety I&#39;d have with OO constructs (regardless of type safety or whatever).</p>

<p>Either way, my complete program currently looks like this:</p>

<pre><code>(ns game)</code></pre>

<p></p>

<pre><code>(defn context []</code></pre>

<p>
      (let [target (.getElementById js/document &quot;target&quot;)]
        [
          (.getContext target &quot;2d&quot;) 
          (. target -width)
          (. target -height)
        ]
      )
    )</p>

<pre><code>(defn clearScreen [[ctx width height]]</code></pre>

<p>
      (set! (. ctx -fillStyle) &quot;#FFF&quot;)
      (.clearRect ctx 0 0 width height) 
    )</p>

<pre><code>(defn drawSquare [[ctx width height] x y w h]</code></pre>

<p>
      (set! (. ctx -fillStyle) &quot;#000&quot;)
      (.fillRect ctx x y w h) 
    )</p>

<pre><code>(defn tick [x]</code></pre>

<p>
      (let [ctx (context)] 
        (clearScreen ctx) 
        (drawSquare ctx x 0 100 100)  
        (if (&lt;= x 1000) 
          (js/setTimeout (fn []
            (tick (inc x)) 
          ) 33  )
        )
      )
    )</p>

<pre><code>(defn ^:export init []</code></pre>

<p>
      (tick 0) 
    )</p>

<p>This has the effect of drawing a square, clearing the rect and drawing the square again, which means my square floats across the screen.</p>

<p>Seems I&#39;ve once again run out of room to talk about input to this program from the keyboard, hopefully I&#39;ll reach that next entry!</p>

<p>I still have some pending questions from these two entries:</p>

<ul><li>The recursive setTimeout with the anonymous closure?</li><li>Passing that vector around - is this a good idea?</li></ul>

<p>Anybody feel free to chip in at any time.</p>]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---attributes-and-vectors.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---attributes-and-vectors.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 15 Jun 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[Learn Functional Programming With Me - Moving The Square]]></title><description><![CDATA[<p>So, last session I managed to get a square being drawn, as if I haven&#39;t done that a thousand times in JS - now to do something a bit more dangerous (because it involves state), and more likely to get me in trouble - let&#39;s move the square around using the keyboard.</p>

<p><strong>Reminder</strong>: The source for all of this can be found at <a href="https://github.com/robashton/clojure-spaceinvaders">github.com/robashton/clojure-spaceinvaders</a></p>

<p>Parameterising the function
------------</p>

<p>This is a no-brainer, I&#39;m going to need to know where to draw this thing, I start off by passing in the state required to draw a rect to my function.</p>

<pre><code>(defn drawRect [x y w h]</code></pre>

<p>
      (let [target (.getElementById js/document &quot;target&quot;)
            context (.getContext target &quot;2d&quot;)]
         (.fillRect context x y w h)           
      )
    )</p>

<p>So far so good - but now I&#39;m going to need to not only pass in those variables, but - well they&#39;re going to have to be variable (somehow) because they&#39;re going to have to change each frame and it&#39;s stuff like this that makes me break out in a cold sweat because I haven&#39;t discovered the patterns to solve this type of problem yet.</p>

<p>Let&#39;s explain - you see that &#39;let&#39; statement, the values I&#39;ve defined there, those key value pairs are <em>immutable</em>, this means I cannot change them - for example, if I want to make this square move of its own voilition, the literal equivalent of</p>

<pre><code>for(var x = 0; x &lt; 1000; x++)</code></pre>

<p>
      drawRect(x, 0, 100, 100);</p>

<p>Doesn&#39;t exist.</p>

<p>Now, if I were to make my best guess at how to solve this, I&#39;d say that we need a function that takes in x, and then calls itself with x+1, for example at a conceptual level:</p>

<pre><code>function drawAndMove(x) {</code></pre>

<p>
      drawRect(x, 0, 100, 100)
      if(x &lt;= 1000)
        drawAndMove(x+1)
    }
    drawAndMove(0);</p>

<p>This actually maps across to a construct in our chosen world that looks something like the following:</p>

<pre><code>(loop [x 0]</code></pre>

<p>
      (drawRect x 0 100 100)     
      (if (&lt;= x 1000)
        (recur (inc x))
      )
    )</p>

<ul><li>I want to loop, I want the following values available in this loop (x = 0)</li><li>Please draw the rect at x,0,100,100</li><li>If x &lt;= 1000, recurse and increment x</li></ul>

<p>Okay, this is a bit crazy and verbose - perhaps there is a better more shorthand way of doing this (anybody care to chip in around now?), but Imma press ahead and say that actually, that is not the greatest loop of all time.</p>

<p>We actually have to yield to the UI thread each &#39;frame&#39; which blows this whole thing out of the water - that&#39;s not to say that this code isn&#39;t functional - because I love having a row of black drawn over my canvas on the UI thread with no user interaction whatsoever - but we actually need something like the following</p>

<pre><code>function tick() {</code></pre>

<p>
      logic();
      render();
      setTimeout(tick, 33);
    }</p>

<p>Again, cutting a corner here because I don&#39;t want to write a full on game loop in clojure just yet.</p>

<p>Figuring it out, I&#39;ve ended up with something like this</p>

<pre><code>(defn tick [x]</code></pre>

<p>
      (drawRect x 0 100 100)
      (if (&lt;= x 1000)
        (js/setTimeout (fn []
           (tick (inc x))
        ) 33  )
      )
    )</p>

<pre><code>(defn ^:export init []</code></pre>

<p>
       (tick 0)
    )</p>

<ul><li>Define a function called tick, which takes in the current position of our object</li><li>Draw a rect at that location</li><li>If x is still less than 1000, then</li><li>In 33 milliseconds, call tick again but with x+1</li></ul>

<p>I&#39;ve actually gone far enough for a single blog entry at this point so I&#39;ll leave keyboard input till another day - I have some thoughts about this work so far however:</p>

<ul><li>That setTimeout doo-hick is taking in an anonymous function, am I creating this function every frame? I wouldn&#39;t do that in most of my JS, it&#39;s effectively the same as creating a closure in a loop - not good?</li><li>I saw something like this that used global state and an atom, and then tick could be called with no parameters - is this a better solution? It seems somewhat against what functional programming is about</li><li>Thoughts?</li></ul>]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---moving-the-square.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---moving-the-square.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 13 Jun 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[Learn Functional Programming With Me - Drawing A Square]]></title><description><![CDATA[<p>So.. setting up in ClojureScript isn&#39;t the most exciting thing I&#39;ve ever done - however, following the instructions at the <a href="https://github.com/clojure/clojurescript/wiki/Quick-Start">project wiki</a> got me set up with a basic build pipeline which allows me to include ClojureScript into the browser.</p>

<p>You can find what I&#39;ve done and all the work so far here: <a href="http://github.com/robashton/clojure-spaceinvaders">github.com/robashton/clojure-spaceinvaders</a>.</p>

<p>Intro
----------</p>

<p>My mission today will be to draw a square on a canvas object, nothing more than that - as there will be quite a few concepts to learn just to get this far.</p>

<p>Moving on then, I&#39;m going to start off by doing most of my work in &#39;game.js&#39; and I don&#39;t think I need to export any variables to the outside world, so that keeps things tidy.</p>

<p>About that - as far as I see it, what I want to build is a simulation of Space Invaders, which is as stateless and as side effect free in nature (or as far as is practical - whatever that means). This simulation will be the core of everything - and the side effects will exist on the periphery, in so far as updating the canvas and interacting with the user goes.</p>

<p>Some basic syntax
---------------</p>

<p>So, how do I begin? Well, I guess I&#39;d better get the rest of you caught up with me in understanding Clojure Syntax.</p>

<p><em>this is a traditional function call</em></p>

<pre><code>foo(x, y)</code></pre>

<p></p>

<p><em>this is a Clojure function call</em></p>

<pre><code>(foo x y)</code></pre>

<p></p>

<p><em>this is a traditional function definition</em></p>

<pre><code>function foo(x, y) {</code></pre>

<p>
       console.log(x, y)
    }</p>

<p><em>this is a Clojure function definition</em></p>

<pre><code>(defn foo [x, y]</code></pre>

<p>
      (log x y)
    )</p>

<p>This should be enough to get us started at least. Apparently some of these things we put after the first paren are not only functions, but special forms or macros - but as I haven&#39;t learned anything about them yet, I&#39;m happy in my world of pretending they&#39;re all just functions.</p>

<p>So, how am I going to start off in my happy world of Clojurescript? I need to create an HTML5 Canvas Context so I can do  things with it, and in order to do that I need to need to wait for the DOM ready event and oh oh oh - oh dear, <em>all of this looks like it might be hard because these are all external systems to my happy ClojureScript world and will involve some initial pain - oh well I wanted to learn how to do something practical and nearly all things practical are going to involve talking to external systems so I&#39;d better get the pain over with <strong>OH IT HURTS IT HURTS.</strong></em></p>

<p>Ahem.</p>

<p>Getting a function called on start-up
-----------------</p>

<p>Ever the pragmatist, rather than re-implement the standard fuzz around this stuff in Clojure, or pull in jQuery or anything I&#39;d do in JS, we&#39;ll just go with the body onload event, and rely on it calling a global function that I export from my game.js.</p>

<pre><code>(ns game) </code></pre>

<p>
    (defn ^:export init [] </p>

<pre><code>) </code></pre>

<p></p>

<p>Given a body declaration of something like</p>

<pre><code>&lt;body onload=&quot;game.init();&quot;&gt;</code></pre>

<p></p>

<p>That funky export thing just tells the Google Closure compiler not to mangle the name of the function (the ClojureScript compiler runs output through Closure - yes, that is confusing when you read it out loud).</p>

<p>How do I test it works? Well inside my init function, let&#39;s access our first native object and see what the syntax is for that.</p>

<pre><code>(.log js/console &quot;Hello World&quot;)</code></pre>

<p></p>

<p>Actually not too bad, &quot;Please call .log - which exists on the object js/console, and pass in &quot;Hello World&quot; as parameters.</p>

<p>Great - so I&#39;m now printing hello world, how are we going to draw a square to our canvas? Well first we&#39;ll need a context object, and in order to get that context object, we&#39;ll have to get a canvas object and call a method on it - this will mean having a variable of some sort from which we can gain other functionality.</p>

<p>Introducing some more syntax.
----------------</p>

<p><em>Traditional variable declaration</em></p>

<pre><code>var x = 0;</code></pre>

<p></p>

<p><em>Clojurescript variable declaration</em></p>

<pre><code>(let [x 0] </code></pre>

<p>
      (doStuff x)
    )</p>

<p>So, two things here - we have this &#39;let&#39; thing, into which you pass in a vector of key-value pairs (x and 0 in this case, so x = 0), and then a body of code doing things with those values.</p>

<p>Ah yes, Clojure has vectors, which are square brackets which contain a bunch of things. (parens are just lists of things, hence &#39;LISP&#39; apparently). The difference between the two? Well, for my purposes right now, one has square brackets and the other has parentheses - I&#39;m sure it will become clearer in the future.</p>

<p>Drawing my square
--------------------</p>

<p>Anyway, expanding all of this we can get the following in order to do draw a square on our canvas</p>

<pre><code>  (ns game)</code></pre>

<p></p>

<pre><code>  (defn drawSquare []</code></pre>

<p>
        (let [target (.getElementById js/document &quot;target&quot;)
              context (.getContext target &quot;2d&quot;)]
           (.fillRect context 0 0 100 100)
        )
      )</p>

<pre><code>  (defn ^:export init []</code></pre>

<p>
         (drawSquare)
      )</p>

<ul><li>Create a function called drawSquare, taking in no parameters</li><li>Let target = the result of calling getElementById on the document with a parameter of &#39;target&#39;</li><li>Let context = the result of calling getContext on target with a parameter of &#39;2d&#39;</li><li>Call fillRect on context, with parameters of 0,0,100,00</li><li>When init is called, call drawSquare with no parameters</li></ul>

<p>I guess we learn something else here, which is you can make a nice little chain of lets that all feed into each other, as you&#39;d kinda hope.</p>

<p>Next, we&#39;ll see about drawing a basic representation of our &#39;defender&#39; and move it around using the keyboard (probably)</p>]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---drawing-a-square.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---drawing-a-square.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 12 Jun 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[Learn Functional Programming With Me - A Mission Statement]]></title><description><![CDATA[<p>I was at NDC2012 last week and ended up hanging around the tongue-in-cheek &quot;Hipster stand&quot; along with a fine bunch of people who sat around coding and chatting most of the week on various interesting projects.</p>

<p>One of those fine people was <a href="https://twitter.com/bodiltv">@bodiltv</a> who proclaimed their love for Lisp, Emacs and various other things that I thought (like most people) I&#39;d left behind after university never to touch again.</p>

<p>However, functional programming is something that is seeing somewhat of a re-emergence in the crowds of people who I tend to lump into a bucket of &quot;Smarter than Rob&quot;, and I was looking for an excuse to give it a go - having to build something with somebody sat next to me to show me the ropes was an excellent motivator.</p>

<p>Over the course of a couple of hours on Thursday, <a href="https://twitter.com/bodiltv">@bodiltv</a> and I sat down and wrote a simple little script that looks something like this:</p>

<pre><code>(ns foo.core </code></pre>

<p>
    (:use [net.cgrand.enlive-html :as html])  
    )</p>

<pre><code>(def BASEURL &quot;https://en.wikipedia.org/wiki/&quot;)</code></pre>

<p></p>

<pre><code>(defn fetch-url [url]</code></pre>

<p>
      (html/html-resource (java.net.URL. url)))</p>

<pre><code>(defn define</code></pre>

<p>
      &quot;Fetches a page from wikipedia and prints the first paragraph&quot;
        [q]
          (let [url (str BASEURL q)
               content (fetch-url url)]
               ((comp html/text
                      first
                      html/select) content [:#mw-content-text :p])
          )
    )</p>

<p>We also then looked at futures and how such things like that could help us, and with the knowledge of state being immutable know that we were safe when doing so. I then asked the question that most people ask when encountering this stuff for the (first/second) time, &quot;How on earth do you build something <em>real</em> with this stuff&quot;.</p>

<p>So here goes, a mission statement - <em>I am going to build space invaders on top of HTML5 Canvas with Clojurescript</em>.</p>

<p>Yes, I am breaking out the blog again and relying on YOU, the reader who knows more about these things than I do to guide me on my way as I inevitably make lots of mistakes.</p>

<p>It&#39;s hard to do this, because on the surface of things it seems so far away from the style of development I am used to, but by learning out in the open I am hoping we&#39;ll accelerate the process of getting to the point where I can be productive in a functional environment.</p>

<p>Next entry: Let&#39;s see what my environment is going to look like, how I am going to interact with the Canvas and structure myself during this experiment.</p>]]></description><link>http://codeofrob.com/entries/learn-functional-programming-with-me---a-mission-statement.html</link><guid isPermaLink="true">http://codeofrob.com/entries/learn-functional-programming-with-me---a-mission-statement.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 11 Jun 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[Github Live]]></title><description><![CDATA[<h5>Visualize git 'pushes' live as they happen across Github.</h5>

<p>I visited <a href="https://twitter.com/#!/cranialstrain">@cranialstrain</a> in England this weekend, and he suggested we hack something together around the Github APIs in response to the <a href="https://github.com/blog/1118-the-github-data-challenge">Github data challenge </a>.</p>

<p>Looking at the Event stream, I thought it would be interesting to visualise what was going on in live, in a web browser, and given all the toys I've written over the past year or so in NodeJS, it was fairly clear that a simple web server processing the events and broadcasting them to clients wouldn't take a lot of work to complete.</p>

<p>So, we ended up with <a href="http://githublive.codeofrob.com">Github Live</a>, which looks something like this once you've left it running for five minutes (during the morning, so it's a bit quiet)</p>

<a href="/img/githublive.png"><img src="/img/githublive.png" width="640px"></img></a>

<p><strong>The server side</strong></p>

<p>The server is using Node, which is operating as a basic static file server, and as a point of call for incoming sockets with socket.io.</p>

<p>It starts off every 10 seconds polling the Events API, storing the most recent timestamp so to avoid publishing duplicates (the events API doesn't have a "last retrieved id").</p>

<p>It attempts to throttle requests to the events API to avoid the amount of duplicate events being retrieved from the API (if it finds an overlap, it increases the time until next request by a second, and if it doesn't, it decreases by a second).</p>

<p>In hindsight, the hideous inline callbacks would be best replaced with a stream that did all this work, and just published events transparently to the consuming code.</p>

<p>The next job, once this has taken place is that a request is made to Github for each pull, asking for information about the repository (for the language), so the events being streamed to the clients can be augmented with this information.</p>

<p>This is another thing that should be dealt with by a stream rather than inline callback soup.</p>

<p>Oh well, it's only 200 lines of throwaway code, perhaps something to tidy up on a rainy day.</p>

<p><strong>The client side</strong></p>

<p>Because it's quick and easy, we're using HTML and CSS3 to do display and transformations.</p>

<p>As the events stream in from the server, some HTML is created for the event and it is put in an appropriate bucket (for the language being used).</p>

<p>The outside container has a CSS transition applied to it, and the transform 'scale' is set to fit all buckets into the same window periodically.</p>

<p>From this I have ascertained that</p>

<ul>
<li>I dislike vendor prefixes</li>
<li>these are not as fast as I'd like</li>
<li>Webkit has some unusual glitches if you're not careful</li>
</ul>

<p>I guess with some more work, these things could be worked around, there are some definite performance improvements that could be made client side here.</p>

<p>I'd quite like to give an SVG implementation a go, and see about the performance of that. Another project for a rainy weekend.</p>

<p><strong>The code</strong></p>

<p>The code in all its (raw) form can be found at<a href="https://github.com/robashton/githubfall"> https://github.com/robashton/githubfall</a></p>

<p>I'd be interested to see any obvious improvements made and pull requested in.</p>
]]></description><link>http://codeofrob.com/entries/github-live.html</link><guid isPermaLink="true">http://codeofrob.com/entries/github-live.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 07 May 2012 12:28:00 GMT</pubDate></item><item><title><![CDATA[Anatomy of a 48 hour HTML5-JS Game]]></title><description><![CDATA[<p>I participated in my second <a href="http://www.ludumdare.com/compo/">Ludum Dare</a> 48 hour game-building compo this weekend, and this was my fourth attempt at <a href="http://www.ludumdare.com/compo/ludum-dare-23/?action=preview&amp;uid=7112">building a game from scratch</a> in 48 hours in HTML5/JS.</p>

<p>Each time I have approached the problem in a slightly different way, but I'm beginning to get the process sussed (with a few caveats) so let's break down my latest attempt (<a href="http://www.ludumdare.com/compo/ludum-dare-23/?action=preview&amp;uid=7112">Web</a> | <a href="https://github.com/robashton/ld4823tw">Source</a>) and see how it is put together.</p>

<h2>Libraries + Frameworks</h2>

<p>I've tried a couple of approaches for this so far, one is to start with a set of 'base code' (written in advance either extracted from another project, or written especially for the 48 hour compo).</p>

<p>I've ended up settling for a halfway house, I have some libraries that I <em>really</em> like from JS/HTML development in general, and some libraries/components that I keep around for convenience.</p>

<p><strong>Third party</strong></p>

<p><em><a href="http://documentcloud.github.com/underscore/">Underscore</a></em> - this is a library containing a load of polyfills for doing common operations in JS (iteration, binding, etc) - my favourite method is probably _.extend, which I'll cover in a bit.</p>

<p><em><a href="http://jquery.org/">jQuery</a></em> - we all know what this is - to be honest, I use it for DOM selection and the most basic of manipulation only - as such it's a bit heavy-weight for what I need. Still - it's familiar to me and allows me to get started - can't say wrong with that.</p>

<p><strong>Hand-rolled components</strong></p>

<p><strong><a href="https://github.com/robashton/swallow">Swallow</a></strong> - Packaging up a directory as a JSON file and downloading it all-as-one might not be the most elegant/modern way of dealing with multiple assets but it at least allows an easy deterministic way of dealing with dependencies, and means that I forego a lot of the issues with playing Audio in browsers (creating a new audio file with a URL means the browser re-downloading the asset!). </p>

<p>Base64 encoding all the binary assets and getting on with life means not faffing around with them during the compo - which is a good thing.</p>

<pre><code>// Build script
swallow.build({
    in: 'assets',
    out: 'site/assets.json'
});

// Client code
GlobalResources.loadPackage('assets.json', function() {
    game.start();
});

GlobalResources.getImage('image.png');
GlobalResources.playSound('explosion');
</code></pre>

<p><strong><a href="https://github.com/robashton/camera">Camera</a></strong> - Separation of in-game coordinates from the pixels being displayed on screen is pretty important because otherwise we limit ourselves to a specific resolution and aspect ratio, and prevent our application from being run at different resolutions on different screens.</p>

<p>The principle of this tiny piece of code is that rather than drawing using 'screen coordinates', we draw using 'world coordinates' and haven't got to any of the transformations ourselves in expensive JS.</p>

<p>For example,</p>

<pre><code>context.fillRect(0, 0, 100, 100);
</code></pre>

<p>Would ordinarily fill a rectangle 100 pixels by 100 pixels at the top-left of the screen, but if we apply transforms to the underlying canvas as if we had a camera moving over it, using the following code</p>

<pre><code>camera.lookAt(50, 50);
camera.zoomTo(100);
camera.fieldOfView(Math.PI / 4);
</code></pre>

<p>Then the same fillRect code will be drawing the same rectangle  (roughly) in the middle of the screen. </p>

<p>The advantage of this code is that the same picture can be drawn whether the canvas is sized at 320x240, 640x480, 800x600 (and can even handle strange aspect ratios). In case of bad performance, the canvas size can be set to half the size of the actual display and upscaled automatically!</p>

<p><strong>Eventable</strong> - I've found that messaging is the best way to keep the ability to crank out features without littering the codebase with conditionals and irrelevant code, I have a basic set of behaviours in an object called "Eventable" that looks like</p>

<pre><code>on(event, callback, context)
onAny(callback, context)
off(event, callback, context)
offAny(callback, context)
</code></pre>

<p>I also have a basic <strong>Scene</strong> object, through which all entity events bubble up through for caretaker objects to deal with, consider the following scenario from my #LD23 game</p>

<ul>
<li>EnemyFactory decides to spawn an Asteroid</li>
<li><p>EnemyFactory hooks '<em>Destroyed</em>' event on Asteroid</p>

<pre><code>   asteroid.on('Destroyed', this.onAsteroidDestroyed, this);
</code></pre></li>
<li><p>Asteroid goes off and does its thing</p></li>
<li>Player blasts away Asteroid</li>
<li><p>Asteroid raises event like so:</p>

<pre><code>this.raise('Destroyed');
</code></pre></li>
<li><p>EnemyFactory removes the Asteroid from the scene</p></li>
<li>Also listening to events from the scene are
<ul>
<li>ExplosionCreation</li>
<li>ScoreKeeper</li>
<li>SoundCreation</li>
</ul></li>
</ul>

<p>They hooked the events from the scene when they were added to it like so</p>

<pre><code>scene.on('Destroyed', this.onEntityDestroyed, this);
</code></pre>

<p>And in their respective methods they get to do</p>

<pre><code>onEntityDestroyed: function(data, sender) {
    this.createExplosion(sender.x, sender.y);
}

onEntityDestroyed: function(data, sender) {
    this.increaseScore(sender.getPoints() * this.currentLevel);
}

onEntityDestroyed: function(data, sender) {
    this.playSound('explosion', sender.x, sender.y);
}
</code></pre>

<p>Having the ability to slap on extra functionality without creating masses of extension code meant that throwing in power-ups was a simple matter of creating something to listen to destruction events and add new entities to the scene to represent as power-ups.</p>

<p>Keeping the UI updated looks something like this:</p>

<pre><code>var Hud = function(scene) {
    scene.autoHook(this);
    this.score = $('#score');
    this.health = $('#health');
    this.energy = $('#energy');
};
Hud.prototype = {
    onScoreChanged: function(score) {
        this.score.text(score);
    },
    onHealthChanged: function(health, sender) {
        if(sender.id !== 'player') return;
        this.health.css('width', sender.percentageHealth() + '%');
    },
    onEnergyChanged: function(energy, sender) {
        if(sender.id !== 'player') return;
        this.energy.css('width', sender.percentageEnergy() + '%');
    }
}
</code></pre>

<p>Hmmm, tidy.</p>

<p>I choose not to publish this as a library, because this is something specific to the way I like to work and everybody is either using one that already exists or are capable of writing on themselves.</p>

<h2>Patterns and Practises</h2>

<p><strong>Working in a single file</strong></p>

<p>When working on my more long-term projects, I often use a dependency/module system like RequireJS to break up the project across multiple files (one-per-class type of thing)</p>

<p>When working on a 48 hour game jam, I find that just coding everything in a single file like a madman is really helpful providing I'm using a good text editor with the ability to search and jump around the document built in.</p>

<p><strong>Working with "Classes"</strong></p>

<p>I admit it, I'm a sucker for encapsulating state and behaviour into discrete little objects that I can create and throw around the place,</p>

<p>The thing is, because JS allows for duck-typing, this object flinging makes throwing things into a scene and performing operations on them pretty convenient.</p>

<p>For example, I have a scene object, which exposes the following methods, and at its most simplistic looks something like this:</p>

<pre><code>add: function(entity) {
    this.entities[entity.id] = entity;
},
remove: function(entity) {
    delete this.entities[entity.id];
}
tick: function() {
    this.eachEntity(this.entityTick);
},
entityTick: function(entity) {
    if(entity.tick) entity.tick();
},
draw: function(context) {
    this.eachEntity(this.entityDraw, context);
},
entityDraw: function(entity, context) {
    if(entity.draw) entity.draw();
}
</code></pre>

<p>Now, in my long-term projects, drawing/logic/etc are just components that are attached to the entities, and the scene is certainly not responsible for this stuff - but for this kind of rapid-work project having something really simplistic really aids in the development process.</p>

<p>The important things of note, is above - we only care that an entity has a field called 'id', we don't care where it got it from - and if that entity has a draw method, we'll use it and if the entity has a tick method, we'll use that too.</p>

<p>I don't bother trying to emulate classic inheritance, even in something as simplistic as this it's not desirable (and leads to more complexity). I do however make judicious use of underscore's 'extend' method.</p>

<pre><code>// Basic rendering functionality for a textured quad
var Quad = function() {
    // stuff
};

Quad.prototype = {
    draw: function(context) {}; // stuff
}

// A basic powerup which floats towards the player
var Powerup = function(image, x, y) {
    Quad.call(this, image, x, y);
    Eventable.call(this);
    this.id = IdGenerator.Next("powerup");
};
Powerup.prototype = {
    tick: function() {
        this.moveTowardsPlayer();
    },
    notifyCollision: function(other) {
        if(other.isPlayer())
            this.bestow();
    }
};
_.extend(Powerup.prototype, Quad.prototype, Eventable.prototype);

// An actual powerup
var DestructionFieldPickup = function(x, y) {
    Powerup.call(this, "destructionfield.png", x, y );

};
DestructionFieldPickup.prototype = {
    bestow: function() {
        this.scene.addEntity(new DestructionField(this.x, this.y));
    }
}
_.extend(DestructionFieldPickup.prototype, Powerup.prototype);
</code></pre>

<p>I'd usually shy away from such hierarchies, but in a 48 hour jam they're a really easy way of throwing functionality in with gay abandon (remember, I don't need to maintain this code, I don't need to remember that the Pickup somehow magically has an 'x' value 2 months later, I don't need to remember what fields have already been declared so not to overwrite them etc).</p>

<p>Working with such lightweight base components and with such explicit objects means that providing my codebase remains below 2000 lines of code (about the maximum deliverable for a solo 48 hour jam if I'm honest), I can keep it all in my head and not fuss around too much.</p>

<p>At least they're relatively small and (mostly) hide their data, and hold onto the functionality they expose in neat, readable blobs.</p>

<h2>Assets</h2>

<p>I'm not an artist, and I'm not a sound engineer either, I have found however that with Inkscape it is possible to create relatively non-sucky art with the combination of geometric shapes.</p>

<p><img src="../img/ship.png" alt="" /></p>

<p>Including these is simple, as they're bundled up with Swallow - however, sounds are more tricky.</p>

<p>Sound on the internet SUCKS.</p>

<p><strong>SUCKS. SUCKS SUCKS.</strong></p>

<p><em>breath</em>, basically you'll be fine if you use a combination of <strong>ogg vorbis</strong> and <strong>MP3</strong>, and don't worry about the older browsers.</p>

<p>In a little game like this, I don't worry about the cost and simply download both files all of the time (in swallow), I guess I could package them up individually and do a check on start-up, and perhaps a little library is warranted (either one on the internet or hand-rolled)</p>

<p>The code for playing a sound goes as follows therefore:</p>

<pre><code>playSound: function(path) {
  var player = new Audio();
  if(player.canPlayType("audio/mpeg")) {
    player.src = "data:audio/mpeg;base64," + this.findData(path + '.mp3');
  } else {
    player.src = "data:audio/ogg;base64," + this.findData(path + '.ogg');
  }
  player.volume = 0.5;
  player.play();
}
</code></pre>

<p>This will work okay, as the data is cached (so no faffing with re-load pauses).</p>

<h2>In Summary</h2>

<p>In a 48 hour game jam, I've found that productivity is <em>much</em> more important than the long-term maintainability of the code, but this does not mean abandoning some sensible software practises, as short term maintainability is still important (keeping 2000 lines of procedural spaghetti code in your head isn't quite as easy...).</p>

<p>Any questions? The code is over <a href="https://github.com/robashton/ld4823tw/blob/master/site/game.js">here</a>, and the above should help with the navigation a bit...</p>
]]></description><link>http://codeofrob.com/entries/anatomy-of-a-48-hour-html5-js-game.html</link><guid isPermaLink="true">http://codeofrob.com/entries/anatomy-of-a-48-hour-html5-js-game.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 23 Apr 2012 12:34:00 GMT</pubDate></item><item><title><![CDATA[Asset packaging in browser based games]]></title><description><![CDATA[<script type="text/javascript">
 setTimeout(function() {
   window.location = "http://altdevblogaday.com/2012/03/28/asset-packaging-in-browser-based-games/";
 }, 2000);
</script>

  <p>I'm redirecting you to <a href="http://altdevblogaday.com/2012/03/28/asset-packaging-in-browser-based-games/">http://altdevblogaday.com/2012/03/28/asset-packaging-in-browser-based-games/</a> with JavaScript, feel free to skip the setTimeout call I've used</p>
]]></description><link>http://codeofrob.com/entries/asset-packaging-in-browser-based-games.html</link><guid isPermaLink="true">http://codeofrob.com/entries/asset-packaging-in-browser-based-games.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Fri, 30 Mar 2012 07:54:00 GMT</pubDate></item><item><title><![CDATA[Anti-templating languages]]></title><description><![CDATA[<p>I don't really like templating languages or view engines (especially in JavaScript) - it's something I've been vocal on in person for a while now but never got around to writing about.</p>

<p>Things like this have been <a href="http://www.workingsoftware.com.au/page/Your_templating_engine_sucks_and_everything_you_have_ever_written_is_spaghetti_code_yes_you">ranted on</a> before by other people, but I want to share my particular dislike of the frameworks and technologies here, as well as present up the way I'm currently working.</p>

<p><strong>Logic in your views</strong></p>

<p>Now, we all know this isn't a good idea, but what do we really mean by this? What are the problems we're facing?</p>

<p><strong>EJS</strong></p>

<p>EJS is a view engine similar in nature to WebForms in ASP.NET, which means for .NET devs it's often reached at for its comfortable familiarity and lack of learning requirements.</p>

<p>Let's look at the default example on the EJS website to understand this</p>

<pre><code>&lt;ul&gt;
&lt;% for(var i=0; i &lt; supplies.length; i++) {%&gt;
   &lt;li&gt;&lt;%= supplies[i] %&gt;&lt;/li&gt;
&lt;% } %&gt;
&lt;/ul&gt;
</code></pre>

<p>EJS promises to "<em>Clean the HTML out of your JavaScript</em>", and the very first demo shows us an example of HTML which has been dirtied with JavaScript.</p>

<p>This is just moving the problem around, this is very much a case of "logic in the view" and it makes it difficult to maintain because it's difficult to read and it's hard to tell where the HTML begins and where the HTML ends.</p>

<p>Standard practise might be to do something like this:</p>

<pre><code>&lt;ul&gt;
    &lt;%= Helpers.RenderList(supplies) %&gt;
&lt;/ul&gt;
</code></pre>

<p>But this just means I've moved the HTML back into my JavaScript again. I guess what we're saying here, is that trying to arbitrarily separate 'view' from 'logic' in this manner is a fools errand, doomed to fail because all we're doing is moving the problem around.</p>

<p><strong>Mustache</strong></p>

<p>Mustache is a "logic-less" templating language (they say so on their site), there are other "logic-less" templating languages around too and they're all much of a muchness.</p>

<p>I quote:</p>

<blockquote>
  <p>We call it "logic-less" because there are no if statements, else clauses, or for loops. Instead there are only tags.</p>
</blockquote>

<p><em>for-loop-replacement:</em></p>
<pre><code>
    &lt;ul&gt;
    {{#supplies}}
      &lt;li&gt;{{text}}&lt;/li&gt;
    {{/supplies}}
    &lt;/ul&gt;
</code></pre>

<p><em>if-else-statement-replacement</em></p>

<pre><code>
{{#shipped}}
    &lt;li&gt;This product shipped on {{shipdate}}&lt;/li&gt;
{{/shipped}}
{{^shipped}}
    &lt;li&gt;This product has not yet shipped&lt;/li&gt;
{{/shipped}
</code></pre>

<p>This is just a for loop and an if-else statement but with different syntax, pretending they're otherwise is doing a disservice to everybody who is going to be reading and writing this code.</p>

<p>Adding onto this, we of course also have the ability to seamlessly call methods from Mustache because we're always going to need to write code somewhere (Well, it's one way to keep logic out of the view by.. err calling logic from the view) <i>(see above re: arbitrary separation)</i>.</p>

<pre><code>{{#wrapped}}
  {{name}} is awesome.
{{/wrapped}}

{
  "name": "Rob",
  "wrapped": function() {
    return function(text) {
      return "&lt;b&gt;" + render(text) + "&lt;/b&gt;"
    }
  }
}
</code></pre>

<p>This serves to just confuse though, as the fact a method is being called is hidden from us and means we're reduced to jumping between template and code to work out what is going on.</p>

<p><strong>A shared concern</strong></p>

<p>I have a problem that's shared across all of these solutions though, and that's the one of dealing with external designers.</p>

<p>I have only once worked in a situation where I was privileged enough to work with a designer who knew her HTML and Webforms syntax and could be taught more if needed because she was a permanent member of our team. <em>(And that was only because I spent months campaigning to get somebody who knew what they were doing when it came to making things look pretty!)</em></p>

<ul>
<li>I want to be delivered clean HTML which I can use in my application</li>
<li>I want to be able to integrate updates to that HTML if need be</li>
<li>Teaching a contractor how to use 'template language X' is a waste of my money</li>
<li>Finding a contractor who knows 'template langauge X' is a waste of my time</li>
</ul>

<p>Here in lies a problem - the moment we go to any templating language/system that isn't <em>just</em> HTML, we have to transform what the designer has given us into that templating language - and then translate it back when patching in any amendments that might come as we continue developing.</p>

<p><strong>Performance</strong></p>

<p>Not only those points, but if we're truly going to have a logic-less templating language and we're using third party APIs in any way (whether they be third-third party, or just plain old third party) then in order to get the data into a shape fit for binding directly to your template, transforms must be done which means writing mapping code one way or another.</p>

<p>It's not healthy I tell you - if you're going to transform one set of data into other data that is an exact match of your view requirements, and then transform from that data into another set of data (your view) then you're paying a cost for this. (Throw in your favourite MVC/MVVM framework for JS and even more so, but that's another blog entry entirely).</p>

<p><strong>So what do I like then?</strong></p>

<ul>
<li>Accept that a for loop is a for loop</li>
<li>Accept that an if statement is an if statement</li>
<li>Accept that you're always going to need some of these things in your applications</li>
<li>Accept that the above is best suited to being in a programming language of some sort</li>
</ul>

<p>We have a great opportunity in JS, where we have a language that has been built almost for the primary purpose of interacting with the output that the user sees and where we have libraries whose sole purpose is the interaction <em>with</em> that output.</p>

<p><em>Use the force</em></p>

<p>Enter the anti-templating system "<a href="https://github.com/flatiron/plates">Plates</a>" (there are others that are similar, but this is what I'm using at the moment, as it's isomorphic, fast with no-frills and hopefully will remain so - despite the "issue" reports asking for "nesting" or "collections" etc - as they're missing the point).</p>

<p>Rather than being a templating language, Plates merely binds data to HTML. </p>

<p>HTML!! You know - the stuff that you're going to give to the browser, the  stuff which your designer gives you - the stuff that everybody on the internet and their pet animals know how to use.</p>

<p>Given some HTML:</p>

<pre><code>&lt;div id="test"&gt;&lt;/div&gt;
</code></pre>

<p>And some model:</p>

<pre><code>{ 
    "test": "hello"
}
</code></pre>

<p>Then </p>

<pre><code>Plates.bind(html, model);
</code></pre>

<p>Combined with a bit of JavaScript this gives us enough power to do everything we'd want to do when it comes to taking some data and displaying it on a page. <em>(Yes, it supports matching by class, yes it supports putting data into attributes on those elements, this is all trivial).</em></p>

<p><em>How does it all fit together?</em></p>

<p>Well, I tend to either keep the HTML snippets which I'm going to hydrate on the page itself in a hidden div, or if they're shared templates, as files which I can pull down with a HTTP GET (not rocket science really).</p>

<p>How do I deal with collections? Easy - I write a for loop. How do I deal with different paths? I want an 'if' statement.</p>

<p><em>But don't you end up with spaghetti code?</em></p>

<p>Well no - just because I'm not following an enforced and arbitrary separation of 'view' and 'logic' doesn't mean I'm throwing away sensible software practises.</p>

<p>It's just, that separation comes naturally on a case-by-case basis.</p>

<p>Sometimes I'll end up with some code that matches the model purely on convention and I can write</p>

<pre><code>hydrateTemplate('source', 'target', data);
</code></pre>

<p>Sometimes I'll end up with builders that look like this</p>

<pre><code> startTemplateWithId('targetId')
    .withText('title', data.title)
    .withText('name', data.name)
    .withCollection('itemList', data.items, getItemHtml)
    into('placeholder');
</code></pre>

<p>Or similar (although in most simple cases this kind of over-blown code isn't needed).</p>

<p>My mark-up remains clean, my model remains clean, and the code that lies between is kept clean, tidy and to the point - not to mention re-usable where appropriate because it's <em>just code</em>.</p>

<p>When asked where this style fits in, I'd say it's essentially just MVP, with the line between V and P moving around to fit the situation.</p>

<p><strong>Summary</strong></p>

<p>Separation of view and logic isn't going to happen along any sort of neat line without silly amounts of abstraction; use something that allows you to have clean HTML and clean JavaScript with as little bullshit in-between as possible. </p>

<p>You'll be happier, your code will be happier and you'll find it is a lot easier to deliver a product when you stop arguing about whether you have enough separation in your abstractions.</p>


]]></description><link>http://codeofrob.com/entries/anti-templating-languages.html</link><guid isPermaLink="true">http://codeofrob.com/entries/anti-templating-languages.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 28 Mar 2012 16:34:00 GMT</pubDate></item><item><title><![CDATA[Lessons learned building a multiplayer game in NodeJS and WebGL]]></title><description><![CDATA[<p>I've uploaded Hoverbattles to its own server on EC2, and it has been running fine with an uptime of over 96 hours so far, and this is great!</p>

<p><a href="http://hoverbattles.com">http://hoverbattles.com</a></p>

<p>I've wanted to share a few of the mistakes/lessons learned writing and deploying a multiplayer game built entirely with JavaScript on top of <a href="http://nodejs.org/">NodeJS</a> and <a href="http://learningwebgl.com/blog/">WebGL</a> for a while and this represents an opportune moment to do so. </p>

<p>I've gone with a brain-dump of various related learnings, as well as a couple of periphery items - first off, we'll go with the reason I couldn't keep Hoverbattles up on the old server.</p>

<p><strong>Deploy long-running, processor-intensive node apps to decent hardware</strong></p>

<p>If you're going to deploy a long running node application that is going to be running a constant load, don't deploy it to either:</p>

<ul>
<li>A micro instance of EC2</li>
<li>A really low budget VPS</li>
</ul>

<p>This might be plain old obvious to most people, but apparently not to me - I first deployed to my own VPS, and found that after it had been running for an hour or so it consumed all the memory on the server and fell over in a steaming heap.</p>

<p>I tried to find a memory leak in Hoverbattles itself, I changed to various versions of node, I re-built various components of the OS and nothing seemed to work. I wasn't able to reproduce the issue on my meaty laptop and I gave up for a while, as I was working on a new project.</p>

<p>Turns out that by running long running processes on a virtualised OS on oversubscribed hardware, the OS is lied to, or it lies to you and things don't work quite well. Some of the more knowledgeable types could probably tell us why - but the bottom line is you shouldn't be doing it.</p>

<p><strong>Note:</strong> This probably doesn't go for simple websites built on top of node in express or whatever, I'm talking about long running applications that are doing processing almost constantly, like the server-side component to a 'realtime' multiplayer game.</p>

<p><strong>If you're really going to share code between client + server, plan this accordingly</strong></p>

<p>With Hoverbattles, it started off as a purely client-based game, with JavaScript files being included in the main HTML file and this worked great while I was experimenting with the WebGL and working out how everything was going to work.</p>

<p>I soon moved to having a server implementation running the logic, and ported everything across to <a href="http://wiki.commonjs.org/wiki/Modules/1.1.1">CommonJS</a>, using <a href="https://github.com/sstephenson/stitch">Stitch</a> to package up all of the files so I could use them on the client.</p>

<p>This is actually problematic, as you don't want <em>all</em> the code on the client, and you don't want <em>all</em> the code on the server - with CommonJS you'll only get the code loaded on the server that is used there, but if you're stitching your entire /src folder, you're potentially also sending down code for your persistence, communication, 'secret sauce' stuff etc.</p>

<p>I ended up solving this in Hoverbattles by having a folder structure of:</p>

<pre><code> /shared
 /server
 /client
</code></pre>

<p>This is a bit hideous and arbitrary - and doesn't allow me to organise my codebase naturally along its logical borders, and it's for that reason in my latest projects I've switched across to using <a href="http://requirejs.org/">RequireJS</a>.</p>

<p>By writing different entry points to the same code, and simply boot-strapping in various sub-systems and behaviours from those call-sites, you can naturally end up with a dependency chain that only includes code relevant to the platform for which it is targetted. </p>

<p><strong>Avoid creating new objects in the main event loop</strong></p>

<p>This is obvious too if you've been developing any sort of large scale JavaScript application, or you come from an unmanaged background where this is something you learn not to do from very early on - but I've been developing in a mostly managed world for a few years (C#) and creating objects doesn't carry with it the same overhead so you become quite cavalier to it.</p>

<p>I started profiling Hoverbattles a few weeks in and was surprised to find out that 70% of my CPU time was spent in a single method, that is:</p>

<pre><code>vec3.create();
</code></pre>

<p>Vec3 is an object literal from <a href="https://github.com/toji/gl-matrix">glMatrix</a> containing useful functions for manipulating and creating vectors on top of the typed arrays available in WebGL compatible browsers - these are cool for a number of reasons (performance oriented reasons mostly) and I didn't really think twice about my usage here.</p>

<p>Consider the following imaginary method called once a frame for each missile currently active in the scene.</p>

<pre><code>calculateDistanceToTarget: function() { 
  var difference = vec3.create();
  var targetDestination = this.target.position;
  vec3.subtract(targetDestination, this.position, difference);
  return vec3.length(difference);
};
</code></pre>

<p>This is a really bad idea, and I had code lying around all over the place that would do this - create a temporary float array in order to perform some calculation and then carry on.</p>

<p>The answer was to create a buffer or two on start-up for each system that needed to do things like this, then the code looks something like this.</p>

<pre><code>calculateDistanceToTarget: function() { 
  var targetDestination = this.target.position;
  vec3.subtract(targetDestination, this.position, this.sharedVec3);
  return vec3.length(this.sharedVec3);
};
</code></pre>

<p>This isn't too nice, but so long as you keep the use of this shared buffer to a single method (IE, write into it, then read out of it immediately) then there are no issues with multiple methods across the system using this data.</p>

<p>On that note though...</p>

<p><strong>Private state should remain private</strong></p>

<p>I got in the habit in Hoverbattles of being a bit cavalier about accessing state and simply doing direct property access across objects in order to perform calculations. In some cases this isn't a bad idea and keeps the code legible and fast. In most cases it's a lot of coupling added for little gain - especially if you start to write back to those fields later.</p>

<p>Just like in C#, property/field access is generally a bad idea, you should be asking objects questions which they can answer, and giving them extra information for those questions if they need it - and you should definitely be telling them to do things instead of taking that responsibility away from them.</p>

<p>The thing is, in most LOB apps this is really not that big a deal, CRUD is boring, the applications we build are boring, we can get away with this stuff. When you're dealing with a game world where dozens of things are going on 30 times a second, controlling access to state starts to become important. <em>Lesson learned.</em></p>

<p>Consider instead our earlier example of:</p>

<pre><code>calculateDistanceToTarget: function() { 
  var targetDestination = this.target.position;
  vec3.subtract(targetDestination, this.position, this.sharedVec3);
  return vec3.length(this.sharedVec3);
};
</code></pre>

<p>We could instead have:</p>

<pre><code>calculateDistanceToTarget: function() {
    return this.target.distanceFrom(this.position);
};
</code></pre>

<p>This subtle switch in logic means we're no longer accessing the supposedly private state of another object, and I'm free to change it without worrying about the rest of my code breaking.</p>

<p>I'm also able to far easier control this behaviour when writing tests (target can be a fake target if I feel it necessary to stub out the real logic).</p>

<p>In my current projects I am being a lot more strict about state access - all state is technically public due to the nature of my JavaScript objects, but I don't give into temptation and touch it (<em>that's will power yo</em>').</p>

<p>Encapsulation is really important in a project that has this much "business logic", and having a sensible object model is a big part of this.</p>

<p><strong>Push, don't pull - but sometimes pull</strong></p>

<p>I also made the mistake in Hoverbattles of trying to build components to control every aspect of a particular behaviour - this involved pulling state from various places to work out whether A or B should happen, or whether to display X on the screen or not.</p>

<p>This didn't scale, I ended up having to pull state from three sources (which means asking the world for the entities concerned), and writing methods to pull that state on the components that those entities were build out of.</p>

<p>Turns out I ended up with a system in places that looks like classic Event Sourcing; You look at high score tables, persistence, particle systems and the HUD as views on top of the single source of truth and consider that you can build those views from events being raised in the game world. Suddenly it makes sense that all state in areas with high view subscription should be built from events raised by those entities.</p>

<p>Once I had that realisation, development got a lot easier, <em>"Hey, I've been told to move, I'll  raise an event with the relevant data, subscribe to it myself to update my own state and let everybody else do the same".</em></p>

<p>I didn't go overboard with this, in Hoverbattles there are only a few places where the above is true, and even then only just and in my latest code this is much more established pattern - the world has commands coming in via input or across the network, and raises events so everything that cares can be updated.</p>

<p>Sometimes it is just more appropriate to pull the state, especially if it's hard to raise an event without duplicating data (see above the cost of creating new objects), and the trick so far has been recognising that and trying not to overly homogenise.</p>

<p><strong>Don't let network-code take over your domain</strong></p>

<p>In Hoverbattles there was a real problem when it came to writing the network code, it ended up being far too pervasive and leaked into too many aspects of the logical entity code.</p>

<p>Some of this managed to be repaired before it became too much of a mess, the main realisation was that there were only a few classes of problem involved in most of the network code, that is:</p>

<ul>
<li>User input, sent as commands to both the world and the server</li>
<li>Periodic sync, extracting state from objects and serializing across the wire to all clients</li>
<li>Protected code that can only be executed on the server, but the results of which need executing on both client and server</li>
</ul>

<p>These are actually ordered in terms of difficulty:</p>

<ul>
<li>User input can easily be sorted by sticking an intermediary between the actual input emitter and the game world (so, one object with some code in it). </li>
<li>Each component has the chance to serialize state and receive state by convention with methods called _in and _out</li>
<li>This one caused a lot of issues, trying to attach different components to entities depending on whether they were created on the server/client, etc</li>
</ul>

<p>That last one was a bit of a doosy, I ended up with about 20 objects trying to juggle only the responsibility specific to the server or to the client, it looked something like this.</p>

<pre><code>/client/
/client/firingbehaviour.js
/client/dyingbehaviour.js
/client/lockingbehaviour.js
/server/
/server/firingbehaviour.js
/server/dyingbehaviour.js
/server/lockingbehaviour.js
/shared/
/shared/firingbehaviour.js
/shared/dyingbehaviour.js
/shared/lockingbehaviour.js
</code></pre>

<p>This gave me hard to debug errors because the responsibilities for an entity's behaviour were spread all over the place, state was being mutated all over the shop and it was becoming hard not to duplicate code across the different environments.</p>

<p>All of this because I was full of pride and didn't want to write into my code anywhere the line of code:</p>

<pre><code>if(Environment.IsServer)
</code></pre>

<p>As it felt wrong. I ended up with a compromise, which is I'd do that on the main entity object (which tends to bring together these different behavourial components).</p>

<p>Here's the thing - if I was using events to update my internal state, surely I could simply suppress the events on the client if the client didn't have permission to make that decision <em>(for example, player health loss is a decision only the server can make - I don't want craft blowing up and being removed from the scene if they didn't actually die, it's a horrible visual artifact).</em></p>

<pre><code>applyDamage: function(amount) {
  var newHealth = this.health - amount;
  this.raiseServerEvent('CraftDamaged', newHealth);
},
onCraftDamaged: function(newHealth) {
  this.health = newHealth;
  if(this.health &lt; 0)
   this.raiseEvent('CraftDestroyed');
}
</code></pre>

<p>Regardless of client or server, this logic would get executed - but only on the server would the event actually get raised when a craft lost health, and that event would automatically be proxied to all the clients for the rest of the logic to be executed.</p>

<p>This leaves me with:</p>

<pre><code>/craft/
/craft/firingbehaviour.js
/craft/dyingbehaviour.js
/craft/lockingbehaviour.js
</code></pre>

<p>Because this was back-patched in over a weaker system, there are some remnants of this change left over the Hoverbattles source, but it is a lesson I'm applying in the new game to really good effect. </p>

<p>The network code in the latest project consists of about three objects primarily just routing commands and events and it is most likely going to stay that way.</p>

<p><strong>Arrays are mutable reference types</strong></p>

<p>Duh. we all know that, why bother including it? Well - remember I said that creating new objects is expensive so I was sharing them? Yeah - well that can bite too, and given that this was one of my recurring bugs (my own stupidity granted) it's worth documenting.</p>

<p>In C#, typically you don't expose mutable reference types, you'd return an IEnumerable<T> if you wanted to expose a collection from an object, which is a read-only collection fit for... well reading from the consuming code.</p>

<p>Can't quite pull off that trick in JavaScript (although the solution could exist in user-land it's a bit of a faff as it's not transparent). </p>

<p>The problem is, in a game like Hoverbattles - half of our state is in fact arrays of either length of '3', or length of '16' (vectors and matrices) and we have to be careful when receiving a vector or matrix that we don't own. Consider the following simplified code, which is <em>reminiscent</em> of an actual bug I had in Hoverbattles.</p>

<p><em>Player</em></p>

<pre><code>moveLeft: function(amount) {
  this.position[0] -= amount;
  this.raiseEvent('Moved', this.position);
}
</code></pre>

<p><em>Enemy</em></p>

<pre><code>onPlayerMoved: function(newPosition) {
  this.playerPosition = newPosition;
},
doSomeLogic: function() {
   // Some calculation that indirectly modifies the array
   this.playerPosition[0] += 5;
}
</code></pre>

<p>Okay, the above is quite obvious, but this kind of thing happened (in substantially more convoluted scenarios) with the outrageous result of player craft ending up where they should not be. (Especially in the network code where objects are receiving new state a lot of the time).</p>

<p>The answer is, if you're receiving an array from an event or command, to copy it over to your own internal value if you want to keep the state around for any length of time for future processing. (Ignore this at your peril unless you're smart and/or have lots of tests).</p>

<p><strong>Push it to the GPU</strong></p>

<p>Hoverbattles first particle system was written on the CPU, and looked something like this:</p>

<pre><code>var ParticleEngine = function(count) {
  this.particles = new Array(count);
  for(var x = 0; x &lt; count ; x++) {
    this.particles[x] = {
      x: 0,
      y: 0
      velx: 0,
      vely: 0
    }
  }
};

ParticleEngine.prototype = {
  update: function() {
    for(var x = 0; x &lt; count ; x++) {
      this.particles[x].x += this.particles[x].velx;
      // etc
    }
  }
};
</code></pre>

<p>Yeah, this didn't go too well - I wanted... no, I needed many thousands of particles, and blocking the event loop on the browser by looping through large collections of objects is a big no no.</p>

<p>If you can push processing from the CPU on the browser, to the GPU using shaders, then you should, JavaScript is slow and not a suitable place to be playing with large loops of data.</p>

<p>Besides, <a href="http://en.wikipedia.org/wiki/GLSL">GLSL</a> is quite a pretty language to do it in:</p>

<pre><code>void main(void){

    float age = (time - aCreationTime);
    vec3 position = aVertexPosition + (aVelocity * age);
    vColour = aColour;

    vec3 vectorToPoint = (position - vCamera);
    float distanceSquared = abs(dot(vectorToPoint, vectorToPoint));
    float scale = clamp(distanceSquared, 1.0, 10000.0);      

    life = 1.0 - (age / aLifetime);
    life = clamp(life, 0.0, 1.0);

    gl_PointSize = (aSize * maxsize) / (scale / 100.0);
    gl_Position =  uProjection * uView * vec4(position, 1.0);
}
</code></pre>

<p><strong>Relax</strong></p>

<p>Finally - <a href="http://codeofrob.com/entries/a-relaxed-attitude-towards-the-pragmatic-delivery-of-okay-software.html">something I covered previously</a> - relax, there is no problem you cannot solve with a bit of patience, re-factoring, profiling, and debugging. :-)</p>


]]></description><link>http://codeofrob.com/entries/lessons-learned-building-a-multiplayer-game-in-nodejs-and-webgl.html</link><guid isPermaLink="true">http://codeofrob.com/entries/lessons-learned-building-a-multiplayer-game-in-nodejs-and-webgl.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 19 Mar 2012 12:00:00 GMT</pubDate></item></channel></rss>