<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><image><url>http://codeofrob.com/img/cover.jpg</url><title>Rob Ashton&apos;s blog</title><link>http://codeofrob.com</link></image><generator>RSS for Node</generator><lastBuildDate>Wed, 04 Dec 2013 09:02:18 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><author><![CDATA[Rob Ashton]]></author><item><title><![CDATA[Clojure dojo-ing at NDC London]]></title><description><![CDATA[<p>I&#39;m sat at NDC London working on my presentation on a completely re-paved laptop and that&#39;s my entire day sorted for Wednesday.</p>
<p>However, there is <em>Thursday</em> and <em>Friday</em> and while there are a couple of sessions I&#39;ll probably attend, I think I&#39;m going to sit/stand around near the Twilio coffee machine and give Clojure 101s to anybody who fancies doing something a bit different.</p>
<p>The format? Bring your laptop and let&#39;s get you set up with a working Clojure environment. Let&#39;s pull down something fun to work on and let&#39;s build something. </p>
<p>Just come and find me, tweet me <a href="@robashton"><a href="http://twitter.com/robashton">http://twitter.com/robashton</a></a> to find out where I am or otherwise holla.</p>
<p>If you don&#39;t have a laptop I&#39;m happy to do some informal lessons on my own machine but obviously there is a limit to the number of people we can crowd around my laptop and how much we can engage on that.</p>
<p>Let&#39;s create some more Clojure devs!</p>
]]></description><link>http://codeofrob.com/entries/clojure-dojo-ing-at-ndc-london.html</link><guid isPermaLink="true">http://codeofrob.com/entries/clojure-dojo-ing-at-ndc-london.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 28 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - A module per widget]]></title><description><![CDATA[<p>So we&#39;ve learned from jQuery that we can hide the details of interaction with the dom behind a single function and it <em>does</em> work and <em>has</em> worked for many years so...</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
<li><a href="/entries/starting-the-frameworkless-js-project.html">Getting started</a></li>
<li><a href="/entries/frameworkless-js---rendering-templates.html">Templating stuff</a></li>
<li><a href="/entries/frameworkless-js---but-we-*really*-want-to-use-knockout-for-that-bit.html">Demanding Knockout</a></li>
<li><a href="/entries/frameworkless-js---encapsulation-of-views.html">Encapsulation of views</a></li>
<li><a href="/entries/frameworkless-js---what-jquery-did-right.html">A lesson from jQuery</a></li>
</ul>
<p>Let&#39;s do it ourselves.</p>
<h3>Creating our customer list as a module</h3>
<p>I&#39;m going to do things a bit differently in this blog series to the example on Github to make the point that it&#39;s entirely up to us to do things how feel like. In the example on Github the modules are exposed as an instantiable object in a presenter-ish pattern.</p>
<p>Instead, this module is going to be exposed as a single function like so</p>
<p><em>customerlist/index.js</em></p>
<pre><code class="lang-javascript">module.exports = <span class="keyword">function</span>(element) {

}</code></pre>
<p>In this, we need to render the customers, so our whole module will look something like this</p>
<p><em>customerlist/index.js</em></p>
<pre><code class="lang-javascript">
<span class="keyword">var</span> mustache = require(<span class="string">'mustache'</span>)
  , testdata = require(<span class="string">'../testdata'</span>)
  , fs = require(<span class="string">'fs'</span>)

<span class="keyword">var</span> template = fs.readFileSync(__dirname + <span class="string">"/template.html"</span>)

<span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">(element, customers)</span> {</span>
  element.innerHTML = mustache.render(template, { customers:  customers })
}

module.exports = <span class="keyword">function</span>(element) {
  render(element, testdata.customers)
}</code></pre>
<p><em>customerlist/template.html</em></p>
<pre><code>  <span class="tag">&lt;<span class="title">table</span>&gt;</span>
    <span class="variable">{{#customers}}</span>
      <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{name}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{bank}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
    <span class="variable">{{/customers}}</span>
  <span class="tag">&lt;/<span class="title">table</span>&gt;</span></code></pre>
<p>One thing that is immediately apparent is that I&#39;ve bundled both the presentation logic and the template together in a single folder and exposed only a single function to represent that.</p>
<h3>Creating our bank dropdown as a module</h3>
<p>We can do the same for the bank dropdown and have that in its own little folder too.</p>
<p><em>bankdropdown/index.js</em></p>
<pre><code class="lang-javascript"><span class="keyword">var</span> ko = require(<span class="string">'knockout'</span>)
  , mustache = require(<span class="string">'mustache'</span>)
  , testdata = require(<span class="string">'../testdata'</span>)
  , fs = require(<span class="string">'fs'</span>)
  , html = fs.readfileSync(__dirname + <span class="string">"/template.html"</span>)

module.exports = <span class="keyword">function</span>(element) {
  <span class="keyword">var</span> model = {
    banks: ko.observableArray(testdata.banks),
    selectedBank = ko.observable()
  }
  element.innerHTML = html
  ko.applyBindings(model, element)
  model.selectedBank.subscribe(<span class="keyword">function</span>(bank) {

  })
}</code></pre>
<p><em>bankdropdown/template.html</em></p>
<pre><code><span class="tag">&lt;<span class="title">select</span> <span class="attribute">name</span>=<span class="value">"banks"</span> <span class="attribute">data-bind</span>=<span class="value">"options: banks, value: selectedBank"</span>&gt;</span><span class="tag">&lt;/<span class="title">select</span>&gt;</span></code></pre>
<h3>Using these modules</h3>
<p>Ignoring that I&#39;m not handling the above events yet, our <em>app.js</em> now looks a bit like this</p>
<pre><code>var customerlist = require(<span class="comment">'./customerlist')</span>
  , bankselection = require(./bankselection<span class="comment">')</span>
  , domReady = require(<span class="comment">'domready')</span>

domReady(<span class="keyword">function</span>() {
  customerlist(document.getElementById(<span class="comment">'customer-list'))</span>
  bankselection(document.getElementById(<span class="comment">'bank-selection'))</span>
})</code></pre>
<p>Assuming in this case that those elements exist in our document somewhere on start-up. Of course, they could equally be rendered from a template, or I could be using a document fragment for this and doing it detached... well yes - options, we have options.</p>
<h3>Communication between modules</h3>
<p>One thing we&#39;ve not done yet is re-enabled that dropdown to re-render that customer list. One guideline I tend to follow (although not strictly) is that these little self contained widgets shouldn&#39;t  generally be nested too deeply or be too coupled to each other.</p>
<p>For the customer list, there is no reason why it should know about the bank selection dropdown, as there are number of reasons why you might choose to filter the data being displayed there. </p>
<p>For the bank selection, there is no reason why it should know about the customer list, as we might have a bank selection widget anywhere else in our app.</p>
<p>So for now we&#39;ll write the code for this in our <em>app.js</em></p>
<pre><code class="lang-javascript">
var customerlist = require(&#39;./customerlist&#39;)
  , bankselection = require(./bankselection&#39;)
  , domReady = require(&#39;domready&#39;)

domReady(function() {
  var customers = customerlist(document.getElementById(&#39;customer-list&#39;))
    , banks = bankselection(document.getElementById(&#39;bank-selection&#39;))

  banks.on(&#39;bank-selected&#39;, function(bank) {
    customers.filterByBank(bank)
  })
})</code></pre>
<p>I&#39;ve not written the code to support this yet, but this acts as a statement of intent, that my bank selection widget is going to raise domain specific events and I&#39;m going to issue commands to the customer list based on those events. This is pleasantly explicit and from app.js easy to navigate into the approprate widgets to see what they do and how they work.</p>
<p>To support that, I need to issue events from the bank widget</p>
<pre><code class="lang-javascript"><span class="keyword">var</span> EventEmitter = require(<span class="string">'events'</span>).EventEmitter

module.exports = <span class="keyword">function</span>(element) {
  <span class="comment">// Other stuff</span>

  <span class="keyword">var</span> events = <span class="keyword">new</span> EventEmitter()
  model.selectedBank.subscribe(<span class="keyword">function</span>(bank) {
    events.emit(<span class="string">'bank-selected'</span>, bank)
  })
  <span class="keyword">return</span> events
}</code></pre>
<p>EventEmitter is just a built-in node thing which I don&#39;t like all that much but it&#39;ll do in this example. I could have gone and found an alternative module in NPM for doing events but I don&#39;t have a strong opinion on how this is supposed to work.</p>
<p>The filtering code in customerlist is pretty obvious and just re-renders the HTML inside the element</p>
<h3>We could go further</h3>
<p>In the real world we might decide to package these up as their own modules and stick them in our own private NPM repository (or a git repository).  This would mean they&#39;d come with their own package.json and their own README. We might leave them in their little folder and stick a README inside there instead - that works too, although more discipline might be required to keep things isolated from each other.</p>
<p>The documentation on what these widgets returned and the small surface area they expose could fit in a single markdown file in that repository and each widget would be easily re-writeable if we decided to do things differently. Consistency doesn&#39;t necessarily have to be enforced and each widget can be done in its own style quite happily. </p>
<p>Next up let&#39;s see what we can do about perhaps supporting some client-side navigation, as that&#39;s all the rage these days apparently.</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---a-module-per-widget.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---a-module-per-widget.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 26 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - What jQuery did right]]></title><description><![CDATA[<p>We are in a bit of a pickle. We have a little bit of code which does things to the dom and has interactivity, but how do we organise that so we don&#39;t just have a pile of code in a file?</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
<li><a href="/entries/starting-the-frameworkless-js-project.html">Getting started</a></li>
<li><a href="/entries/frameworkless-js---rendering-templates.html">Templating stuff</a></li>
<li><a href="/entries/frameworkless-js---but-we-*really*-want-to-use-knockout-for-that-bit.html">Demanding Knockout</a></li>
<li><a href="/entries/frameworkless-js---encapsulation-of-views.html">Encapsulation of views</a></li>
</ul>
<p>Well, a few of you are wanting me to <em>get to the point already</em> and I&#39;mma let you finish but first I&#39;mma tell you that jQuery is the greatest library of all time, ALL TIME.</p>
<h3>jQuery</h3>
<p>In the beginning there were a pile of JS files included into a pile of html files and executed in whatever order we felt like including them. If we were lucky there might be a common.js or a utils.js to wrap up various inconsistencies between browsers and then everything else just used those to hijack bits of the dom and do all manners of wicked things in our application.</p>
<pre><code class="lang-javascript">my.org.has.a.bigger.namespace.than.you.utils.getElementById(<span class="string">"foo"</span>)</code></pre>
<p>Then jQuery was born and we suddenly had a magical dollar symbol which gave us a way to use the dom without going through all those headaches. We saw that it was good and there were joyous celebrations across the land as the word spread and jQuery allowed us to write more spaghetti code and even faster than ever before.</p>
<pre><code class="lang-javascript">$(<span class="string">'#foo'</span>)</code></pre>
<p>And lo, for the jQuery team did see that perhaps not everything should be part of jQuery itself and they created a plug-in system whereby you could attach functions to the almighty dollar symbol and a sprawling ecosystem was born whereby everybody and their dogs were writing jQuery plugins to perform magic on web pages across the intarwebs.</p>
<pre><code class="lang-javascript">$(<span class="string">'#foo'</span>).magic()</code></pre>
<p>There was no standard. There was no dependency management. There were very few rules. We had jQuery plug-ins to handle touch events on a dom element, to convert a list into a tabbed UI, to create image sliders on your marketing homepage, to create and track various animations. The only commonality was that </p>
<ul>
<li>You included jQuery</li>
<li>You then included jQuery plug-ins</li>
<li>You then included your app which then used those plug-ins</li>
</ul>
<p>Some jQuery plugins would let you hook events through their configuration set-up</p>
<pre><code class="lang-javascript">$(<span class="string">'#foo'</span>).setupWidget({
  onActivated: <span class="keyword">function</span>() {
  },
  onDeactivated: <span class="keyword">function</span>() {

  },
  onMagic: <span class="keyword">function</span>() {

  }
})</code></pre>
<p>Some jQuery plug-ins would simply raise their events through the element itself once activated:</p>
<pre><code class="lang-javascript">$(<span class="string">'#foo'</span>).widget().on(<span class="string">'activated'</span>, <span class="keyword">function</span>() {})</code></pre>
<p>As a bonus to that lack of dependency management, jQuery plug-ins tended to be very standalone (in as much as they could be given their dependency on jQuery itself!), and they&#39;d commonly be pretty single purpose (do one thing and do it well...). </p>
<p>These plug-ins could</p>
<ul>
<li>Render a whole tree of HTML under the element(s) you selected</li>
<li>Attach CSS to that HTML</li>
<li>Expose semantic events over the top of that element</li>
</ul>
<pre><code class="lang-javascript">$(<span class="string">'ul.tabs'</span>).tabs() <span class="comment">// my favourite</span></code></pre>
<p>This sounds a lot like the desired encapsulation I&#39;ve been talking about in the last couple of entries.</p>
<h3>Pushing it to its limit</h3>
<p>And indeed, on a couple of projects I saw this pushed as far as it possibly could. The guidance being <em>If you like it then stick it in a plug-in</em>. The entire app therefore became a collection of jQuery plug-ins whose use was orchestrated by the entry point (app.js). Each widget would be responsible for managing the element it was given, all of the HTML below it and for pushing events back up which meant something in the app.</p>
<p>Each plug-in would have its own repository, its own documentation which was usually a single page, as more than that would mean the plug-in probably did too much. Using them meant you&#39;d RTFM for that plug-in to see how to make it work its magic. This experience was to a lesser extent mirrored in the general ecosystem outside too - for a couple of years an approach to client-side web development would mean reaching automatically to see <em>is there a jQuery plug-in that does that?</em></p>
<h3>This was pretty neat</h3>
<p>Does it sound familiar? We managed to build some pretty big apps this way, the downsides being</p>
<ul>
<li>No dependency management meant either documenting <em>spit</em> dependencies or not having any at all</li>
<li>No explicit path for knowing &quot;where code came from&quot;</li>
<li>Callstacks would often involve jQuery which was just fubarred</li>
</ul>
<p><em>What&#39;s this got to do with view encapsulation in js using npm modules?</em></p>
<p>I probably don&#39;t need to answer this question, but in essence I&#39;d say quite a lot.  If instead of jQuery plug-ins we think about modules in commonjs (where a module is either a package in NPM or just a single file included via &quot;require&quot;), and for documentation we think readme files on Github then we&#39;re almost there.</p>
<p>If we want a bit of functionality and our approach is to <em>add more code to our application&#39;s main file</em> then we&#39;ve already lost. If our approach is to write a standalone module which exposes a single documented function and use those to compose our application with then we&#39;ve probably got more legs.</p>
<p>As a bonus over those jQuery times (which looking back actually weren&#39;t <em>that</em> great), we get</p>
<ul>
<li>dependency management meaning we can potentially create even smaller modules(!)</li>
<li>an explicit dependency resolution path, code doesn&#39;t get invoked unless you invoke it</li>
<li>Sensible callstacks that exist entirely in &quot;ordinary&quot; code</li>
</ul>
<h3>Next steps</h3>
<p>Now that we&#39;ve had a brief history lesson, we&#39;ll look at emulating this inside an npm/browserify style application (for better or for worse).</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---what-jquery-did-right.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---what-jquery-did-right.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 21 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - encapsulation of views]]></title><description><![CDATA[<p>So we have a mess. What to do so we can end up with <a href="https://github.com/robashton/look-ma-no-frameworks/">not a mess.</a>?</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
<li><a href="/entries/starting-the-frameworkless-js-project.html">Getting started</a></li>
<li><a href="/entries/frameworkless-js---rendering-templates.html">Templating stuff</a></li>
<li><a href="/entries/frameworkless-js---but-we-*really*-want-to-use-knockout-for-that-bit.html">Demanding Knockout</a></li>
</ul>
<p><em>The state of play</em></p>
<ul>
<li>We have a single file, <em>app.js</em>, with a pile of code in it.</li>
<li>We have a single template, <em>customers.html</em> with some mustache and bindings in it</li>
<li>Everytime we change an option, the entire view gets re-rendered</li>
<li>Everytime we change an option, we have to re-hook all the events</li>
</ul>
<p>Not so brilliant, something we can all probably agree on.</p>
<p><em>What to do about it</em></p>
<p>Well in a nutshell this is about ownership. If a bit of code wants to render something to an element, then it should be responsible for binding anything to that element or anything underneath that element. Touching anything outside of that should be strongly discouraged.</p>
<p>This is one of the ideas that a lot of frameworks tend to push for good reason - and there are a million and one ways to do it. In this entry, we&#39;ll just take the most straight forward route of keeping the code in this single file and demonstrating the principle of ownership.</p>
<p>This is the code we currently have:</p>
<pre><code><span class="keyword">var</span> mustache = <span class="keyword">require</span>(<span class="string">'mustache'</span>)
  , domReady = <span class="keyword">require</span>(<span class="string">'domready'</span>)
  , ko = <span class="keyword">require</span>(<span class="string">'knockout'</span>)
  , testdata = <span class="keyword">require</span>(<span class="string">'./testdata'</span>)
  , fs = <span class="keyword">require</span>(<span class="string">'fs'</span>)

<span class="keyword">var</span> template = fs.readFileSync(__dirname + <span class="string">"/customers.html"</span>)
  , container = <span class="keyword">null</span>

domReady(function() {
  container = document.getElementById(<span class="string">'container'</span>)
  renderCustomers(customers)
})

<span class="function"><span class="keyword">function</span> <span class="title">renderCustomers</span><span class="params">(customers)</span> {</span>
  container.innerHTML = mustache.render(template, { customers:  customers })
  bindBankSelection()
}

<span class="function"><span class="keyword">function</span> <span class="title">bindBankSelection</span><span class="params">()</span> {</span>
  <span class="keyword">var</span> model = {
    banks: ko.observableArray(testdata.banks),
    selectedBank = ko.observable()
  }
  ko.applyBindings(model, container)
  model.selectedBank.subscribe(onBankSelected)
}

<span class="function"><span class="keyword">function</span> <span class="title">onBankSelected</span><span class="params">(bank)</span> {</span>
  ko.cleanNode(container)
  renderCustomers(filterCustomersByBank(bank))
}</code></pre>
<p>The problem at the root of all this, is that both the customer list and the bank selection are hammering on the top level element (container) and it&#39;s not clear who owns what.</p>
<p>How about instead of this, we say that our top-level function takes in the top level container, and then gives a sub-element to both the customer list and the bank selection code?</p>
<pre><code>var model = <span class="cell">{
  customers: testdata.customers,
  banks: testdata.customers
  selectedBank = ko.observable()
}</span>

domReady(<span class="keyword">function</span>() <span class="cell">{
  banks(container.getElementsByClassName(<span class="string">'banks'</span>)[<span class="number">0</span>])
  customers(container.getElementsByClassName(<span class="string">'customers'</span>)[<span class="number">0</span>])
}</span>)

<span class="function"><span class="keyword">function</span> <span class="title">banks</span><span class="params">(el)</span> {</span>
  <span class="transposed_variable">el.</span>innerHTML = <span class="transposed_variable">mustache.</span>render(bankstemplate, model)
  <span class="transposed_variable">ko.</span>applyBindings(model, el)
  <span class="transposed_variable">model.</span><span class="transposed_variable">selectedBank.</span>subscribe(onBankSelected)
}

<span class="function"><span class="keyword">function</span> <span class="title">onBankSelected</span><span class="params">(bank)</span> {</span>
  <span class="transposed_variable">model.</span>customers = filterByBank(<span class="transposed_variable">testdata.</span>customers)
  customers(<span class="transposed_variable">container.</span>getElementsByClassName(<span class="string">'customers'</span>)<span class="matrix">[<span class="number">0</span>]</span>)
}

<span class="function"><span class="keyword">function</span> <span class="title">customers</span><span class="params">(el)</span> {</span>
  <span class="transposed_variable">el.</span>innerHTML = <span class="transposed_variable">mustache.</span>render(customerstemplate, model)
}</code></pre>
<p>Something like that.</p>
<p><em>Yuck, still a mess</em></p>
<p>Yep, we solved the main problem which was the ownership of elements but we&#39;re using a weird shared model and not really encapsulating anything else.</p>
<p>I want to approach the topic of encapsulation slowly and with the demonstration of the actual problems we&#39;re trying to solve. It&#39;s very easy to run into a &quot;let&#39;s use this pattern everywhere&quot; and I want to put across the notion of shared modules that don&#39;t have to have a homogeneous setup.</p>
<p>Next up, we&#39;ll take the next steps towards that by looking at the heady days of &quot;<em>what jquery did right</em>&quot;.</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---encapsulation-of-views.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---encapsulation-of-views.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 19 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - but we *really* want to use Knockout for that bit]]></title><description><![CDATA[<p>Continuing then with the <a href="https://github.com/robashton/look-ma-no-frameworks/">&quot;look no ma no frameworks&quot;</a> series...</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
<li><a href="/entries/starting-the-frameworkless-js-project.html">Getting started</a></li>
<li><a href="/entries/frameworkless-js---rendering-templates.html">Templating stuff</a></li>
</ul>
<p>What about when we really want to use something like Knockout in our application...</p>
<p>In actual fact, the issue I was being specifically asked to address at this client was that they had chosen to use Knockout on their projects and were generally being quite successful with it until they ran into a situation where getting it to fit was causing issues.</p>
<p><em>How can we build an application which uses Knockout except when it doesn&#39;t</em></p>
<p>A slightly different question and on the surface really obvious but the temptation is there to treat KO as a framework rather than a library and let it rule our application.</p>
<p><em>The difference between a framework and a library is that you use a library, whereas a framework uses you</em></p>
<p>So okay then, let&#39;s pull in Knockout</p>
<pre><code><span class="comment">npm</span> <span class="comment">install</span> <span class="comment">knockout</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</code></pre>
<p><em>gasp</em>, yes indeed - it is shipped as a self-contained NPM module which is pretty pleasing if you&#39;re wanting to develop applications in this way.</p>
<pre><code><span class="keyword">var</span> ko = <span class="keyword">require</span>(<span class="string">'ko'</span>)</code></pre>
<p>Being that we only had a couple of hours to complete this programming exercise we needed something simple to apply this to and went for the overly simplistic example of &quot;binding to a select list&quot;. This is a bit unrealistic and I apologise for this - binding to the events of a single element isn&#39;t really the best excuse for importing a large library like KO into your application(!!).</p>
<h1>Building the customer list</h1>
<p>First we can shove some test data into a file <em>testdata.js</em>. </p>
<pre><code>module.exports = {
  <span class="method">banks:</span> [ <span class="comment">"spv"</span>, <span class="comment">"fana"</span>, <span class="comment">"lloyds"</span> ],
  <span class="method">customers:</span> [
    { <span class="method">bank:</span> <span class="comment">"spv"</span>, <span class="method">name:</span> <span class="comment">"bob"</span> , <span class="method">desc:</span> <span class="comment">"bob is a late payer"</span>},
    { <span class="method">bank:</span> <span class="comment">"fana"</span>, <span class="method">name:</span> <span class="comment">"alice"</span>, <span class="method">desc:</span> <span class="comment">"alice always pays on time"</span>},
    { <span class="method">bank:</span> <span class="comment">"lloyds"</span>, <span class="method">name:</span> <span class="comment">"craig"</span>, <span class="method">desc:</span> <span class="comment">"craig is chillin on sunday"</span>  },
    // etc
  ]
}</code></pre>
<p>And we can bind this to a template that looks like this</p>
<pre><code><span class="tag">&lt;<span class="title">table</span>&gt;</span>
  <span class="variable">{{#customers}}</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{name}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{bank}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
  <span class="variable">{{/customers}}</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span></code></pre>
<p>With the following application code in <em>app.js</em></p>
<pre><code><span class="keyword">var</span> mustache = <span class="keyword">require</span>(<span class="string">'mustache'</span>)
  , domReady = <span class="keyword">require</span>(<span class="string">'domready'</span>)
  , testdata = <span class="keyword">require</span>(<span class="string">'./testdata'</span>)
  , fs = <span class="keyword">require</span>(<span class="string">'fs'</span>)

<span class="keyword">var</span> template = fs.readFileSync(__dirname + <span class="string">"/customers.html"</span>)

domReady(function() {
  <span class="keyword">var</span> container = document.getElementById(<span class="string">'container'</span>)
  container.innerHtml = mustache.render(template, testdata)
})</code></pre>
<p>Notice that we use a relative path in our require statement to bring in whatever code was exported via <em>module.exports</em> in the testdata.js file. Other than that, there is nothing new here so moving on.</p>
<p><em>Filtering the list of customers</em></p>
<p>I want a dropdown to do this with and for now I&#39;m going to add that to the customers template - we&#39;ll see shortly why that might be a bad idea but right now I&#39;m going for the prize and don&#39;t know anything about future problems.</p>
<pre><code><span class="tag">&lt;<span class="title">select</span> <span class="attribute">name</span>=<span class="value">"bank"</span> <span class="attribute">data-bind</span>=<span class="value">"options: banks, value: selectedBank"</span>&gt;</span>
<span class="tag">&lt;<span class="title">table</span>&gt;</span>
  <span class="variable">{{#customers}}</span>
    <span class="tag">&lt;<span class="title">tr</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{name}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="variable">{{bank}}</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span><span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
  <span class="variable">{{/customers}}</span>
<span class="tag">&lt;/<span class="title">table</span>&gt;</span></code></pre>
<p>Hooking this up in our <em>app.js</em> is just the standard Knockout code that we&#39;ve all seen before, and that I <em>always</em> have to go onto the documentation website to remember how to do ;-)</p>
<pre><code><span class="keyword">var</span> mustache = <span class="keyword">require</span>(<span class="string">'mustache'</span>)
  , domReady = <span class="keyword">require</span>(<span class="string">'domready'</span>)
  , ko = <span class="keyword">require</span>(<span class="string">'knockout'</span>)
  , testdata = <span class="keyword">require</span>(<span class="string">'./testdata'</span>)
  , fs = <span class="keyword">require</span>(<span class="string">'fs'</span>)

<span class="keyword">var</span> template = fs.readFileSync(__dirname + <span class="string">"/customers.html"</span>)
  , container = <span class="keyword">null</span>

domReady(function() {
  container = document.getElementById(<span class="string">'container'</span>)
  renderCustomers(customers)
})</code></pre>
<p>So I&#39;ve broken this up a bit and I&#39;m passing in a custom model</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">renderCustomers</span><span class="params">(customers)</span> {</span>
  <span class="transposed_variable">container.</span>innerHtml = <span class="transposed_variable">mustache.</span>render(template, <span class="cell">{ customers:  customers }</span>)
  bindBankSelection()
}</code></pre>
<p>And we bind to the bank selection in a standard way</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">bindBankSelection</span><span class="params">()</span> <span class="comment">{
  var model = {
    banks: ko.observableArray(testdata.banks),
    selectedBank = ko.observable()
  }</span>
  <span class="title">ko</span>.<span class="title">applyBindings</span><span class="params">(model, container)</span>
  <span class="title">model</span>.<span class="title">selectedBank</span>.<span class="title">subscribe</span><span class="params">(onBankSelected)</span>
}

<span class="title">function</span> <span class="title">onBankSelected</span><span class="params">(bank)</span> <span class="comment">{
  ko.cleanNode(container)
  renderCustomers(filterCustomersByBank(bank))
}</span></code></pre>
<p><em>this is a bit crap</em></p>
<p>Yeah - so this is the spaghetti code we&#39;re talking about occuring if you&#39;re not using a framework. Re-rendering the whole page just to update a list of customers? Why re-render the select control at all? Why have we got two rendering systems slamming into what is effectively a global dom element with global data?</p>
<p>Clearly there has to be a better way to have our cake <em>and</em> eat it and we&#39;ll talk about that in the next blog entry about building composable widgets.</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---but-we-*really*-want-to-use-knockout-for-that-bit.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---but-we-*really*-want-to-use-knockout-for-that-bit.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 14 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - rendering templates]]></title><description><![CDATA[<p>Continuing then with the <a href="https://github.com/robashton/look-ma-no-frameworks/">&quot;look no ma no frameworks&quot;</a> series...</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
<li><a href="/entries/starting-the-frameworkless-js-project.html">Getting started</a></li>
</ul>
<p>Now, I&#39;m <a href="/entries/anti-templating-languages.html">no real fan of pull-based templating systems</a>, but I lost the war on this a while ago and I&#39;m not going to impose this one on this system today. (Remember, this was a walkthrough for a client with specific questions and not about me trying to impose my own opinions on a team I wasn&#39;t going to stay with)</p>
<p>So we picked a templating engine at random, and went with Mustache.. because no reason.</p>
<pre><code><span class="comment">npm</span> <span class="comment">install</span> <span class="comment">mustache</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</code></pre>
<p>Great! There were celebrations in the street as we wrote the following code...</p>
<pre><code>var mustache = require('mustache')
  , domReady = require('domready')

var template = "<span class="tag">&lt;<span class="title">p</span>&gt;</span>Hello <span class="variable">{{name}}</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>"

domReady(function() {
  var container = document.getElementById('container')
  container.innerHtml = mustache.render(template, { name: "Bob" })
})</code></pre>
<p><em>Waaait a minute, what is going on here - why have you just stuck stuff in a string that is cheating Rob Ashton how dare you.</em></p>
<p>Guilty as charged, clearly this isn&#39;t going to scale well over time (although it&#39;s probably going to be better than building up strings of html using the &quot;+&quot; operator).</p>
<p>What we need here clearly is something that can give us a template from an external source and allow us to use it from there now if only such a thing existed.</p>
<p>The temptation is there to download these things as needed from the server - and in some cases this is certainly an option (although in those cases a server-side rendering approach might not be a bad idea either).</p>
<p>Instead, how about writing code like this?</p>
<pre><code><span class="keyword">var</span> mustache = <span class="keyword">require</span>(<span class="string">'mustache'</span>)
  , domReady = <span class="keyword">require</span>(<span class="string">'domready'</span>)
  , fs = <span class="keyword">require</span>(<span class="string">'fs'</span>)

<span class="keyword">var</span> template = fs.readFileSync(__dirname + <span class="string">"/myfunkytemplate.html"</span>)

domReady(function() {
  <span class="keyword">var</span> container = document.getElementById(<span class="string">'container'</span>)
  container.innerHtml = mustache.render(template, { name: <span class="string">"Bob"</span> })
})</code></pre>
<p>What on earth? What is this even? Magic? <em>fs</em> is a module you didn&#39;t see me install because normally this is a server-side module in node.js - and right now the example above does absolutely nothing.</p>
<p>You will recall our process for building the output file looked like this:</p>
<pre><code>browserify app<span class="variable">.js</span> -o <span class="keyword">public</span>/app<span class="variable">.js</span></code></pre>
<p>Now, if only there was something smart enough to see that <em>readFileSync</em> call and replace that with inline content from our template file...</p>
<pre><code><span class="comment">npm</span> <span class="comment">install</span> <span class="comment">brfs</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</code></pre>
<p>Boom, headshot. This is a transformer for browserify, something that can take the output of browserify and do something with it. If we use it like so</p>
<pre><code>browserify -t brfs app<span class="variable">.js</span> -o <span class="keyword">public</span>/app<span class="variable">.js</span></code></pre>
<p>Then just like magic, the un-optimised output will look like this</p>
<pre><code>var mustache = require('mustache')
  , domReady = require('domready')

var template = "<span class="tag">&lt;<span class="title">p</span>&gt;</span>Hello <span class="variable">{{name}}</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>"

domReady(function() {
  var container = document.getElementById('container')
  container.innerHtml = mustache.render(template, { name: "Bob" })
})</code></pre>
<p>Which was just like the initial example where we started. Neat huh?</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---rendering-templates.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---rendering-templates.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 12 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Starting the frameworkless JS project]]></title><description><![CDATA[<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma no Frameworks</a></li>
<li><a href="/entries/frameworkless-js---an-example.html">An example</a></li>
</ul>
<h1>So you have an empty folder</h1>
<p><em>Set up the initial project structure</em></p>
<pre><code><span class="title">npm</span> init
<span class="title">git</span> init
<span class="title">echo</span> <span class="string">"node_modules"</span> &gt; .gitignore

<span class="title">mkdir</span> public
<span class="title">touch</span> public/index.html
<span class="title">touch</span> app.js

<span class="title">git</span> commit -am <span class="string">"Initial commit"</span></code></pre>
<p><em>Install a standalone http server to serve our static files</em></p>
<pre><code>npm install -g http-<span class="keyword">server</span>
cd <span class="keyword">public</span>
http-<span class="keyword">server</span>

(<span class="keyword">server</span> now listening on http:<span class="comment">//localhost:8080)</span></code></pre>
<p><em>Install browserify so we can build our application</em></p>
<pre><code><span class="title">npm</span> install -g browserify</code></pre>
<p><em>Write our first application</em></p>
<pre><code><span class="title">echo</span> <span class="string">"console.log('hello world')"</span> &gt; app.js</code></pre>
<p><em>Build our application</em></p>
<pre><code>browserify app<span class="variable">.js</span> -o <span class="keyword">public</span>/app<span class="variable">.js</span></code></pre>
<p><em>This will create a wonderful file which can be loaded by our index.html</em></p>
<pre><code><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"app.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></code></pre>
<p><em>The output actually looks like this:</em></p>
<pre><code>;(<span class="function"><span class="keyword">function</span> <span class="title">e</span><span class="params">(t,n,r)</span>{<span class="title">function</span> <span class="title">s</span><span class="params">(o,u)</span>{<span class="title">if</span><span class="params">(!n[o])</span>{<span class="title">if</span><span class="params">(!t[o])</span>{<span class="title">var</span> <span class="title">a</span>=<span class="title">typeof</span> <span class="title">require</span>=="<span class="title">function</span>"&amp;&amp;<span class="title">require</span>;<span class="title">if</span><span class="params">(!u&amp;&amp;a)</span><span class="title">return</span> <span class="title">a</span><span class="params">(o,!0)</span>;<span class="title">if</span><span class="params">(i)</span><span class="title">return</span> <span class="title">i</span><span class="params">(o,!0)</span>;<span class="title">throw</span> <span class="title">new</span> <span class="title">Error</span><span class="params">("Cannot find module '"+o+"'")</span>}<span class="title">var</span> <span class="title">f</span>=<span class="title">n</span><span class="params">[o]</span>={<span class="title">exports</span>:{}};<span class="title">t</span><span class="params">[o]</span><span class="params">[0]</span>.<span class="title">call</span><span class="params">(f.exports,function(e)</span>{<span class="title">var</span> <span class="title">n</span>=<span class="title">t</span><span class="params">[o]</span><span class="params">[1]</span><span class="params">[e]</span>;<span class="title">return</span> <span class="title">s</span><span class="params">(n?n:e)</span>},<span class="title">f</span>,<span class="title">f</span>.<span class="title">exports</span>,<span class="title">e</span>,<span class="title">t</span>,<span class="title">n</span>,<span class="title">r</span>)}<span class="title">return</span> <span class="title">n</span><span class="params">[o]</span>.<span class="title">exports</span>}<span class="title">var</span> <span class="title">i</span>=<span class="title">typeof</span> <span class="title">require</span>=="<span class="title">function</span>"&amp;&amp;<span class="title">require</span>;<span class="title">for</span><span class="params">(var o=0;o&lt;r.length;o++)</span><span class="title">s</span><span class="params">(r[o])</span>;<span class="title">return</span> <span class="title">s</span>})<span class="params">({1:[function(require,module,exports)</span>{</span>
<span class="transposed_variable">console.</span><span class="built_in">log</span>(<span class="string">'hello world'</span>)

},<span class="cell">{}</span>]},<span class="cell">{}</span>,<span class="matrix">[<span class="number">1</span>]</span>)
;</code></pre>
<p><em>This is a bit useless for debugging in the browser, so instead we pass the &#39;d&#39; option to browserify and it will generate source maps so in the browser can debug our original file which looks like this</em></p>
<pre><code>console.<span class="built_in">log</span>(<span class="comment">'hello world')</span></code></pre>
<p><em>To generate the source maps, that&#39;s</em></p>
<pre><code>browserify -d app<span class="variable">.js</span> -o <span class="keyword">public</span>/app<span class="variable">.js</span></code></pre>
<h1>Installing our first module</h1>
<p>I want to set the content of a div to &quot;Hello world&quot;, and in order to do this for the sake of argument I want to wait for the dom to be loaded. </p>
<p>In jQuery this would be the equivalent of the </p>
<pre><code><span class="variable">$(</span>function() { <span class="regexp">//</span> <span class="keyword">do</span> stuff here })</code></pre>
<p>The equivalent to this that I&#39;ve found in NPM is a module called &quot;domready&quot;, so I install it with</p>
<pre><code><span class="comment">npm</span> <span class="comment">install</span> <span class="comment">domready</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</code></pre>
<p>Save modifies my package.json to contain the module I&#39;ve installed, so other developers can install it on cloning this repo. Now in my app.js I can write some code to use this</p>
<pre><code>var domReady = require('domready')
domReady(function() {
  var container = document.getElementById('container')
  container.innerHTML = "<span class="tag">&lt;<span class="title">p</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="title">p</span>&gt;</span>"
})</code></pre>
<p>Building this with</p>
<pre><code>browserify -d app<span class="variable">.js</span> -o <span class="keyword">public</span>/app<span class="variable">.js</span></code></pre>
<p>Gives me the desired results of seeing &quot;Hello world on the page&quot;</p>
<h1>Recap</h1>
<p>All we&#39;ve done is</p>
<ul>
<li>Installed some bits on our machine</li>
<li>Written an app.js that uses a module</li>
<li>Ran a command to build that into the static file directory on my site</li>
</ul>
<p>Next we&#39;ll look at an option for doing some templating...</p>
]]></description><link>http://codeofrob.com/entries/starting-the-frameworkless-js-project.html</link><guid isPermaLink="true">http://codeofrob.com/entries/starting-the-frameworkless-js-project.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 07 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Frameworkless JS - an example]]></title><description><![CDATA[<p>I was at a client last week helping with some <a href="http://ravendb.net/">RavenDB</a> stuff and helping out with some of their JS while I was at it.</p>
<p>What I am going to do is walk through a bit of code I wrote with a couple of the developers from the client to explore a particular set of questions that they had, and demonstrate some of the concepts around frameworkless JS and why it doesn&#39;t mean &quot;re-inventing the wheel&quot; as such.</p>
<p>The repo is actually <a href="http://github.com/robashton/look-ma-no-frameworks">here</a> if you want to skip my blathering and have a look without any context - but be aware that the code written is very focused on what questions were being asked by the developers at the client site.</p>
<p>I feel the conversation often gets too focused on the negative aspects of frameworks, rather than the positive experience to be had developing without one and for that reason I&#39;m really glad to have a tangible example to walk through to demonstrate the fun to be had over at this side of the fence.</p>
<h3>What was I asked for?</h3>
<p>The developers were working on a project which didn&#39;t have a lot of data-binding (but had some), and involved the coordination between several actors on page. They were wondering how I dealt with such scenarios and whether I would be open to using libraries like Knockout within a frameworkless context. They were also curious about how to handle multiple &quot;pages/views&quot; and how to re-use widgets/code across multiple applications and avoid building a monolith. </p>
<h3>What did we build?</h3>
<p>It&#39;s not much when you look at it, we demonstrate </p>
<ul>
<li>How we can build feature/widget folders that could potentially become npm modules in their own right</li>
<li>How to compose our application&#39;s functionality around the dom</li>
<li>How we could manage event listeners when moving around the application</li>
<li>How this approach doesn&#39;t necessary preclude us from using more bulky libs like Knockout</li>
<li>How you can have multiple &quot;pages&quot; with back/forward navigationo</li>
<li>Some rules to keep things sane as the application grows over time</li>
</ul>
<p>A few different techniques were used across the code example for templating/content, this was simply to demonstrate that we had <em>options</em>, we&#39;ll discuss as part of this blog series what the standard approach might look like.</p>
<h3>The features</h3>
<p>Again not much, we have a list of customers who belong to various banks, and we want to filter those customers by their bank as well as dive into the customer&#39;s details. There is no &quot;write&quot; functionality, although this would just be a matter of presenting the customer within a form and posting it so not a stretch to extend the example.</p>
<h3> </h3>
<p>I&#39;ll go over the code from the beginning and talk about the decisions/conversations had while doing this. It&#39;ll be fun.</p>
]]></description><link>http://codeofrob.com/entries/frameworkless-js---an-example.html</link><guid isPermaLink="true">http://codeofrob.com/entries/frameworkless-js---an-example.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 05 Nov 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Primary-Secondary and when it isn't]]></title><description><![CDATA[<p>I was recently called in to do an emergency consult at a new client because their RavenDB instance was in a bit of a pickle and anybody they <em>might</em> have wanted to call in was already busy so I got the call ;-)</p>
<h2>The situation</h2>
<ul>
<li>I arrived bleary eyed at 9am, and I had less than four hours until I had to leave to get on a plane to Geneva(!!)</li>
<li>&quot;We have conflict documents all over the place in our secondary database&quot;</li>
<li>&quot;We have documents that exist in the secondary and not the primary&quot;</li>
</ul>
<p>Ruh oh!</p>
<p>My immediate assumption on hearing that their secondary was full of documents that weren&#39;t on the primary was that they were actually running a primary/primary set-up by accident, but in actual fact it was slightly more involved than that.</p>
<h2>The RavenDB Replication Bundle</h2>
<p>RavenDB replication is set up by telling a server that it has a replication destination, that is a primary is told about the secondary and instructed to push documents over there when it can get the chance. It uses etags to determine which documents need to go over and uses etags to detect conflicts and create mulitiple versions of a conflicted document.</p>
<p>The different between primary/primary or primary/secondary is simply whether you set up both servers with a replication destination or just one of them.</p>
<p><em>So far so good</em></p>
<ul>
<li>The thing is, the client has the ability to failover automatically when the primary stops being reachable for whatever reason. </li>
<li>By default the client isn&#39;t allowed to write to the secondary and it is an explicit option to turn that on.</li>
<li>The assumption is that if the primary goes down, the system should go into <em>read only</em> mode and prevent further damage</li>
</ul>
<p>This is quite a sensible set-up, and a very reasonable one because you don&#39;t know what caused that failure, don&#39;t want the failure to repeat on the secondary and a diminished functionality is still better than no functionality at all.</p>
<p>A primary/secondary set-up is conceptually a lot easier to deal with than a primary/primary or cluster-setup because you never have to deal with conflicts. Conflicts in a lot of state-based systems are painful to deal with so if we can avoid dealing with them then we should.</p>
<p>RavenDB also has the option to allow writes to secondary and <em>this is where the fun begins</em>.</p>
<ul>
<li>The application is writing to the primary</li>
<li>The primary becomes unreachable for some reason</li>
<li>The application starts writing to secondary</li>
<li>The primary becomes reachable once more</li>
<li>The application starts writing to primary</li>
<li>There are documents left orphaned on secondary!!!</li>
<li>Eventually, conflicts (or in this client&#39;s case, pretty quickly because <em>batch processes</em>)</li>
</ul>
<p>What we&#39;re saying here actually, is that if you are writing to secondary on failure, what you actually have is a primary/primary with the wrong name.</p>
<p>It&#39;s left in userland to determine what to do here, we could:</p>
<ul>
<li>Set up a replication target for the secondary so when this happens we get write-backs once primary returns</li>
<li>Manually trigger a copy of the data back to primary once we establish that primary is &quot;okay&quot;</li>
<li>Etc</li>
</ul>
<p>The essence of this though is that if we&#39;re going to be allowing writes to secondary during failure, then we need to have some form of conflict resolution set up because it&#39;s not <em>really</em> a primary/secondary relationship these servers have.</p>
<h2>Their fix</h2>
<p>We have two choices, we can </p>
<ul>
<li>Have a read-only failure mode</li>
<li>Have a write-on-failure mode but handle conflicts gracefully</li>
</ul>
<p>Opting for the latter because their internal consumer <em>always</em> wants to be able to write, the easiest approach was to write a &quot;last write wins&quot; conflict resolver. Not always advisable but in this case there were few side effects from adopting such a position.</p>
<h2>The summary</h2>
<p>You should think about your topology and what you actually want to support when setting this up. This is usually always a business decision, as it revolves around what levels of availability they need to do their job.</p>
]]></description><link>http://codeofrob.com/entries/primary-secondary-and-when-it-isnt.html</link><guid isPermaLink="true">http://codeofrob.com/entries/primary-secondary-and-when-it-isnt.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 31 Oct 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[This consultant shows you one weird trick to take down a managed database]]></title><description><![CDATA[<h3>Sysadmins hate him...</h3>
<p>I was visiting a client last week who have been having trouble with their RavenDB instance for a few months and understandably getting a bit frustrated as time went on.</p>
<h2>The scene</h2>
<p>I arrived, drank some coffee and we hit a room with the projector in it, and brought up the graphs of resource usage on the server running RavenDB - they&#39;ve been pretty handy with the <a href="http://www.splunk.com">splunk</a> and they have quite a few graphs! (Their usage of Splunk was <em>awesome</em> actually, can highly recommend looking at it)</p>
<p>Memory usage looks something like this through the day</p>
  <script type="text/javascript" src="/d3.v2.js"></script>
  <script type="text/javascript" src="/dimple.js"></script>

  <div id="initial-memory-usage"></div>

  <script type="text/javascript">
    var svg = dimple.newSvg("#initial-memory-usage", 590, 400);
    var myChart = new dimple.chart(svg, [
    { Hour: 0, Memory: 15},
    { Hour: 1, Memory: 15},
    { Hour: 2, Memory: 15},
    { Hour: 3, Memory: 15},
    { Hour: 4, Memory: 0},
    { Hour: 5, Memory: 2},
    { Hour: 6, Memory: 4},
    { Hour: 7, Memory: 4},
    { Hour: 8, Memory: 4},
    { Hour: 9, Memory: 6},
    { Hour: 10, Memory: 6},
    { Hour: 11, Memory: 7},
    { Hour: 12, Memory: 8},
    { Hour: 13, Memory: 10},
    { Hour: 14, Memory: 10},
    { Hour: 15, Memory: 10},
    { Hour: 16, Memory: 14},
    { Hour: 17, Memory: 14},
    { Hour: 18, Memory: 10},
    { Hour: 19, Memory: 10},
    { Hour: 20, Memory: 15},
    { Hour: 21, Memory: 15},
    { Hour: 22, Memory: 15},
    { Hour: 23, Memory: 15}
    ]);
    myChart.setBounds(60, 30, 510, 305)
    var x = myChart.addCategoryAxis("x", "Hour");
    x.addOrderRule("Hour");
    myChart.addMeasureAxis("y", "Memory");
    myChart.addSeries(null, dimple.plot.bar);
    myChart.draw();
  </script>


<p>That 4am block is a result of an automated process to kill their RavenDB instance every day because if they left it running it would being down the server when people were actually using the system - not so good! (It starts spiking around 9am because it starts being under quite a reasonable load).</p>
<h2>My line of questioning on seeing this</h2>
<ul>
<li>How many databases on that one instance: <em>12</em></li>
<li>How much memory on the server: <em>16gb</em></li>
<li>How many cores on that server: <em>2</em></li>
<li>How much data in the databases?: <em>Between 500mb and 13gb</em></li>
<li>How many documents in that largest database?: <em>Er, not that many</em></li>
<li>How big are those documents?: <em>Some are quite big, they have PDFs attached to them</em></li>
</ul>
<h1>Ah.</h1>
<p>The thing is, RavenDB can deal with large documents. Internally it does quite a few things to avoid objects ending up on the <a href="http://msdn.microsoft.com/en-us/magazine/cc534993.aspx">Large Object Heap</a> or being promoted to the 2nd generation.</p>
<ul>
<li>Using streams in and out of core storage</li>
<li>Using streams in an out of HTTP</li>
<li>De-serializing only into RavenObject structures (lots of small objects)</li>
<li>Not holding onto objects any longer than it has to</li>
</ul>
<p>If you were to create objects with lots of fields that reached the above size in all likelihood RavenDB&#39;s practises around this kind of thing would result in happy developers, happy ops and happy sales teams?</p>
<p>But byte arrays that are automatically put on the Large Object Heap? There is little Raven can do about these, as when the objects internally are de-serialized into tokens, the smallest token it can make with them is however large the byte array is! </p>
<p>Under what circumstances does RavenDB load these fields?</p>
<ul>
<li>Indexing</li>
<li>Querying</li>
<li>Loading</li>
</ul>
<p>Imagine now that you create a new index on the server and it has to </p>
<ul>
<li>run through all of the documents to put content into Lucene</li>
<li>To do this it has to de-serialize them</li>
<li>When being de-serialized .NET is going to say &quot;That field is large, it is going on the Large Object Heap&quot;</li>
<li>It is going to have to look for space on the LOH</li>
<li>It is going to expand the LOH</li>
<li>They&#39;re all different sizes, it is unlikely to find space in the middle very often</li>
<li>The LOH is going to keep expanding during the indexing process</li>
<li>The machine is going to run out of memory</li>
</ul>
<p>This is just typical .NET behaviour, and to make things worse, when the issues first started being noticed the first port of call was to open Raven Studio and start inspecting the server (performing queries), thus adding to the problem and causing even more hilarious memory spikes.</p>
<p>To give an indication, when opening up the performance counters for the server the kind of thing we were seeing looked like this:</p>
<p>  <img src="/img/lho.png"></p>
<p>Yes indeed, that&#39;s nearly all the memory on the server being allocated to the LHO as a result of excessive large objects of varying sizes being aggressively loaded through the indexing and querying processes.</p>
<h1>The solution?</h1>
<p>Much like with every other database out there, storing binary blobs in a store which is built for querying/transactions isn&#39;t ideal - but there are two options available here</p>
<ul>
<li>External storage (s3, fileservers, anything else)</li>
<li>RavenDB Attachments</li>
</ul>
<p>The latter isn&#39;t encouraged as it&#39;s just a convenience - but to prove a point I generated 1.5 million documents of varying sizes with byte arrays on the fields to reproduce the problem successfully on my laptop (that&#39;s actually the screenshot above), then migrated them into attachments to show what a difference this would make as attachments are <em>never</em> loaded fully into memory.</p>
<p>  <img src="/img/beforeafter.jpg"></p>
<p>What a difference choosing an appropriate store makes! In the second number the &quot;PDFs&quot; are <em>still being stored in RavenDB</em>, just not in the primary document store.</p>
<p>When I left the client their server was sitting flat at 4gb consumption (with the database still full of PDFs, but instructions in how to avoid causing issues until they had been purged)</p>
<h1>The summary</h1>
<ul>
<li>Well, I think Raven could benefit from having some sort of warning when it sees this sort of usage, although it&#39;s not <em>that</em> common so not really a priority</li>
<li>There is little a database can do to get around this sort of thing, save sticking things in off-heap storage - but that&#39;s not going to work when your indexing is written in .NET</li>
</ul>
<p>I&#39;m currently <a href="https://github.com/robashton/cravendb">writing my own database</a> in a different managed platform and I&#39;m strongly considering sticking indexing into its own process to avoid this sort of long-term build up of issues. That said - the JVM doesn&#39;t do per-process GC so that might not help that much.</p>
<p>Either way it&#39;s interesting and points to one of the limitations of writing a database or any high throughput system in a managed environment if you&#39;re going to be expecting big chunks of data that can&#39;t be broken up somehow. (Okay, this is quite specific, and will rarely catch anybody out).</p>
]]></description><link>http://codeofrob.com/entries/this-consultant-shows-you-one-weird-trick-to-take-down-a-managed-database.html</link><guid isPermaLink="true">http://codeofrob.com/entries/this-consultant-shows-you-one-weird-trick-to-take-down-a-managed-database.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 29 Oct 2013 09:30:00 GMT</pubDate></item></channel></rss>