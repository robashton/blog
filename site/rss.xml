<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Rob Ashton's blog]]></title><description><![CDATA[Software development dumping ground]]></description><link>http://codeofrob.com</link><image><url>http://codeofrob.com/img/cover.jpg</url><title>Rob Ashton&apos;s blog</title><link>http://codeofrob.com</link></image><generator>NodeJS RSS Module</generator><lastBuildDate>Mon, 23 Sep 2013 08:17:49 GMT</lastBuildDate><atom:link href="http://feeds.feedburner.com/robashton" rel="self" type="application/rss+xml"/><item><title><![CDATA[Impatiently learning Cascalog - Part 4]]></title><description><![CDATA[<p>I&#39;m on Part 4 of Cascalog for the Impatient and I&#39;ve learned</p>
<ul>
<li>I still don&#39;t enjoy the JVM that much</li>
<li>How to use generators and sinks </li>
<li>What the <em>?&lt;-</em> and <em>&lt;-</em> thingies do (roughly)</li>
<li>How to define map operations</li>
<li>How to use vanilla Clojure to clean stuff up</li>
</ul>
<p>Great, so this is where we are.</p>
<ul>
<li><a href="/entries/impatiently-learning-cascalog---part-1.html">Part 1</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-2.html">Part 2</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-3.html">Part 3</a></li>
</ul>
<p>I&#39;ve opened up the source for part4 and it is doing something a bit different so I guess I should be a little less impatient and have a look at the tutorial to see what I&#39;m looking at...</p>
<pre><code>Today's lesson takes <span class="keyword">that</span> same Word Count app <span class="keyword">and</span> expands <span class="function_start"><span class="keyword">on</span> <span class="title">it</span></span> <span class="keyword">to</span> implement a stop <span class="property">words</span> filter.</code></pre>
<p>There is some waffle about the TF-IDF algorithm doing some of this for us, but we might want to do it ourselves because of swear-words. I suppose I should go and read about TD-IDF at some point but for now I&#39;m going to move on with this Cascalog stuff and accept that stuff exists and I don&#39;t know about it yet.</p>
<h1>Left join</h1>
<p>Feasibly we could write a custom filter method and check if a word is valid, but that&#39;s going to be a bit of a ball-ache. So, we&#39;re told that we&#39;re doing a left-join between the two sets of data.</p>
<p>That&#39;s an interesting notion to me because we&#39;re in the world of Map/Reduce and that&#39;s not something I&#39;m used to reading in this world.</p>
<p>So how does this work?</p>
<pre><code class="lang-clojure">  <span class="list">(<span class="title"><span class="built_in">let</span></span> <span class="collection">[rain <span class="list">(<span class="title">hfs-delimited</span> in <span class="attribute">:skip-header?</span> <span class="literal">true</span>)</span>
        stop <span class="list">(<span class="title">hfs-delimited</span> stop <span class="attribute">:skip-header?</span> <span class="literal">true</span>)</span>]</span></code></pre>
<p>Unlike  in the previous codes, rather than simply invoke the generator with the variables, we stick it in a let block alongside another generator containing stop words.</p>
<p>At this point in my mind I&#39;m viewing them as two tables of data, ripe for <em>doing stuff with</em>.</p>
<p>The next line we start going about things the way we&#39;re used to</p>
<pre><code class="lang-clojure">    <span class="list">(<span class="title">?&lt;-</span> <span class="list">(<span class="title">hfs-delimited</span> out)</span>
         <span class="collection">[?word ?count]</span></code></pre>
<p>So we&#39;re sinking words and counts into the destination file again - that&#39;s cool.</p>
<p>We then invoke the rain generator and tidy it up like in the past two examples</p>
<pre><code class="lang-clojure">    (rain _ ?line)
    (split ?line :&gt; ?word-dirty)
    ((c/comp s/trim s/lower-case) ?word-dirty :&gt; ?word)</code></pre>
<p>I can&#39;t really see why we wouldn&#39;t just write this with the generator inline like this</p>
<pre><code class="lang-clojure">    ((hfs-delimited in :skip-header? true) _ ?line)
    (split ?line :&gt; ?word-dirty)
    ((c/comp s/trim s/lower-case) ?word-dirty :&gt; ?word)</code></pre>
<p>Other than I guess declaring the generators at the top just makes it clear to the reader where our data is coming from.</p>
<p>The interesting bit is where we then invoke the stop word generator wit hteh word that we have</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title">stop</span> ?word <span class="attribute">:&gt;</span> <span class="literal">false</span>)</span></code></pre>
<p>Well wow, I&#39;m not really sure what I&#39;m looking at here at all, I guess there is some more magic going on where it knows I&#39;ve used the <em>?word</em> as a field and it can work out that I want to do a join on these two things based on that. I&#39;m mapping the result of this to &#39;false&#39; which I assume means <em>I don&#39;t want that crap if it returns something</em>.</p>
<p>The major difference between the files I&#39;m looking at here (the stop file, and the rain file) is that the rain file has two columns and the stop file has one column so it has to just be the fact that I used the same name here that made the magic happen.</p>
<p>I don&#39;t find any of this intuitive - but I can take it at face value once more and accept that it works if I do it this way. My urge to go and see how this stuff is implemented is growing and there are only two more stages of this tutorial left for me to follow.</p>
<p>The complete query looks like this by the way</p>
<pre><code class="lang-clojure">(defn -main [in out stop &amp; args]
  (let [rain (hfs-delimited in :skip-header? true)
        stop (hfs-delimited stop :skip-header? true)]
    (?&lt;- (hfs-delimited out)
         [?word ?count]
         (rain _ ?line)
         (split ?line :&gt; ?word-dirty)
         ((c/comp s/trim s/lower-case) ?word-dirty :&gt; ?word)
         (stop ?word :&gt; false)
         (c/count ?count))))</code></pre>
<p>Running the demo with</p>
<pre><code>~/build/hadoop-<span class="number">1.2</span><span class="number">.1</span>/bin/hadoop jar target/impatient.jar <span class="typedef"><span class="keyword">data</span>/rain.txt output/wc <span class="keyword">data</span>/en.stop</span></code></pre>
<p>Seems to yield in a sensible word count being generated like so</p>
<pre><code><span class="title">air</span>             <span class="number">1</span>
<span class="title">area</span>            <span class="number">4</span>
<span class="title">australia</span>       <span class="number">1</span>
<span class="title">broken</span>          <span class="number">1</span>
<span class="title">california's</span>    <span class="number">1</span>
<span class="title">cause</span>           <span class="number">1</span></code></pre>
<p>etc</p>
<p>So, I guess the lesson here is that you can do joins between generators by using the same field name when running them. Neato.</p>
<p>At this point I have to go away for the weekend to get drunk in a field, so I&#39;ll have to skip the rest of the tutorial and start work on something real at the Mastodon C office.</p>
]]></description><link>http://codeofrob.com/entries/impatiently-learning-cascalog---part-4.html</link><guid isPermaLink="true">http://codeofrob.com/entries/impatiently-learning-cascalog---part-4.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 17 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Impatiently learning Cascalog - Part 3]]></title><description><![CDATA[<p>Onwards to Part 3 of the Cascalog for the Impatient tutorial, now my JVM appears to be behaving itself and I&#39;m able to run the examples again.</p>
<ul>
<li><a href="/entries/impatiently-learning-cascalog---part-1.html">Part 1</a></li>
<li><a href="/entries/impatiently-learning-cascalog---part-2.html">Part 2</a></li>
</ul>
<p>Part 3 seems to be pretty simple, adding a custom function to scrub text - written in a style I can actually understand thanks to the Clojure I&#39;ve written so far.</p>
<pre><code class="lang-clojure">(defn scrub-text [s]
  &quot;trim open whitespaces and lower case&quot;
  ((comp s/trim s/lower-case) s))</code></pre>
<p>The main point of this step of the guide seems to be about data sanitisation, and why you would use custom functions to do that - rather than anything new relating specifically to Cascalog.</p>
<p>Being able to use vanilla Clojure functions to manipulate data comes with some benefits, the main one being that we can test this stuff independently and then import it into the Cascalog query where we know at least that bit works. </p>
<p>This is pretty important because tidying up edge cases is generally a rather iterative process and you want the feedback loop to be fast (I can get behind that notion)</p>
<p>This is used in the following manner</p>
<pre><code class="lang-clojure">(defn -main [in out &amp; args]
  (?&lt;- (hfs-delimited out)
       [?word ?count]
       ((hfs-delimited in :skip-header? true) _ ?line)
       (split ?line :&gt; ?word-dirty)
       (scrub-text ?word-dirty :&gt; ?word)
       (c/count ?count)))</code></pre>
<p>In this query, it&#39;s just another step - where we call the function with the output of the split function (which is <em>?word-dirty</em>), and then output the result of that as <em>?word</em></p>
<p>This is starting to make sense now, and it no longer looks like vomit when I read it. I&#39;d like to see what is going on under the hood to satisfy my curiosity but that can wait until I&#39;ve finished the tutorial.</p>
<p>Onwards to Part 4...</p>
]]></description><link>http://codeofrob.com/entries/impatiently-learning-cascalog---part-3.html</link><guid isPermaLink="true">http://codeofrob.com/entries/impatiently-learning-cascalog---part-3.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 12 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Impatiently learning Cascalog - Part 2]]></title><description><![CDATA[<p>I&#39;m skimming through Cascalog for the Impatient and documenting my questions/learnings as I go for my future benefit.</p>
<ul>
<li><a href="/entries/impatiently-learning-cascalog---part-1.html">Part 1</a></li>
</ul>
<h1>Part 2</h1>
<p>Apparently in this part we&#39;re going to update our first code so as to count the words in our document and that&#39;s the first step towards implementing a <a href="http://en.wikipedia.org/wiki/Tf*idf">tf-idf</a> implementation - cool story bro, I have no idea what one of those is but moving on.</p>
<p>I quite like the explanation given at the beginning of the article for why it&#39;s important that we be able to copy data from one place to another, and why we&#39;d use Cascalog for this. Basically we&#39;re talking about being able to make guarantees about this operation and that&#39;s going to be important when we&#39;re trying to write logic on top of this process.</p>
<p>So anyway, we&#39;re given the following code</p>
<pre><code class="lang-clojure"><span class="list">(<span class="title">defmapcatop</span> split <span class="collection">[line]</span>
  <span class="string">"reads in a line of string and splits it by regex"</span>
    <span class="list">(<span class="title">s/split</span> line #<span class="string">"[\[\]\\(\),.)\s]+"</span>)</span>)</span></code></pre>
<p>I guess that &#39;defmapcatop&#39; is a macro for defining map operations, and this appears to be splitting a line by whitespace.</p>
<p>Googling this doesn&#39;t appear to yield in the documentation, which is a bit unfortunate - but a bit of rummaging around finds a handy page for <a href="http://entxtech.blogspot.co.uk/2010/12/which-operation-def-macro-should-i-use.html">&quot;which def should I use&quot;</a>  which suggests that I&#39;m on the right track with that line of thought.</p>
<p>Okay, so we can move on from this pretty swiftly and see how we&#39;re going to use this</p>
<pre><code class="lang-clojure">(defn -main [in out &amp; args]
  (?&lt;- (hfs-delimited out)
       [?word ?count]
       ((hfs-delimited in :skip-header? true) _ ?line)
       (split ?line :&gt; ?word)
       (c/count ?count)))</code></pre>
<p>Well, I have to say I can barely read this - my Clojure-fu is not strong when mixed with the Cascalog.</p>
<p>But, we can see</p>
<ul>
<li>We&#39;re using the (?&lt;- thingy again, so we&#39;re running this query now</li>
<li>We&#39;re &#39;sinking&#39; our output, whatever that is to the &#39;out&#39; path</li>
<li>This time, we&#39;re outputting the variables &quot;word&quot; and &quot;count&quot;</li>
<li>We&#39;re reading in from &#39;in&#39;, to the variables &#39;_&#39; and &#39;?line&#39;</li>
<li>I guess we&#39;re using &#39;_&#39; because we&#39;re ignoring that</li>
<li>We split the line into the ?word variable</li>
<li>The :&gt; thingy seems to be a bit of magic to do that</li>
<li>And then we count that into the ?count variable</li>
</ul>
<p>I am mega-confused reading this because I can&#39;t actually tell how it maps to what I know about Clojure/Lisp.</p>
<ul>
<li>It&#39;s weird because our output is on top, and takes in the variables ?word and ?count which aren&#39;t defined yet</li>
<li>That&#39;s weird because despite the output at the top, our predicates are written in the order they&#39;re going to be run</li>
<li>It&#39;s weird because of that :&gt; thingy</li>
</ul>
<p>The way I understand the documentation is that Cascalog looks at the dependencies of each predicate and only runs them when they have been fulfilled. I guess the &#39;sink&#39; relies on ?word and ?count being available and isn&#39;t run until they are or something like that.</p>
<p>This is neatly explained by the Cascalog for the Impatient guide in terms of the &quot;logic programming&quot; paradigm so I&#39;ll accept that for now.</p>
<p>I suspect that the <em>(?&lt;-</em> thingy is actually a macro of some sort that re-writes this into something more sane, but who knows right?</p>
<p>Running this with</p>
<pre><code><span class="title">lein</span> uberjar
<span class="title">hadoop</span> jar ./target/impatient.jar <span class="typedef"><span class="keyword">data</span>/rain.txt output/wc</span></code></pre>
<p>Gives me a wonderful &quot;out of memory exception&quot;, so I post a dump on the mailing list and have a look at my environment.</p>
<p>Things I tried while I waited for a response</p>
<ul>
<li>Re-install the hadoop package (1.2.1) but the x64 version</li>
<li>Edit the configuration files to force 2048mb of heap size</li>
<li>Clear my hadoop installation again</li>
<li>Download the raw tar.gz for hadoop</li>
<li>Configure that</li>
<li>Run that: Success</li>
<li>Run it again, failure</li>
<li>Restart laptop for the fifth time</li>
<li>Everything works, QUICK DON&#39;T TOUCH IT ANY FURTHER</li>
<li>TLDR: I <em>still</em> really hate the JVM, or it hates me - whatever</li>
</ul>
<p>Side note: The project pages for Hadoop are <em>awful</em>, I had to go through a dozen links before I got to download anything - it felt like it was <em>trying</em> to make me feel stupid, but oh well - carrying on.</p>
<p>The real output?</p>
<pre><code><span class="title">A</span>    <span class="number">3</span>
Australia    <span class="number">1</span>
Broken    <span class="number">1</span>
California<span class="string">'s    1
DVD    1
Death    1
Land    1
Secrets    1
This    2
Two    1
Valley    1</code></pre>
<p>Etc - so I&#39;m happy enough with that.</p>
<p>I&#39;m still not <em>that</em> happy with the crazy syntax of the Clojure, I&#39;m grabbing at it and going with the rolling assumption that the logic-like-system is just a bunch of macros on top of vanilla Clojure and &quot;just works&quot;, so &quot;shut up and carry on Rob&quot;.</p>
<p>Onto part 3 then...</p>
]]></description><link>http://codeofrob.com/entries/impatiently-learning-cascalog---part-2.html</link><guid isPermaLink="true">http://codeofrob.com/entries/impatiently-learning-cascalog---part-2.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 10 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[The use of Clojure in the CDEC Open Health Data Platform]]></title><description><![CDATA[<p>I&#39;m currently at <a href="https://www.mastodonc.com/">Mastodon C</a> where I am learning new stuff, both for the pleasure of learning and also to pick up skills that will be useful to my clients in the future - I am also blogging about this in a series which has entries queued up for the next few weeks.</p>
<p>As part of my time here, I am contributing work to the <a href="http://openhealthdata.cdehub.org/">CDEC Open Health Data Platform</a>, and came across a blog entry which suggested that the use of <a href="https://cde.catapult.org.uk/blogviews/-/asset_publisher/XwNC0wXN7ru2/blog/a-taste-of-things-to-come-so-how-do-we-write-our-own-recipes-?redirect=https://cde.catapult.org.uk/blogviews%3Fp_p_id%3D101_INSTANCE_XwNC0wXN7ru2%26p_p_lifecycle%3D0%26p_p_state%3Dnormal%26p_p_mode%3Dview%26p_p_col_id%3Dcolumn-2%26p_p_col_count%3D2">Clojure for this platform was a bad fit for a number of reasons</a>.</p>
<p>So, putting the queued up blog entries to one side, and posting out of phase halfway through my work here I wish to respond to the article, based on my own experiences and interpretation of the project. (<em>I am not speaking for Mastodon, as any regular reader will know my words are always my own and I can&#39;t write things any other way!</em>)</p>
<h3>The industry lacks the experience required to contribute to the CDEC platform</h3>
<p>This is the primary assertion made to question the use of Clojure in this platform. It is made off the back of a number of searches being made on <a href="http://indeed.co.uk">indeed.co.uk</a>, which resulted in less than a 1% hit rate for that technology. </p>
<p>I am always uncomfortable when people classify developers or themselves as either &quot;Java developers&quot; or &quot;C# developers&quot; as if the years of experience they have in those areas aren&#39;t going to help when moving to other platforms.  I&#39;ve feel that it massively undervalues their actual experience to qualify it with a single attribute in that way.</p>
<p>This feels like an extension of that somehow, because it fails to take into account people&#39;s abilility to learn new things based on previous experience.</p>
<p><em>My own experience with Clojure/Cascalog</em></p>
<p> <img src="/img/map.png" class="pull-left"></p>
<p>I am reluctant to draw on my own anecdotal experience because it&#39;s very easy to dismiss such things, but I wish to make the point that I am exactly the sort of person that will be found looking for .NET development jobs on a site like indeed.co.uk. I am the person who (used to) have a LinkedIn account littered with key-words for .NET and JavaScript and nothing else.</p>
<p>My own experience is as such that I don&#39;t have any experience on the JVM (the runtime on which Clojure is built on), I&#39;ve never looked at Hadoop in my life and I spent a few evenings trying to write Clojure in order to learn it before making the leap to attempting to contribute to the Open Health Data Platform. In essence, I am one of the least qualified people (going on sites like LinkedIn/Indeed) to be working on this platform.</p>
<p>Within a few days I feel as if I&#39;ve made substantial progress being able to find the data sets, process them through cascalog, aggregate and join various aspects of this data and generate some meaningful results off of this.  (See image to the left). The information available on the internet on the subject is plentiful, freely open and the community is welcoming of questions about how to work on things.</p>
<p><em>The intern&#39;s experience with Cascalog and Clojure</em></p>
<p>I am not the first to tread down this path either, before me was <a href="https://twitter.com/AnnaPawlicka">Anna Pawlicka</a>, who wrote a <a href="https://github.com/CDECatapult/cdec.openhealthdata/contributors">large amount of code</a> in the current codebase as part of her internship at Mastodon.</p>
<p>The code works great, and she <a href="http://annapawlicka.com/the-end-of-summer-the-end-of-internship-the-end-of-awesome/">wrote an entry of her own experiences</a>. Although I have not spoken to Anna, her experiences seem to mirror my own in terms of getting working productively in this environment for the first time.</p>
<p><em>Experience is more than just key-words</em></p>
<p>While this evidence <em>is</em> only anecdotal; it maps cleanly onto what I have learned in my years of software development - that developers can learn new things when necessary and that the choice of a very good technology shouldn&#39;t be overlooked because folk don&#39;t have it on their CV yet.</p>
<h3>The need for a higher level of abstraction</h3>
<p>This is another closing point made in the original blog entry, that the current stack itself is too low level for the majority of the R&amp;D community to be getting involved with.</p>
<p>I&#39;d be wary of such endevours because most of my enterprise experience has been about striving for higher levels of abstraction in order that the majority of some community can get involved with a product or business intelligence efforts. Invariably this has taken place in environments where the vast majority of the actual users are competent Excel users, and we end up replacing a powerful tool (Excel) with some less powerful and less flexible replica of excel written in a costly platform.</p>
<p>Far better in my opinion to be bringing the researchers with the training and the developers with the experience together in order to create knowledge, rather than spend time trying to create potentially costly abstraction.</p>
<p>While I am not saying that some level of automation or workflow assistance aren&#39;t ultimately desirable, It would be remiss of the project coordinators to let this desire override the basic need for the power to ask the questions that are needed over the top of the data provided.</p>
<p>The thing about data, is that the questions we want to ask tend to be very different across different data sets, and we tend to be better off looking at how other people have solved similar problems and re-implementing these approaches for the specific domain under question.</p>
<p>Cascalog seems to be a perfect level of abstraction for dealing with these data-sets, with enough power to do anything wanted and enough magic to hide the technological problems away from the developer. </p>
<h3>In closing</h3>
<p>I am excited about the Open Health Data Platform and its purpose, and I am excited about the technology being used.</p>
<p>Like the original author, I am also excited about the way in which this project is being developed in the open and pushed out on regular intervals forfeedback such as that.</p>
<p>I have four more days left at Mastodon (out of a total of 5 so far), and hopefully I can contribute many more examples to the project between now and then to help other people follow in these footsteps in the future!</p>
]]></description><link>http://codeofrob.com/entries/the-use-of-clojure-in-the-cdec-open-health-data-platform.html</link><guid isPermaLink="true">http://codeofrob.com/entries/the-use-of-clojure-in-the-cdec-open-health-data-platform.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Mon, 09 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Impatiently learning Cascalog - Part 1]]></title><description><![CDATA[<p>My client for the next 8-9 days is going to be <a href="https://www.mastodonc.com/">Mastodon C</a>, who have kindly agreed to let me work for them in order to get some real-world Clojure-ish experience and pick up whatever other skills are there to be picked up while I&#39;m at it in the field of data anlytics.</p>
<p><a href="http://twitter.com/otfrom">@otfrom</a> has pointed me in the direction of &quot;<a href="https://github.com/Cascading/Impatient-Cascalog">Cascalog for the Impatient</a>&quot; and a the &quot;<a href="http://openhealthdata.cdehub.org/">CDEC Open Health Data Platform</a> (mapping diabetes across the UK)&quot; in preparation for my week working with them and before I turn up I&#39;m going to go through the tutorial and see what I understand and what I don&#39;t understand and write about my thought processes as I do it.</p>
<p>Anybody else following the Cascalog for the Impatient tutorial for the first time might find my notes useful, but at any rate <em>I&#39;ll</em> be able to go back and look at them myself and that&#39;s worthwhile too.</p>
<p>So...</p>
<h2>Part 1</h2>
<p>I git cloned the repo, and typed </p>
<pre><code><span class="title">lein</span> uberjar</code></pre>
<p>This built me a jar and I was able to run Hadoop with the following command:</p>
<pre><code> hadoop jar target/impatient.jar <span class="typedef"><span class="keyword">data</span>/rain.txt output/rain</span></code></pre>
<p>Which did something with the input &quot;rain.txt&quot; and dumped it in the specified output folder.</p>
<p>This satisfied for me that my environment is sane and I could therefore carry on with the tutorial.</p>
<p>First up, we are shown this code with some rough explanation of how it works</p>
<pre><code class="lang-clojure">(defn -main [in out &amp; args]
  (?&lt;- (hfs-delimited out)
    [?doc ?line]
    ((hfs-delimited in :skip-header? true) ?doc ?line)))</code></pre>
<p>I find the tutorial at this point to make some assumptions about my knowledge of what is going on here, it states that</p>
<ul>
<li>We have a main method that takes in an &#39;input&#39; and &#39;output&#39; path</li>
<li>We can create a <em>generator</em> over &#39;in&#39; using (hfs-delimited)</li>
<li>We can create a <em>sink</em> over &#39;out&#39; using (hfs-delimited)</li>
<li>We then name the vars from the generator with the ?doc ?line bits</li>
</ul>
<p>However, I have a few questions outstanding from this, chiefly</p>
<ul>
<li>Wtf is a generator</li>
<li>Wtf is a sink</li>
<li>Wtf is up with that <em>(?&lt;-</em> thingy</li>
<li>How are we naming those vars, how come its different for the sink and the generator?</li>
</ul>
<p>Dumb questions I&#39;m sure - but I&#39;m happy enough to admit my ignorance and press on.</p>
<p>I read the page linked in the impatient docs: <a href="https://github.com/nathanmarz/cascalog/wiki/How-cascalog-executes-a-query">How cascalog executes a query</a></p>
<p>And I establish that (at least as a working hypothesis)</p>
<ul>
<li>A generator is just a predicate that gives you data?</li>
<li>A sink is somewhere the output can be put (a query can just have an output specified and that&#39;s it)</li>
<li>The (?&lt;- thingy is like the (&lt;- thingy, and what they are is simply<ul>
<li>The one without a question mark is a definition of a query</li>
<li>the one with a question mark is both the definition and an execution of a query</li>
</ul>
</li>
<li>the naming of the vars - ... is just &quot;because&quot;, I&#39;ll take that at face value and move on</li>
</ul>
<h1>The result of running this thing</h1>
<p>I see that in the output folder there is a file called part-0000 which has the same content as the input file. So it looks like our generator and our sink are effectively the same thing and we&#39;re just streaming the data from one place to another without changing it.</p>
<p>Okay then, I guess I&#39;ll look at part two next and see if anything I&#39;ve made a guess about here is right at all.</p>
]]></description><link>http://codeofrob.com/entries/impatiently-learning-cascalog---part-1.html</link><guid isPermaLink="true">http://codeofrob.com/entries/impatiently-learning-cascalog---part-1.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 05 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[An ode to Sebastien Lambla]]></title><description><![CDATA[<p>I had the pleasure of working directly with <a href="http://twitter.com/serialseb">@serialseb</a> for a period of nearly 10 months at a client we both worked at last year. I also shared (part-time) my apartment with the chap as the client was in Belgium and he lived in London and that seemed to work out pretty well for us all. (Getting pretty decent at bowling any way!)</p>
<p>I therefore write this testimonial from a position of having worked with Seb and having spent time with him outside of work and growing our knowledge together outside of our client-work.</p>
<p>He has recently become available and I thought I&#39;d write something about what I learned about Seb because he&#39;s a unique individual that any company should feel privileged to be able to hire.</p>
<h1>Seb knows his stuff</h1>
<p>This is immediately obvious if you&#39;ve ever hung out with Sebastien after a conference or user group meeting - start talking on a subject that Seb is familiar with and you&#39;ll find yourself learning things immediately. The value of this cannot be understated - everytime I was working on a feature at our shared client I&#39;d find myself asking Seb <em>&quot;Is there a standard for this&quot;</em>, or <em>&quot;have you encountered this problem before?&quot;</em> - the answer would usually be yes and he would save me days in terms of design or decision making.</p>
<p>This is not something to be under-valued - if you want somebody to help you design an API or any sort of system at all, Seb will usually have a pattern or experience to recall to save valuable time in that area.</p>
<h1>Seb does OSS</h1>
<p>Seb is the KING of .NET OSS, the KING. I remember I was at a conference in Reading just after my final year of university and even then, one of my best friends was saying <em>have you heard</em>, there is this guy who has torn ASP.NET apart and built it up from scratch so you can build real interoperable HTTP applications with C#.  This was way before NuGet, before Github existed and before most people had even considerered even using any open source .NET stuff at all - even NHIbernate.</p>
<p>I didn&#39;t know who Seb was at that time or that I&#39;d be working with him in the future, but this was insane big news for me - that somebody could tear apart the monolithic framework that I was building my <em>awful</em> crap on top of was absolutely amazing. I sat in his talk at that conference in complete rapture and awe and never forget that this forward thinker existed back then to challenge my ideas of what I should expect from an enterprise .NET web framework.</p>
<p>He has worked so hard on <a href="http://en.wikipedia.org/wiki/OpenRasta">OpenRasta</a>, and before NuGet existed pushed very hard on projects like <a href="http://www.openwrap.org/">OpenWrap</a>, trying to improve the abilities of open source projects in .NET to thrive as much as they do in other environments like the JVM or ruby. </p>
<p>The tenacity to carry on pushing open source .NET in the years where it wasn&#39;t even considered in any organsations is one of the big reasons I respect Seb - before OSS was a thing in our world he was standing up there and telling us we should be better.</p>
<h1>Seb is a thought leader</h1>
<p>In a similar vein, you can&#39;t work with Seb without realising he is very much ahead of the times in so far as ideas on software development. &quot;<em>You&#39;re doing it wrong and this is why</em>&quot; is something you become accustomed to hearing and after the first couple of discussions you realise he&#39;s been right all along.</p>
<p>Whether it be in terms of communication with the business, software architecture or API design if Seb states an opinion it is pretty much always the result of past experiences and a ton of research that has led to that opinion. You have a discussion around a subject and a few days later realise that the position you were arguing from was flawed and perhaps Seb is right after all.</p>
<p>That to me is the true definition of a thought leader, somebody who is thinking the thoughts and laying down <em>The Way</em> before other people have a chance to go &quot;hey, that&#39;s obvious - why are we doing it any other way&quot;</p>
<p>So many of the ways I now interact with people or design software can be directly attributed to my time working with Seb (yes, even the bits where I&#39;m all like <em>guys, let&#39;s be pragmatic about this</em>, because Seb is a very pragmatic person when you get down to the issue of actually delivering software in a timely fashion with the desired quality.</p>
<h1>Seb cares about shared knowledge</h1>
<p>Seb is not a one-man knowledge silo. The way I try to share knowledge when I work on a feature or product can be tied directly back to the time I spent with him - realising that anything I work on should be shared and understood by everybody else as I work on it.</p>
<p>Continuous integration is more than &quot;deploying all the time&quot;, it&#39;s about the team having shared context <em>all the time</em> and not diverging down their little paths of &quot;I&#39;m busy, my headphones are on, leave me alone&quot; - I learned that off Seb and it has made me a much better developer as a consequence.</p>
<h1>Seb is pragmatic</h1>
<p>It&#39;s really interesting working with Seb after following his online presence for so long - the opinionated person I know on Twitter might be the person I worked with, but the result was so much more effective than I ever imagined. </p>
<p>Seb will talk to the business and work out what is actually important - he won&#39;t waste time building software that isn&#39;t needed. You should give him your team and let him direct that team towards success. I advocate listening to him and doing as he says and <em>shipping it</em> - I cannot stress this enough.</p>
<h1>Hire him ffs</h1>
<p>Get in touch with the guy while he&#39;s still free as it won&#39;t last - this is my very personal testimonial and I&#39;d like it to not go to waste. If you&#39;re doing C# and you care about design/architecture/http/etc then you&#39;re losing money by not doing so!</p>
<p><strong>Details</strong></p>
<ul>
<li><a href="thetechnologist@gmail.com">thetechnologist@gmail.com</a></li>
<li><a href="http://twitter.com/serialseb">@serialseb</a></li>
</ul>
<p><em>note</em>: I&#39;m writing this because I believe in Seb, I do not have any commercial interests in this matter at all.</p>
]]></description><link>http://codeofrob.com/entries/an-ode-to-sebastien-lambla.html</link><guid isPermaLink="true">http://codeofrob.com/entries/an-ode-to-sebastien-lambla.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 03 Sep 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Don't be a super hero]]></title><description><![CDATA[<p>This is a write-up of yet another Pub Rant(tm). Nothing new here, just my own take on a subject.</p>
<p><em>Picture the scene...</em></p>
<h1>You&#39;re at Enterprise Company ACME1337 Ltd</h1>
<p>Deadlines are looming, technical debt is mounting, the developers are de-motivated and you Have Solutions To Problems if only your manager would listen to you and put the work into the issue tracker to be worked on.</p>
<p>That feature that really needs to go in? That technical improvement that needs to take place in order for the team to remain sane - the answer hits you! If you stay late or bring a laptop home you can do it off the books and Make That Change that will save the day.</p>
<p>You go in the next day and people congratulate you, you feel good about yourself and perhaps do it again the next day, and the next day and the next. You start working on these things in your weekend and you feel that perhaps you&#39;re making a difference to that codebase, maybe you get promoted because you do this sort of thing often and you feel that you&#39;re helping your career and company by Making A Difference.</p>
<p>Maybe your friends tell you have some work/life balance issues but you take it as a complement and they&#39;re just too blind to see that you&#39;re changing things and it&#39;s for the greater good. Perhaps you feel that everybody else needs to work a little bit harder like you and why can&#39;t they see that this stuff is super important. </p>
<p>Perhaps you&#39;re unable to articulate to that hiearachy above you why these things are important because you feel like the technical debt is something you should be shielding from the business somehow and it&#39;s all the developers fault anyway.</p>
<p>I&#39;ve been here, <em>but in hindsight...</em></p>
<h1>You&#39;re not solving the actual problem</h1>
<p>The problem is probably cultural. The business has gotten used to the idea that we&#39;ve placed in their heads that development is this magic box that requests go into and features come out of. The business and developers don&#39;t talk very much, there is a hieararchy of managers above development to protect them from each other and requests for &quot;time to fix this crap&quot; don&#39;t cut much muster.</p>
<p>By trying to stimmy the tide of rushed features and work, all that is happening is that Business Carries On As Usual because as far as everybody is concerned everything is <em>fine</em> and besides, &quot;Alice will fix that thing at the weekend&quot;</p>
<p>By making yourself available to this extra work, you&#39;re only going to be asked to do more of that extra work. Oh sure, your manager might <em>say</em> &quot;Oh don&#39;t overwork yourself, take some time off&quot;, but secretly they&#39;re thinking of the next thing they can get you to rescue so they can get the credit and move to Management Level n+1 off the back of your efforts.</p>
<p>By patching up the symptoms, you&#39;re hiding the real problems of culture and visibility that need fixing and perhaps more importantly...</p>
<h1>You&#39;re hurting your colleagues</h1>
<p>How about Bob on the desk in the team next to you? How does Bob feel about this effort that you&#39;re putting in? Perhaps they&#39;re an old and wise developer and Know Better, but perhaps they&#39;re a junior developer who look at this super hero as something to emulate and aspire towards.</p>
<p>How do they feel when you come in from a hard weekend of work and they had the audacity to have fun instead? How do they feel when they leave the office at 18:30 and you&#39;re still slogging away on that piece of work that you&#39;ll be there until 10pm on and still not finish?</p>
<p>Pretty awful, that&#39;s how they&#39;ll feel - and perhaps they&#39;ll be encouraged to join you in your efforts and further hide the problem with this extra work off the books and ... well we can see where this vicious little circle goes can&#39;t we?</p>
<h1>Be a hero by breaking the cycle</h1>
<p>If you&#39;re a good developer, you&#39;ll quickly end up in some position in the corporate hieararchy where you&#39;re responsible for something other than bashing keys on a keyboard. This can be a good thing or a bad thing depending on how many meetings you&#39;re then going to be asked to attend outside your area of competence.</p>
<p>Let&#39;s go back to that original problem of asking permission off your manager to spend time &quot;fixing this technical thing&quot;, or &quot;upgrading this technical thing&quot;, or &quot;training the team on something that&#39;ll help get things done better&quot;.</p>
<p>It doesn&#39;t work, or you&#39;re asked to &quot;think about ways of improving the process before the next review&quot;, whatever - stop right there.</p>
<p>The problem is in the culture. Change the culture. You&#39;re in a position of responsibility, allocate the time as part of the daily grind and make it happen. Take responsibility to make sure that everybody who can solve important problems are solving those important problems. Don&#39;t ask permission, just do it. </p>
<p>You&#39;re not going to get fired because you&#39;re too important an asset to the company. If you&#39;re unable to justify the time spent after the fact you&#39;re either really bad at explaining things or you&#39;re not picking the right problems to solve. </p>
<p>If the team needs to learn how to do something better, then take an hour or two out over the week and spend time with the team to help them learn how to do that thing better. The company will reap the benefits of this over time and so will you because you&#39;ll be able to spend time with that partner, or dog or World of Warcraft.</p>
<p>The chances are that in your wonderful hieararchy of Enterprise Goodness (tm) that nobody in the business will notice - you&#39;ll still be delivering (perhaps slower to begin with), but you think they actually measure that stuff with any effectiveness? They&#39;re too busy selling selling selling because that&#39;s more important anyway. You&#39;re a black box, and what you do inside that black box is not their concern.</p>
<h1>Don&#39;t</h1>
<ul>
<li>Schedule time outside of work <em>at</em> work for team improvement</li>
<li>Ask for permission to improve the project you&#39;re working on</li>
<li>Work outside of hours to &quot;fix that one thing&quot; </li>
<li>Attack the symptoms</li>
</ul>
<h1>Do</h1>
<ul>
<li>Invite colleagues to dev events <em>outside</em> of work for team improvement</li>
<li>Set time aside as part of the ordinary working cycle to Make Things Better</li>
<li>Explain why you&#39;re doing what you&#39;re doing when asked</li>
<li>Measure what effect this has on your overall capacity</li>
<li>Be a part of culture change</li>
<li>Solve the cause of the problems</li>
</ul>
<h1>Separation</h1>
<p>Separation of Work and Life is important, respect it or you&#39;ll all lose in the long run.</p>
]]></description><link>http://codeofrob.com/entries/dont-be-a-super-hero.html</link><guid isPermaLink="true">http://codeofrob.com/entries/dont-be-a-super-hero.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 25 Jul 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[I am free again]]></title><description><![CDATA[<p><a href="/entries/im-leaving-.net.html">It wasn&#39;t working out as well as I hoped.</a></p>
<p>Not quite as dramatic as <a href="http://tekpub.com/products/change-it-up">my last exit</a>, but quitting while I&#39;m ahead in terms of personal relationships and drama. I&#39;m not motivated enough for it to work out.</p>
<p><em>So with that...</em></p>
<p>My plans? I&#39;m open to suggestions, if anybody wants me for a month or so and can pay me a reasonable amount of cash for the work then hit me up at <a href="mailto:robashton@codeofrob.com">robashton@codeofrob.com</a>. That&#39;s .NET, Ruby or JS - don&#39;t really care. I&#39;d prefer to be tappity tappity at a keyboard, but will consider doing some JS or Raven training if you ask nicely.</p>
<p>I&#39;m currently in London, giving some consideration to hanging around here for various reasons but also happy to leave the city once more as well. That&#39;s a discussion we can have. </p>
<p>My needs/desires are still pretty <a href="/entries/i-am-interested-in-talking-about-work.html">much as they were before</a>:</p>
<ul>
<li>I prefer not having to work in the office</li>
<li>I prefer working in coffee shops</li>
<li>Money isn&#39;t so important, but I need to be able to afford coffee and beer.</li>
</ul>
<p>I don&#39;t think taking on anything as a &quot;long term thing&quot; is going to be right for me right now so please don&#39;t come at me with such offers. I&#39;d prefer a short term relationship with anybody I&#39;m going to be working with, and if we hit it off perhaps we can re-negotiate that after the fact.</p>
<p><em>Let&#39;s try this again</em></p>
<p>I&#39;m going to keep trying until I <a href="/entries/working-for-free-and-what-it-taught-me.html">get it right</a>, this probably won&#39;t be the last time this year :)</p>
]]></description><link>http://codeofrob.com/entries/i-am-free-again.html</link><guid isPermaLink="true">http://codeofrob.com/entries/i-am-free-again.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Wed, 24 Jul 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[jQuery is not a framework but I avoid using it too]]></title><description><![CDATA[<p>The very first thing I usually want to do with a project, is to do something with the dom.</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma, no frameworks</a></li>
<li><a href="/entries/grunt+browserify+npm+application=success.html">Grunt+browserify+npm+application=success</a></li>
</ul>
<p><em>What is jQuery?</em></p>
<p>jQuery isn&#39;t a framework, it doesn&#39;t take over your entry point, doesn&#39;t force any sort of structure on you and doesn&#39;t have any of the other smells associated with frameworks in general; it is a general purpose glue library.</p>
<p>Most people will by default pull it down and start using it on their page without giving it a second thought, most people shove the majority their code into the jQuery &quot;Dom ready&quot; callback, use the selectors to find their elements and start doing things without worrying about what is going on under the hood. </p>
<p>A lot of projects will also do this <em>all over the place</em> without thinking about it because it&#39;s so easy, and that&#39;s part of my problem <em>with</em> jQuery, it makes it too easy for developers to just zombie along without thinking about what we&#39;re doing.</p>
<p><em>jQuery - it&#39;s not you, it&#39;s me</em></p>
<p>It&#39;s not that I don&#39;t like jQuery, it solved many problems back in the day before JS was cool, and probably contributed in part to the rise of JS as the weapon of choice for most dev work.</p>
<p>It&#39;s just, it solves <em>many</em> problems and has gotten quite confused over the years, <a href="http://api.jquery.com/category/events/event-handler-attachment/">look at how many ways we&#39;ve ended up with to listen to events</a> for example. </p>
<p>A lot of these complaints are being dealt with as the project moves forward slowly but that&#39;s half of my conflict with it. The size and scope of the project and the number of people using it means that any change or improvement has to come gradually. The speed at which with small libraries I can either fork/patch/modify is pretty cool.</p>
<p><em>Every line of code should be justified</em></p>
<p>When you pull in a large library like jQuery, you&#39;re pulling in hundreds of methods to do <em>stuff</em>, and for me personally that&#39;s a bad way of working. In my perfect world, every method should have a reason to exist in my application.</p>
<p>In short, jQuery is a 100kb swiss army knife and it&#39;s not my personal preference to work with such tools.</p>
<p><em>A tangible example</em></p>
<p>Okay, so first things first - how do I wait for the dom to be ready so I can do stuff with it?</p>
<pre><code><span class="tag">&lt;<span class="title">html</span>&gt;</span>
  <span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"content"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"type="</span><span class="attribute">text</span>/<span class="attribute">javascript</span>"&gt;</span><span class="javascript">
      <span class="comment">// Do stuff with "content"</span>
    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></code></pre>
<p><em>Trololol</em>, actually, you could read/write about this subject until the cows come home and enough people have, but I just wanted to make the point that sometimes you don&#39;t have to write any code and thinking about stuff before doing:</p>
<pre><code><span class="variable">$(</span>function() {
  <span class="regexp">//</span> <span class="constant">My</span> <span class="constant">Application</span>
})</code></pre>
<p>might hold some benefits.</p>
<h1>Avoiding jQuery</h1>
<p>Anyway, waiting for the DOM to be ready is still <a href="http://stackoverflow.com/questions/6902280/cross-browser-dom-ready">potentially complicated </a> and managing this stuff ourselves doesn&#39;t seem very worthwhile.</p>
<h1>NPM to the rescue</h1>
<pre><code class="lang-bash">npm install domready --save-dev
vim client/app.js</code></pre>
<pre><code class="lang-javascript"><span class="keyword">var</span> domready = require(<span class="string">'domready'</span>)

domready(<span class="keyword">function</span>() {
  <span class="comment">// Application code goes here</span>
})</code></pre>
<p>What happened here, is I decided for the entry point to my application I needed a cross browser dom ready function, so I pulled one down from NPM and used it.</p>
<p>This is the preferred mode of working in this frameworkless environment.</p>
<ul>
<li>Start writing a feature</li>
<li>Realise we need code that isn&#39;t directly related to that feature</li>
<li>Find a library that does that specific thing</li>
<li>Install it</li>
<li>Carry on</li>
</ul>
<h1>It&#39;s not re-inventing the wheel</h1>
<p>In the last blog entry, I was accused of <a href="/entries/look-ma,-no-frameworks.html">&quot;re-inventing the wheel&quot;</a>. This is as about as far from the truth as it could be - the best thing we can ever do when writing a feature, is to avoid writing code.</p>
<p>However, building our feature on top of something that doesn&#39;t directly solve a problem we&#39;re facing is where the conflict lies. By limiting ourselves to single shot libraries such as domReady we should be able to avoid a lot of the disconnect we face when pulling in larger libraries or frameworks.</p>
<h1>Discovering these small libraries in the first place</h1>
<p><em>First, try searching on <a href="https://search.npmjs.org/">npmjs.org</a></em></p>
<p>If we have a specific keyword to look for, this is usually good enough.  Searching for <em>domready</em> on this page will give us a collection of libraries to choose from.</p>
<p><em>Next, try <a href="http://google.com">google.com</a></em></p>
<p>Google is great at fuzzy searches - and generally if you include &quot;NPM&quot; in the search we&#39;ll get better results than using the NPM search itself if we&#39;re not too sure what we&#39;re looking for.</p>
<h1>Choosing the library</h1>
<p>There are a dozen domready libraries (and for most simple problems this is the case) - this is <em>great</em>, we just need to be able to pick which one to use. I like to ask the following questions</p>
<ul>
<li>How many libraries are using this one? (More is mostly better)</li>
<li>How many libraries does it consume? (Less is mostly better)</li>
<li>Does the documentation fit in a single README?</li>
<li>Is there a link to Github?</li>
<li>How many people watch  the project on Github?</li>
<li>Is there a lot of code churn? (I don&#39;t want to see a lot of activity on the Github repo)</li>
<li>Are there many outstanding issues?</li>
</ul>
<p>This might seem like a lot of work, but making that third party code justify itself in this way means that it&#39;ll be right for the project and not just some ad-hoc file in a directory somewhere.</p>
<h1>Next steps</h1>
<p>Next up, we&#39;ll have a look at some of the patterns I use when building a dom-intensive JS application.</p>
]]></description><link>http://codeofrob.com/entries/jquery-is-not-a-framework-but-i-avoid-using-it-too.html</link><guid isPermaLink="true">http://codeofrob.com/entries/jquery-is-not-a-framework-but-i-avoid-using-it-too.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Tue, 23 Jul 2013 09:30:00 GMT</pubDate></item><item><title><![CDATA[Grunt+browserify+npm+application=success]]></title><description><![CDATA[<p>Previous entries in this series:</p>
<ul>
<li><a href="/entries/look-ma,-no-frameworks.html">Look ma, no frameworks</a></li>
</ul>
<p>How do I start a project if I have no framework? What are the first things I do and how do I organise it? Let&#39;s have a look shall we?</p>
<h1>Create the repo</h1>
<p>I use git, no brainer.</p>
<pre><code class="lang-bash">git init
touch README.md
git add README.md 
git commit -m <span class="string">"Readme"</span>
git remote add origin githubetc
git push -u origin master</code></pre>
<h1>Create a manifest</h1>
<p>I use npm to manage my dependencies, makes sense</p>
<pre><code class="lang-bash">npm init
git add package.json 
git commit -m <span class="string">"package.json"</span></code></pre>
<h1>Install grunt</h1>
<p>I use grunt to run my various build/test/deploy scripts, I could just use all the tools I use stand-alone but having a single build system with tasks is documentation we then haven&#39;t got to write. It&#39;s no fun if new joiners have to install and run crap.
Grunt comes in two parts. the package itself (&quot;grunt&quot;) and the command line package for running it (&quot;grunt-cli&quot;)</p>
<pre><code class="lang-bash">npm install grunt --save-dev
npm install -g grunt-cli</code></pre>
<p>Client/script/dev dependencies I usually stick in as dev dependencies ala above, we build and then we deploy the compiled assets so we don&#39;t need them in production.</p>
<p>What I often do is put global dependencies like this as a pre-install script for the package.json so people haven&#39;t got to remember to install them (note, not in OSS stuff as that might annoy folk):</p>
<pre><code class="lang-bash">vim package.json
`</code></pre>
<pre><code class="lang-json">{
  &quot;name&quot;: &quot;awesome-app&quot;,
  &quot;version&quot;: &quot;etc&quot;,
  &quot;scripts&quot;: {
    &quot;preinstall&quot;: &quot;npm install -g grunt-cli&quot;
  },
  &quot;etc&quot;
}</code></pre>
<p>Grunt needs a Gruntfile, this looks like this:</p>
<pre><code class="lang-bash">vim Gruntfile.js</code></pre>
<pre><code class="lang-javascript">module.exports = <span class="keyword">function</span>(grunt) {
  grunt.initConfig({
    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>)
  })
}</code></pre>
<pre><code class="lang-bash">git add Gruntfile.js 
git commit -am <span class="string">"Grunt setup"</span></code></pre>
<h1>Create the app</h1>
<p>I&#39;ll usually have a folder called &quot;client&quot;, which contains all the HTMl/CSS/JS in it. The build script will take these assets and build them into a &quot;public&quot; directory which is empty by default. I say HTML/CSS, but I actually mean Jade/Stylus.</p>
<p>I&#39;m not going to write about the server code for any of this, because I don&#39;t care if we&#39;re using ASP.NET/Ruby/Node - this is a client application and the server is irrelevant.</p>
<p>What matters is that somehow these jade/stylus files can be rendered by the server or pre-built somehow.</p>
<p>Then </p>
<pre><code class="lang-bash">touch client/index.jade
touch client/theme.styl
touch client/app.js</code></pre>
<p>I don&#39;t bother with elaborate folder hierarchies to begin with, lumping everything in a single folder to begin with makes perfect sense and when/if it gets too big it&#39;ll probably be split up by feature rather than by whether it&#39;s CSS or not.</p>
<h1>Build script for my app.js</h1>
<p>app.js is the entry point to my client application, it&#39;ll be imported in my HTML like so</p>
<pre><code class="lang-xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"/app.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></code></pre>
<p>I don&#39;t bother with <a href="/entries/why-i-stopped-using-amd.html">any of that AMD stuff</a> for the obvious reasons, but obviously I&#39;m not going to have everythingin the same file. I like to use Browserify cos that&#39;s kinda neat and encourages us to push code into modules and install them via npm.</p>
<p>Now, we can get our web server to do this stuff on request, but I like to run a build script and get errors immediately when changing my files. I now have grunt, so I&#39;ll use the &quot;grunt-browserify&quot; package to make this part of my build.</p>
<pre><code class="lang-bash">npm install grunt-browserify --save-dev
vim Gruntfile.js</code></pre>
<pre><code class="lang-javascript">module.exports = <span class="keyword">function</span>(grunt) {
  grunt.initConfig({
    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),
    browserify: {
      <span class="string">'/public/app.js'</span>: [<span class="string">'/client/app.js'</span>]
    }
  })
  grunt.loadNpmTasks(<span class="string">'grunt-browserify'</span>)
}</code></pre>
<p>This now means I can run</p>
<pre><code class="lang-bash">grunt browserify</code></pre>
<p>And the application will be built from &quot;client/app&quot; to &quot;public/app&quot;</p>
<p>This actually gets tedious after a while, so I often end up with another grunt module &quot;grunt-contrib-watch&quot;, to watch for changes and automatically r-erun this file.</p>
<pre><code class="lang-bash">npm install grunt-contrib-watch --save-dev
vim Gruntfile.js</code></pre>
<pre><code class="lang-javascript">module.exports = <span class="keyword">function</span>(grunt) {
  grunt.initConfig({
    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),
    browserify: {
      <span class="string">'public/app.js'</span>: [<span class="string">'client/app.js'</span>]
    }
    watch: {
      files: [ <span class="string">"client/**/*.js"</span>],
      tasks: [ <span class="string">'browserify'</span> ]
    }
  })
  grunt.loadNpmTasks(<span class="string">'grunt-browserify'</span>)
  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>)
}</code></pre>
<p>This means I can now run</p>
<pre><code class="lang-bash">grunt watch</code></pre>
<p>And not think about this again.</p>
<h1>Automate all the things</h1>
<p>I actually go much further than the above, and use grunt to</p>
<ul>
<li>Run the web server</li>
<li>Run the tests automatically (using grunt-contrib-watch again)</li>
<li>Run any other servers needed (redis/phantomjs/etc)</li>
</ul>
<p>Modules I find useful for this</p>
<ul>
<li>grunt-nodemon</li>
<li>grunt-concurrent</li>
<li>grunt-exec</li>
<li>grunt-env</li>
</ul>
<p>I&#39;ll register a custom task called &#39;develop&#39; which means all any developer needs to do in order to start any work on my project is type</p>
<pre><code class="lang-bash">grunt develop</code></pre>
<p>And they can get to work immediately.</p>
<h1>This is quite a lot of set-up</h1>
<p>I don&#39;t do this very often, this is a collection of tools/libraries that I really like and have come to appreciate very much. Anything is interchangeable for other things and I&#39;m not afraid to change any part of it at some point if something better comes up.</p>
<p>I do have a repo which I clone which has these things already set up for a blank project - but this is personal to me and the way I want to work. In a team this might be different (compromise) and for you it&#39;ll be different too.</p>
<p>So I won&#39;t be sharing it. Sorry :)</p>
]]></description><link>http://codeofrob.com/entries/grunt+browserify+npm+application=success.html</link><guid isPermaLink="true">http://codeofrob.com/entries/grunt+browserify+npm+application=success.html</guid><dc:creator><![CDATA[Rob Ashton]]></dc:creator><pubDate>Thu, 18 Jul 2013 09:30:00 GMT</pubDate></item></channel></rss>