[{"author":{"name":"Kiran","avatar":"/images/IdenticonHandler.ashx?code=-283213582"},"date":"(2/15/2010 1:16 PM)","text":"\r\n\t\t\t\t\tRob,Can you expand little bit more on modules?  Should they be viewed as same but enhanced features of a core module?How these modules are compared to database driven approach?If we have 100 customers and each one needs some thing different from core, do we need 100 modules?\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(2/15/2010 1:34 PM)","text":"\r\n\t\t\t\t\tHi Kiran,The way I see it is:A module can do one of two things (or both)1) Add entirely new functionality to the application2) Modify existing functionality within the applicationWe try to do module development in a way that means modules can be shared between customers - for example if a customer asks that our registration page be slightly different (perhaps have the option to log in as well as register), then we'd make a module for that which is then added to the pool of modules available for selection at commercialisation time when creating a new customer configuration.However, you're right in that when a customer wants something specifically unique to them that we have to create a module specifically for that customer - but any further specifically unique functionality they require then goes into that same module, so we don't get too much module clutter.The way I see it, is that if a customer wants something completely bespoke, you're never going to get away from having to write a few lines of code - all you can do is make it easy to write those lines of code without having to go back and modify existing code to acommodate it.I hope this long winded response answers your question at least in part :)\r\n\t\t\t\t"},{"author":{"name":"Asad Ali Butt","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=fa8925305aa1a75a20528d9334d739a3&size=50&default=identicon"},"date":"(3/16/2010 9:17 PM)","text":"\r\n\t\t\t\t\tGreat information about System.Web.Mvc.WebFormViewEngine. Do appriciate\r\n\t\t\t\t"},{"author":{"name":"Jens","avatar":"/images/IdenticonHandler.ashx?code=1241249103"},"date":"(4/16/2010 2:43 PM)","text":"\r\n\t\t\t\t\tGreat series of posts on multi-tenancy but do you plan on doing any posts on multi-tenancy from a data access perspective as it relates to ASP.NET MVC? I'm not having much luck finding any information about this. My specific interest is in having a shared database and shared schema and how to best implement that in a ASP.NET MVC project.\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(4/17/2010 9:01 AM)","text":"\r\n\t\t\t\t\tThat's an interesting question, in my experience I've found it easier to maintain separate databases, (and the business is more comfortable with that [Which yes, is ridiculous]).I might give it a go - my next posts will most likely be about web configuration and IIS =)\r\n\t\t\t\t"}]