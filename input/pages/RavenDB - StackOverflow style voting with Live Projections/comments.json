[{"author":{"name":"Andrew Davey","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=e774874a8acc65cc0f0bb1e77b4def5b&size=50&default=identicon"},"date":"(12/16/2010 2:12 PM)","text":"\r\n\t\t\t\t\tDo you worry that separating things out into separate documents instead of working within a natural aggregate root would lead to dumb data containers with no logic and actual business code spread throughout an application?Perhaps with votes numbering in the thousands per question it's a valid trade off. However, is their guidance on how large a single document can be and still perform well?\r\n\t\t\t\t"},{"author":{"name":"Ryan","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=8196ac7ecc62ed5aaa2879fe15733dce&size=50&default=identicon"},"date":"(12/16/2010 8:44 PM)","text":"\r\n\t\t\t\t\tVery Nice! One question though, how would you handle deletes now everything has it's own document?Could you also post an example ala twitter post of users one is following? It came up recently at the ravendb list. Ayende's recommendation was to keep a list of posts of users one is following and use live projection to get the actual content of the post.groups.google.com/.../50295c3abbd0c7eb#// Ryan\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(12/17/2010 9:33 AM)","text":"\r\n\t\t\t\t\tAndrew :: I don't think I am doing thatObviously questions/answers and users are separate things, so let's move past that.The problem with storing answers on the question is that there are potentially dozens and dozens of answers - each with hundreds of votes, and people will be adding them potentially at the same time as the author is editing the original question. (When the author saves the question, we don't want to also save the answers).I'm breaking up my documents based on my transaction boundaries to keep life easy in the client API.That's not to say we couldn't use a single document and make use of the PATCH operation to keep things contained - but the purpose of this post wasn't to show how I'd do that - just to show live projections against another object other than the one you're actually querying.\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(12/17/2010 9:45 AM)","text":"\r\n\t\t\t\t\tRyan :: I probably wouldn't delete in this situation, I'd just de-activate (Think about it, if you deleted the question you wouldn't want rep to get removed from people who answered, or perhaps you would?).Either way, there are set based operations in Raven, so I'd use those if I really wanted to cascade deletes based on QuestionId, I could.In this scenario, keeping them as separate documents made more sense because it makes the write operations easier, perhaps I'll do an example where I keep them as a single document and talk about the patch operation and how it would make deletes easier.Then we'll work out which one we prefer ;-)\r\n\t\t\t\t"},{"author":{"name":"jalchr","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=118e63231e7f9f178253cc84d01c91a9&size=50&default=identicon"},"date":"(12/29/2010 11:25 AM)","text":"\r\n\t\t\t\t\tExcellent postQuestion: I wonder why the live project doesn't return a valid object ... I have modified your code a bit to try something public class QuestionView    {        public string QuestionId { get; set; }        public string UserDisplayName { get; set; }        public string QuestionTitle { get; set; }        public string QuestionContent { get; set; }        public int VoteTotal { get; set; }        public User User { get; set; }        public Question Question { get; set; }    }and in the transform results I'm returning these objects:TransformResults = (database, results) =>                                from result in results                                let question = database.Load<Question>(result.QuestionId)                                let user = database.Load<User>(question.UserId)                                select new                                {                                    QuestionId = result.QuestionId,                                    UserDisplayName = user.DisplayName,                                    QuestionTitle = question.Title,                                    QuestionContent = question.Content,                                    VoteTotal = result.VoteTotal,                                    User = user,                                    Question = question                                };Then querying this :                var questionInfo = session.Query<QuestionView, QuestionWithVoteTotalIndex>()                    .Customize(x => x.WaitForNonStaleResultsAsOfNow())                    .Where(x => x.QuestionId == questionId)                    .SingleOrDefault();                    Console.WriteLine(\"Question Title: {0}, votes: {1}\",                        questionInfo.QuestionTitle, questionInfo.VoteTotal);                    Console.WriteLine(\"User name {0}\", questionInfo.User.DisplayName);                    Console.WriteLine(\"Content: {0}\", questionInfo.Question.Content);would not return user.DisplayName neither oes the Question Content ...Ideas?P.S. if you increase this comment Text Area a little that would really help ! Thanks in advance\r\n\t\t\t\t"}]