[{"author":{"name":"jt","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=2aca90b7f75d70cdc3ff59a8f81951ec&size=50&default=identicon"},"date":"(2/15/2010 5:15 AM)","text":"\r\n\t\t\t\t\tThanks for the series! It's very interesting, can't wait for each new post :D Specially using MEF ;) Shame we can't switch out these modules at runtime due to ASP.NET Routing's limitations :(\r\n\t\t\t\t"},{"author":{"name":"Blob","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b0b31e612e528d7159bfabbfad784d2a&size=50&default=identicon"},"date":"(2/15/2010 9:51 AM)","text":"\r\n\t\t\t\t\tHi,Do you plan to create a sample application \"Multi tenancy in ASP.NET MVC\" according to your articles?Bye and thank you,\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(2/15/2010 11:19 PM)","text":"\r\n\t\t\t\t\tJt => MEF <-- Me too, it's quite exciting - I prefer the Reflection.Emit version but that's just because I find it entertaining to write :)Blob => YES, DEFINITELY! I have actual plans to create a multi-tenant application over a series of blog entries at the end of this series\r\n\t\t\t\t"},{"author":{"name":"Bruce","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=0850f240a58689573afc7cb20ede11dd&size=50&default=identicon"},"date":"(2/16/2010 4:48 AM)","text":"\r\n\t\t\t\t\tI'm definitely looking forward to the blog entries in which you put together a simple multi-tenant application.I'm working out a multi-tenant application of my own, but my solutions were not nearly as cool as yours.It seems that this should be a very popular topic, but I haven't found many discussing it online.\r\n\t\t\t\t"},{"author":{"name":"Blob","avatar":"/images/IdenticonHandler.ashx?code=-2145463965"},"date":"(2/16/2010 2:17 PM)","text":"\r\n\t\t\t\t\trobashton  => Thanks\r\n\t\t\t\t"},{"author":{"name":"Sean","avatar":"/images/IdenticonHandler.ashx?code=2064151457"},"date":"(2/16/2010 4:32 PM)","text":"\r\n\t\t\t\t\tAwesome awesome awesome stuff here.  Really looking forward to your progress and the resultant application.\r\n\t\t\t\t"},{"author":{"name":"Matt","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=36921282d6398b7c55828689ec2d8be4&size=50&default=identicon"},"date":"(2/22/2010 7:45 PM)","text":"\r\n\t\t\t\t\tVery interesting and well written posts.  Very much looking forward to the upcoming posts as this is something that would be very very useful provided it can be done in a logical manner.\r\n\t\t\t\t"},{"author":{"name":"Matt","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=36921282d6398b7c55828689ec2d8be4&size=50&default=identicon"},"date":"(2/23/2010 5:48 PM)","text":"\r\n\t\t\t\t\tSo I'm playing around with MvcEx in my project and have a few errors I'm trying to work though.  Everything seems to be working fine so far, but I have a generic base controller where I override the OnException method so I can do some work before throwing the exception.Any suggestion on how I can still run my custom code in this method when my controller is now inheriting from MvcExActionContainer?\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(2/23/2010 6:46 PM)","text":"\r\n\t\t\t\t\tAgain with the disclaimer that this is just a reference library, I can tell you that it is indeed possible to still have a base controller in MvcExmApplication.ControllerFactory.SetBaseControllerType(typeof(BaseController));Where mApplication is the IMvcExApplicationThis comes with the caveat that the base controller type must inherit from MvcExController.I'm thinking of ditching the componentised controllers in our code and replacing them with the above solution (although it's less 'neat')\r\n\t\t\t\t"},{"author":{"name":"Matt","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=36921282d6398b7c55828689ec2d8be4&size=50&default=identicon"},"date":"(3/2/2010 8:38 PM)","text":"\r\n\t\t\t\t\tSo I'm still plugging away at this :).  I really like the idea of what you've conceived with this MvcEx and it looks like you've put some work into it.My current problem is that if I set up my BaseController to inherit from MvcExController, then all of my controllers that inherit from BaseController and up being MvcExControllers.But the only way I can get my Home controller to get recognized is to use the MvcExActionContainer attribute on it, as you have in the MvcEx solution.This of course doesn't actually work later on as it tries to build in CreateMethodOnDynamicController as it's looking for ActionContainer methods that my HomeController doesn't have since it's not inherited from MvcExActionContainer.As I write this I realize of course it shouldn't work the way I have it, but I can't seem to get my Home controller recognized any other way.  Clearly I'm just not quite yet grasping the bigger picture of how these all work together.Do you have any suggestions on how I should structure my controllers with my BaseController inheriting from MvcExController?\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(3/3/2010 8:01 AM)","text":"\r\n\t\t\t\t\tChange your controllers to inherit from MvcExActionContainer - they'll still get the behaviour from your BaseControllerThe limitation here is that you can only have one base controller - but you can always make a base action container if you need shared functionality.Like I said above I'm not sure this is the best solution for backwards compatability reasons - I've effectively removed the responsibility of generic request handling to a separate class (the base controller), and left the actions able to come from anywhere for a particular controller.IMO this is how it should work anyway, why you've got to have all your actions on a single controller which also has control over the entire request lifecycle is beyond me.So, what we have here (and again I'm not saying it's *right*), isCreate a base controller and tell MvcEx to use it - this can be used to intercept all requests to introduce common logic (action filters etc)Create your action containers inheriting from MvcExActionContainer (Yeah I know, an attribute AND a class? I'm  tempted to ditch the requirement for MvcExActionContainer inheritance altogether)\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(3/3/2010 8:02 AM)","text":"\r\n\t\t\t\t\tOh, and a new blog entry will be incoming once I've met a deadline at work - manic  times at the moment :)\r\n\t\t\t\t"},{"author":{"name":"Asad Ali Butt","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=fa8925305aa1a75a20528d9334d739a3&size=50&default=identicon"},"date":"(3/14/2010 7:15 PM)","text":"\r\n\t\t\t\t\treading your posts makes one feel more comfortable about MVC stuff. Do appriciate\r\n\t\t\t\t"},{"author":{"name":"Trent","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=d0dab5fda667ffca2cb25c915e631508&size=50&default=identicon"},"date":"(4/5/2010 10:16 AM)","text":"\r\n\t\t\t\t\tHey is there a part 2 to this article and is there a sample app\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(4/5/2010 12:33 PM)","text":"\r\n\t\t\t\t\tWriting it right now!I ran out of steam on this series because of work, so I'll be trying to wrap it up in the next couple of entries, and then start blogging about the other aspects multi-tenancy in ASP.NET MVC that we've found to be a struggle :)\r\n\t\t\t\t"}]