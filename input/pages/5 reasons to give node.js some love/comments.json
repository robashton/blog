[{"author":{"name":"tobi","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=0e747083685b78a6fb3f264b48ab253d&size=50&default=identicon"},"date":"(4/30/2011 2:39 PM)","text":"\r\n\t\t\t\t\t\"That's utterly crazy, and I drafted it up in just a few hours of hackity hack hack hacking, with those goals in mind.\"What made this easier than in C#? Couldn't you just have an MVC action method that responds to the route \"{*url}\"?\"We don't need any crazy language keywords (looking at you C#), we don't need any crazy Task of X/Y and Z objects (Looking at you C#), we just need\"What is your experience with this style of programming? Without having tried it, I would be concerned that the continuation passing style spreads throughout the app far more than one would like. The easiest solution in C# is to just be synchronous which is not an option on node.js.\r\n\t\t\t\t"},{"author":{"name":"Frank Quednau","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=7ae7575420336966224df378f634ad98&size=50&default=identicon"},"date":"(4/30/2011 8:54 PM)","text":"\r\n\t\t\t\t\tAs to 2), nobody stops you from doing API signatures like void Read(string, Action<Result> onDone); in C#, but to whom am I talking :)\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(5/1/2011 4:16 PM)","text":"\r\n\t\t\t\t\tTobi :: What made this easier than in C#? Couldn't you just have an MVC action method that responds to the route \"{*url}\"?No - think about how you'd stream the content in a non-blocking and safe manner, how you'd make sure you didn't end up with lots of dead connections, how you'd parse the page data to get the content out (jquery $('.post')) etc, these are non-trivial problems that node makes easy.In experience, having callbacks doesn't cause a problem if you structure your code well, there is a style of Javascript where you NEVER use return values and just do everything with callbacks (I don't subscribe to it), but the code I've seen that does that is very tidy about how methods are placed and how the 'this' context is controlled\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(5/1/2011 4:18 PM)","text":"\r\n\t\t\t\t\tFrank - absolutely, but how are you going to make sure that onDone executes on the original calling thread? ;-)\r\n\t\t\t\t"},{"author":{"name":"Frank Quednau","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=7ae7575420336966224df378f634ad98&size=50&default=identicon"},"date":"(5/2/2011 2:01 PM)","text":"\r\n\t\t\t\t\tAh, nice point, now I see where you're coming from with Task, etc...\r\n\t\t\t\t"},{"author":{"name":"Bart Czernicki","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=f2fbdc6722a747b791658e37592f4757&size=50&default=identicon"},"date":"(5/2/2011 6:55 PM)","text":"\r\n\t\t\t\t\tCheck out the upcoming async framework in .NET...the \"callback\" and making sure its on the proper synchronization context is all done for you using the async & await keywords.  Yes I know its one \"crazy language\" (as you put it) keyword, but GASP I can think this code is pretty terse:private async void button1_Click(object sender, RoutedEventArgs e){    string url = \"http://reedcopsey.com\";    string content = await new WebClient().DownloadStringTaskAsync(url);}On a side note, PLINQ is pretty darn powerful declarative language that you don't get with JavaScript (jLinq doesn't count).\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(5/2/2011 7:06 PM)","text":"\r\n\t\t\t\t\tI'd ignore PLINQ in this category as we're talking about asynchrony rather than parallellisation  I don't really like the way continuations work with async/await - in the same way as with yield, it might yield in functional code but having your instruction pointer leap about your code because of strange language key words is just plain weird :-)\r\n\t\t\t\t"},{"author":{"name":"pete w","avatar":"/images/IdenticonHandler.ashx?code=1057790411"},"date":"(5/3/2011 7:52 PM)","text":"\r\n\t\t\t\t\tI have been watching this closely, along with IronJs and Node.NET which is a .NET port of the Node.js concept.Obviously the Node.NET port doesnt have nearly as large of a community nor the automatic packaging, but for those of us with a heavy investment in code running on the .NET framework it plays nicely into our existing components.Node.js reminds me of sinatra, but with a lot more scalability, very exciting!\r\n\t\t\t\t"},{"author":{"name":"Magesh","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=3a91118de6e599fd746a57dc0eb3e38c&size=50&default=identicon"},"date":"(6/29/2011 11:15 AM)","text":"\r\n\t\t\t\t\tIs there a RSS link for your blog??\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(6/30/2011 10:31 AM)","text":"\r\n\t\t\t\t\tSure, http://feeds.feedburner.com/robashton\r\n\t\t\t\t"},{"author":{"name":"CPR Classes Dallas","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=135f43f957955790babfbb559f733f5b&size=50&default=identicon"},"date":"(10/1/2011 8:13 PM)","text":"\r\n\t\t\t\t\tTell you what, my site needs some 'awesome package management' and a community to get around it.  Can anyone help me with this??\r\n\t\t\t\t"},{"author":{"name":"reading glasses","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=320936888fbbe3dfe179d51d1bac30ef&size=50&default=identicon"},"date":"(10/5/2011 8:02 AM)","text":"\r\n\t\t\t\t\tTaking a step further and argue that we have some pretty amazing document database on the scene today, whose main mechanism of communication and storage is - guess what? JSON (very BSON) - anything that you should not be there, dealt with mapping frames, hand, or the mapping of code, because you're just throwing around the JSON.\r\n\t\t\t\t"},{"author":{"name":"New York SEO Services","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=320936888fbbe3dfe179d51d1bac30ef&size=50&default=identicon"},"date":"(10/10/2011 7:01 AM)","text":"\r\n\t\t\t\t\tIf node has already rejected as useless, because he thinks it adds nothing new to the table against your X, Y or Z, then I urge you to take another look at what designers are prepared to bring non-native Windows popular will and you want to be involved.\r\n\t\t\t\t"},{"author":{"name":"Pasha","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=64f7d95d04f481ac8309655e346eaa2c&size=50&default=identicon"},"date":"(10/11/2011 12:25 PM)","text":"\r\n\t\t\t\t\tNew to some web programming and blogs are quite good to learn some tips and knowledge sharing as well.I do like the content and please keep updating the content and appreciation to have good text.\r\n\t\t\t\t"},{"author":{"name":"Paul Evans","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=8a07bb29a6a791d79b980c93bb75b8ed&size=50&default=identicon"},"date":"(10/15/2011 4:40 PM)","text":"\r\n\t\t\t\t\tJust catching up on my friends blogs.  One minor comment, you can write code very much like that snippet doing async stuff without that much cruft in C# just by using the APM model & lambda expressions.static void Main(string[] args)        {            File.WriteAllText(\"hello.txt\", \"Hello World\");            var response = Console.Out;            var b = new byte[4096];            var fs = new FileStream(\"hello.txt\", FileMode.Open, FileAccess.Read, FileShare.Read, b.Length, true);            fs.BeginRead(b, 0, b.Length,                ar => { int read = fs.EndRead(ar); response.Write(UTF8Encoding.UTF8.GetChars(b, 0, read)); fs.Close(); }, null);            // Async, so readline prevents exit            Console.ReadLine();        }\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(10/15/2011 5:44 PM)","text":"\r\n\t\t\t\t\tNo sure - and if I'm doing any async stuff in C# that's how I do it, I'm not afraid of callbacks and calling a callback a callback.The biggest difference between .NET BCL and node in this case is that in node it's all async by default - and people generally (and sadly) choose the defaults \r\n\t\t\t\t"}]