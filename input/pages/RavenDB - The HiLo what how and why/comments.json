[{"author":{"name":"Sean","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=1512a77d029f5a599b9b973ccd3cba35&size=50&default=identicon"},"date":"(5/16/2010 10:45 PM)","text":"\r\n\t\t\t\t\tWhen using hilo myself, I found it worked better if I implimented the hi by eg 1000 and then getting a new id with (currentHi) + (++currentLo)That lets you change the capacity client side without problems.  It also simplified getting a new id inside sql server stored procs.\r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(5/16/2010 10:54 PM)","text":"\r\n\t\t\t\t\tSurely that means the client still needs to be aware of the capacity (because they'd still be able to go past capacity if it was changed on the server).Either way it's brittle if you're not in control of the whole system - but if you're writing a proper system then only one client will access the database (ideally), and everything else will go through that client so it doesn't matter.\r\n\t\t\t\t"},{"author":{"name":"Ken Egozi","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=1ce13c7f1c1396fcadc5de5bc390d066&size=50&default=identicon"},"date":"(5/17/2010 6:10 AM)","text":"\r\n\t\t\t\t\t@rob: proper system => only one client?with large, complex systems, you can easily find a mix of technologies. Like RoR front-end, erlang based chat server, .NET logic engine, and Java based batch processing. One of the things that can make RavenDB appeal would be a consistent set of clients for major environments. For e.g., I like that with MongoDB you get official server build for every possible type of host (irrelevant with RavenDB as it is dependant on ESENT afaik), and a large list of consistent client APIs. \r\n\t\t\t\t"},{"author":{"name":"robashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(5/17/2010 7:45 AM)","text":"\r\n\t\t\t\t\tSure - but most architects would balk at the idea of letting all those things go directly to the database. Instead, the main application would most likely expose services which these would go to.Even if you weren't to do that (Because let's face it, RavenDB exposes the ability to load logic directly into it *and* exposes REST services so why *not* go directly to it), the fact remains that with any client-id assignation system you're going to have to standardise how and when those clients generate those ids and it doesn't matter which variant of the HiLo algorithm you use :)\r\n\t\t\t\t"}]