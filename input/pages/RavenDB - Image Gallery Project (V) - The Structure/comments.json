[{"author":{"name":"Doug","avatar":"/images/IdenticonHandler.ashx?code=1666950235"},"date":"(10/1/2010 10:00 PM)","text":"\r\n\t\t\t\t\tLoving where this series is going.  Keep 'em coming!\r\n\t\t\t\t"},{"author":{"name":"Chris Swain","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=7cd5b28ad1848b191e4e2649881fd28e&size=50&default=identicon"},"date":"(10/3/2010 4:49 PM)","text":"\r\n\t\t\t\t\tI'm so glad you're doing this blog series.  It's going to be helpful to those of us looking for guidance with RavenDB and ASP.NET MVC.  I downloaded the sample project and I'm not sure why you have documents, entities, and viewmodels.  Could you explain a little more about the difference between your entities and your viewmodels and why you need both?\r\n\t\t\t\t"},{"author":{"name":"Rob Ashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(10/3/2010 7:12 PM)","text":"\r\n\t\t\t\t\tAh - well that is definitely a non-contentious question :)I don't *need* those things, and I could just return the documents and use those as my view models, but I'm doing this project as not just a RavenDB primer but as an example of how CQRS can work well with a single data store when that data store is a document database with pre-computed map/reduce indexes.As a purist, this means entities shouldn't really be used for the view layer (querying).The \"Should I use my entities on my view model\" question has been done to death in the DDD threads/forums/etc - and for simple projects like this you probably wouldn't have any issues with doing so - but architecturally it doesn't scale (and in RDBMS projects you can swiftly end up with Select N+1 problems as you try to traverse through the relationships of the entity). You could still end up with that in this kind of project if you were not careful too.Even if I merged Entities and Documents, I'd still not be using the Entities as View Models - it's just bad karma to do so :)I hope that explains it at least a little bit - it will make more sense as I add more views to the project.\r\n\t\t\t\t"},{"author":{"name":"cowgaR","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=4661768134975d423174a7506badb1c7&size=50&default=identicon"},"date":"(10/14/2010 5:52 PM)","text":"\r\n\t\t\t\t\tone of the advantage of NoSQL was that POCO was finaly possible in a simple manner and there wasn't any mapping done (impedance mismatch was almost gone), store whatever you want (no joins, no big-deal about optimal data schema thoughts and so on...).thus developing application became simpler with NoSQL, but I see you're missing itso you're trying over-complicate architecture...and present useless mapping withyour entities-document nonsense...premature optimization is the root of all evil\r\n\t\t\t\t"},{"author":{"name":"Rob Ashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(10/14/2010 5:58 PM)","text":"\r\n\t\t\t\t\tI think you're right - there is a certain element of undoing the good done here - but I also know I'm not alone in doing this because leaving code unguarded from troublesome developers makes people uncomfortable.I'm actually considering going back to quitting this because bugrit, mis-using direct access to modify documents can be prevented through code reviews and education and not_being_lazy.\r\n\t\t\t\t"},{"author":{"name":"cowgaR","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=4661768134975d423174a7506badb1c7&size=50&default=identicon"},"date":"(10/14/2010 6:13 PM)","text":"\r\n\t\t\t\t\twhat a swift response, thank you - my (angry) point was, seeing you're doing TDD:\"how in the hell\" did you come to the point you NEED entities in your projectisn't that once I'm doing TDD/BDD, anything I need can be brought later on + refactor?Once we hit some nasty problem that we can't solve?Seeing CQRS mentioned I  thought this will overcomplicate things, although I'm not against the idea of seperating the views/documents as NoSQL fits this nicely...one can't allways assume that there are \"bad\" developers that screw the code, and we need to \"guard\" it. That's what tests are for.there are many RubyOnRails application out there which architecture is elegant and simple (even using active record beneath!) and are working fine (twitter front layer is RoR), only we in .NET world aim somewhere to LHC/NASA labs with our code...I like Rob Conery take on this, Web is simple, so should your app be...\r\n\t\t\t\t"},{"author":{"name":"Rob Ashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(10/14/2010 6:22 PM)","text":"\r\n\t\t\t\t\tAh, you see - I don't need entities in this project, but I already said that :)This is supposed to be a full vertical slice of how you *could* build a proper application (not just a website) on top of RavenDB, but obviously a real application wouldn't be appropriate for a blog series introducing new concepts.I kinda figured that if I did it one way in one set of blog entries, and did it a different way in the upcoming screencasts then people could make their own mind up for their own projects where it makes sense.Clearly this is the wrong choice for a simple little image gallery, but in an enterprise environment (urgh, I hate that phrase) with a complex domain you might wish to do something similar because it keeps the boundaries well defined.I think my personal preference (seeing as the serializer does support it), is to just use read-only properties and have your cake *and* eat it with simplicity AND safety.\r\n\t\t\t\t"},{"author":{"name":"Rob Ashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(10/14/2010 6:23 PM)","text":"\r\n\t\t\t\t\tAnd you're right, most websites and even simple web applications simply don't need those well defined boundaries because it *adds* complexity instead of taking it away.\r\n\t\t\t\t"},{"author":{"name":"Rob Ashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(10/14/2010 6:24 PM)","text":"\r\n\t\t\t\t\tAnd sticking to simple CQRS principles won't be complicating things, that's a separate point from the entities/documents discussion.It just means I have one port of call to get views out, and port of call for enacting change on the model - no fancy architecture/patterns/trickery to be seen here.\r\n\t\t\t\t"},{"author":{"name":"Rob Ashton","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=b6a6693f03003f7ab0f9b0882e9c2dde&size=50&default=identicon"},"date":"(10/14/2010 6:27 PM)","text":"\r\n\t\t\t\t\tOne further thing I forgot to say (Sorry, I think all over the place when I'm writing), unless I had done it this way and started a big discussion in the mailing list and wrote a blog entry summarising that discussion then it wouldn't have taken place and that would be quite sad :)\r\n\t\t\t\t"},{"author":{"name":"cowgaR","avatar":"http://www.gravatar.com/avatar.php?gravatar_id=4661768134975d423174a7506badb1c7&size=50&default=identicon"},"date":"(10/14/2010 10:13 PM)","text":"\r\n\t\t\t\t\tagreed, I've glanced further articles (and discussion, but I started from part 1, gosh! ;-) so continue to bring flame and quality to NoSQL world ;)good job\r\n\t\t\t\t"}]